{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Witaj!!! Oto m\u00f3j zbi\u00f3r notatek, kt\u00f3re stworzy\u0142em podczas nauki j\u0119zyk\u00f3w programowania. Repozytorium tej strony znajduj\u0119 na GitHubie i dost\u0119pny jest pod linkiem . Je\u015bli znalaz\u0142e\u015b b\u0142\u0119dy zg\u0142aszaj je \u015bmia\u0142o :)","title":"Witaj!!!"},{"location":"#witaj","text":"Oto m\u00f3j zbi\u00f3r notatek, kt\u00f3re stworzy\u0142em podczas nauki j\u0119zyk\u00f3w programowania. Repozytorium tej strony znajduj\u0119 na GitHubie i dost\u0119pny jest pod linkiem . Je\u015bli znalaz\u0142e\u015b b\u0142\u0119dy zg\u0142aszaj je \u015bmia\u0142o :)","title":"Witaj!!!"},{"location":"DataScience/DataScience/","text":"Data Science sprawdzenie typu zmiennej type ( nazwa_zmiennej ) zmienne int - typ zmiennej ca\u0142kowitej float - typ zmiennej u\u0142amkowej str - typ zmiennej \u0142a\u0144cuchowej (string) czyli text bool - typ wartos\u0107 logiczna True/False Lista Zbi\u00f3r danych zapisanych pod nazw\u0105 zmiennej. W pythonie mo\u017cna zapisywa\u0107 r\u00f3\u017cne typy zmiennej do tej samej tablicy. Mo\u017cna zapisywa\u0107 listy w listach. hall = 11.25 kit = 18.0 liv = 20.0 bed = 10.75 bath = 9.50 # House information as list of lists house = [[ \"hallway\" , hall ], [ \"kitchen\" , kit ], [ \"living room\" , liv ], [ \"bedroom\" , bed ], [ \"bathroom\" , bath ]] # Print out house print ( house ) Indeksowanie element\u00f3w tablicy Indeksowanie element\u00f3w tablicy zaczyna si\u0119 od liczby 0. # Create the areas list areas = [ \"hallway\" , 11.25 , \"kitchen\" , 18.0 , \"living room\" , 20.0 , \"bedroom\" , 10.75 , \"bathroom\" , 9.50 ] # Print out second element from areas print ( areas [ 1 ]) #Output #11.25 Indeks -1 oznacza ostatni element w tablicy. # Print out last element from areas print ( areas [ - 1 ]) #Output #9.5 Mo\u017cna wykorzysta\u0107 przedzia\u0142, jaki chcemy, aby zosta\u0142 wy\u015bwietlony. Zwracany s\u0105 elementy nieuwzgl\u0119dniaj\u0105cego ostatniego podanego indeksu. Mo\u017cna zwr\u00f3ci\u0107 elementy do konkretnego indeksu lub od konkretnego indeksu. #U\u017cyj krojenia, aby utworzy\u0107 list\u0119, downstairs, kt\u00f3ra zawiera 6 pierwszych #element\u00f3w obszar\u00f3w. downstairs = areas [: 6 ] #Output #['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0] #Utw\u00f3rz g\u00f3r\u0119, jako ostatnie 4 elementy obszar\u00f3w. Tym razem upro\u015b\u0107 ci\u0119cie, pomijaj\u0105c #indeks ko\u0144cowy. upstairs = areas [ 6 :] #Output #['bedroom', 10.75, 'bathroom', 9.5] Podzbiory Lista Pythona mo\u017ce r\u00f3wnie\u017c zawiera\u0107 inne listy. Do podzbioru list list mo\u017cna u\u017cy\u0107 tej samej techniki, co poprzednio: nawias\u00f3w kwadratowych. Wygl\u0105da\u0142oby to mniej wi\u0119cej tak dla listy, house: #Subset the house list to get the float 9.5. house = [[ \"hallway\" , 11.25 ], [ \"kitchen\" , 18.0 ], [ \"living room\" , 20.0 ], [ \"bedroom\" , 10.75 ], [ \"bathroom\" , 9.50 ]] # Subset the house list house [ - 1 ][ 1 ] #Output #9.5 Zmiana warto\u015bci w li\u015bcie Mo\u017cna dokona\u0107 zmiany warto\u015bci w li\u015bcie przypisuj\u0105c jej jak\u0105\u015b warto\u015b\u0107. areas = [ \"hallway\" , 11.25 , \"kitchen\" , 18.0 , \"living room\" , 20.0 , \"bedroom\" , 10.75 , \"bathroom\" , 9.50 ] areas [ - 1 ] = 10.50 areas [ 4 ] = \"chill zone\" Mo\u017cna tak\u017ce przypisa\u0107 warto\u015bci do kilku wybranych indeks\u00f3w. areas [ 2 : 4 ] = [ \"garage\" , 14.45 ] Mo\u017cna tak\u017ce dopisa\u0107 nowe elementy do istniej\u0105cej tablicy areas_1 = areas + [ \"poolhouse\" , 24.5 ] Mo\u017cna tak\u017ce usuwa\u0107 elementy z listy. del areas [ 10 : 12 ] #Output # 'hallway', 11.25, 'kitchen', 18.0, 'chill zone', 20.0, 'bedroom', 10.75, # 'bathroom', 10.5, 'garage', 15.45] Jak jest zmienna to ona przechowuje wska\u017anik na list\u0119. Zapisanie tablicy pod now\u0105 zmienn\u0105 y x = [ \"a\" , \"b\" , \"c\" ] y = x y [ 1 ] = \"z\" y #Output #['a', 'z','c'] x #Output #['a', 'z','c'] Spowoduje skopiowanie odniesienia do listy, a nie same warto\u015bci. Wskazuje ona na to samo miejsce w pami\u0119ci Aby wskaza\u0107 inne miejsce w pami\u0119ci nale\u017cy u\u017cy\u0107 funkcji listy. x = [ \"a\" , \"b\" , \"c\" ] y = list ( x ) y = x [:] y [ 1 ] = \"z\" x #Output #['a', 'b','c'] x #Output #['a', 'z','c'] Funkcje Fragment kodu, kt\u00f3ry mo\u017cna wykorzystywa\u0107 wielokrotnie. Agregacje max() - znajduje maksymalna warto\u015b\u0107 min() - znajduje minimaln\u0105 warto\u015b\u0107 round() - zaokr\u0105gla len() - zwraca d\u0142ugo\u015b\u0107 tablicy append() - dodaje warto\u015b\u0107 na ko\u0144cu listy remove() - usuwa pierwszy argument z listy reverse() - odwraca list\u0119 index() - zwraca warto\u015b\u0107 indeksu, na kt\u00f3rym znajduje si\u0119 dany element count() - zlicza wyst\u0105pienia danego argumentu wgl\u0105d do dokumentacji help ( nazwa_funkcji ) # LUB ? nazwa_funkcji Zwracanie indeksu areas = [ \"hallway\" , 11.25 , \"kitchen\" , 18.0 , \"living room\" , 20.0 , \"bedroom\" , 10.75 , \"bathroom\" , 9.50 ] areas . index ( \"kitchen\" ) #Output #2 Zliczenie ile razy w tablicy pojawi\u0142 si\u0119 dany argument areas . count ( 11.25 ) #Output #1 Zmiana pierwszej litery na du\u017c\u0105 liter\u0119 sister #Output #'liz' sister . capitalize () #Output #'Liz' Zmiana niekt\u00f3rych cz\u0119\u015bci w ci\u0105gu innymi cz\u0119\u015bciami sister . replace ( \"z\" , \"sa\" ) #Output #lisa Metody mog\u0105 si\u0119 zachowywa\u0107 inaczej dla innego rodzaju obiektu. Pakiet NumPy //TO DO Opisa\u0107 to bardziej S\u0142u\u017cy do wykonywania skomplikowanych oblicze\u0144 w Pythonie. Wykonywanie oblicze\u0144 na zwyk\u0142ej li\u015bcie by\u0142o bardzo nieefektywne i by\u0142o bardzo czasoch\u0142onne i bardzo skomplikowane. #instalacja pip3 install numpy R\u00f3\u017cnice mi\u0119dzy u\u017cywaniem NumPy oraz nie. height = [ 1.73 , 1.68 , 1.71 , 1.89 , 1.79 ] weight = [ 65.4 , 59.2 , 63.6 , 88.4 , 68.7 ] weight / height ** 2 #Output #TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int' Wykorzystanie NumPy np_height = np . array ( height ) np_weight = np . array ( weight ) np_weight / np_height ** 2 #Output #array([21.85171573, 20.97505669, 21.75028214, 24.7473475 , 21.44127836]) R\u00f3\u017cnice w dodawaniu tablic python_list = [ 1 , 2 , 3 ] numpy_array = np . array ([ 1 , 2 , 3 ]) python_list + python_list #Output # [1, 2, 3, 1, 2, 3] numpy_array + numpy_array #Output #array([2, 4, 6]) np . array ([ True , 1 , 2 ]) + np . array ([ 3 , 4 , False ]) #Output #np.array([4, 3, 0]) + np.array([0, 2, 2]) Wy\u015bwietlanie wato sci kt\u00f3re spe\u0142niaja warunek bmi = array ([ 21.85171573 , 20.97505669 , 21.75028214 , 24.7473475 , 21.44127836 ]) Dost\u0119p do elementu Kod : bmi [ 1 ] #Output #Wynik: 20.975 Warunkowe filtrowanie Kod : bmi > 23 #Output #array([False, False, False, True, False]) Elementy spe\u0142niaj\u0105ce warunek bmi [ bmi > 23 ] #Output #array([24.7473475]) Dwuwymiarowe tablice Okre\u015blenie ile tablica ma wierszy i kolumn wykorzystuje si\u0119 metod\u0119 shape Zwracanie elementu w tablicy dwuwymiarowej np_2d [ 0 ][ 2 ] #LUB np_2d [ 0 , 2 ] #Wy\u015bwietlenie tylko drugiej i trzeciej kolumny np_2d [:, 1 : 3 ] #Piewszy argument to wiersz a drugi to kolumna Intermediate Python Matplot lineplot import matplotlib.pyplot as plt year = [ 1950 , 1970 , 1990 , 2010 ] pop = [ 2.519 , 3.692 , 5.263 , 6.972 ] plt . plot ( year , pop ) plt . show () Scatter Plot import matplotlib.pyplot as plt year = [ 1950 , 1970 , 1990 , 2010 ] pop = [ 2.519 , 3.692 , 5.263 , 6.972 ] plt . scatter ( year , pop ) plt . show () Skala logarytmiczna plt . xscale ( 'log' ) Histogramy Je\u015bli potrzebujemy pomocy z funkcj\u0105 i znale\u017a\u0107 o niej informacj\u0119 nale\u017cy skorzysta\u0107 z poni\u017cszej komendy. Nale\u017cy pami\u0119ta\u0107, \u017ce nale\u017cy o skr\u00f3cie biblioteki. import matplotlib.pyplot as plt help ( plt . hist ) Tworzenie Histogram\u00f3w w matlib values = [ 0 , 0.6 , 1.4 , 1.6 , 2.2 , 2.5 , 2.6 , 3.2 , 3.5 , 3.9 , 4.2 , 6 ] plt . hist ( values , bins = 3 ) #Okre\u015bla ile ma by\u0107 podzia\u0142\u00f3w na wykresie plt . show () clf() tworzy nowy czysty wykres tak by dane przedstawi\u0107 na osobnym wykresie. xlabel() Umo\u017cliwiaj\u0105 dodanie opisu osi x ylabel() Umo\u017cliwiaj\u0105 dodanie opisu osi y title() Dodanie tytu\u0142y dla wykresu yticks() Dodaje te warto\u015bci na wykresie na osi y ktore chcemy wyswietlic Mo\u017cemy przypisa\u0107 nazwy do tych warto\u015bci. Nale\u017cy pami\u0119ta\u0107 o tym, aby ta lista by\u0142a tej samej d\u0142ugo\u015bci co poprzednia. plt . yticks ([ 0 , 2 , 4 , 6 , 8 , 10 ], [ '0' , '2B' , '4B' , '6B' , '8B' , '10B' ]) Mo\u017cna dodawa\u0107 nowe dane do wykresu import matplotlib.pyplot as plt # Dane z lat 1950-2100, przyk\u0142adowe warto\u015bci dla pierwszych i ostatnich lat year = [ 1950 , 1951 , 1952 , ... , 2100 ] pop = [ 2.538 , 2.57 , 2.62 , ... , 10.85 ] # Dodanie dodatkowych danych z wcze\u015bniejszych lat year = [ 1800 , 1850 , 1900 ] + year pop = [ 1.0 , 1.262 , 1.650 ] + pop plt . plot ( year , pop ) plt . xlabel ( 'Year' ) plt . ylabel ( 'Population' ) plt . title ( 'World Population Projections' ) plt . yticks ([ 0 , 2 , 4 , 6 , 8 , 10 ], [ '0' , '2B' , '4B' , '6B' , '8B' , '10B' ]) plt . show () Zmiana rozmiaru punkt\u00f3w (Ich powi\u0119kszenie) plt . scatter ( gdp_cap , life_exp , s = np_pop ) Pozwala na zmian\u0119 rozmiaru punktow by staly si\u0119 one zale\u017cne od swojego rozmiaru Caly kod() # Import numpy as np import numpy as np # Store pop as a numpy array: np_pop np_pop = np . array ( pop ) # Double np_pop np_pop = np_pop * 2 # Update: set s argument to np_pop plt . scatter ( gdp_cap , life_exp , s = np_pop ) # Previous customizations plt . xscale ( 'log' ) plt . xlabel ( 'GDP per Capita [in USD]' ) plt . ylabel ( 'Life Expectancy [in years]' ) plt . title ( 'World Development in 2007' ) plt . xticks ([ 1000 , 10000 , 100000 ],[ '1k' , '10k' , '100k' ]) # Display the plot plt . show () Rezultat Argument c w funkcji scatter oznacza dostosowanie kolor\u00f3w. Mo\u017cna doda\u0107 opisy do poszczeg\u00f3lnych punkt\u00f3w na wykresie # Scatter plot plt . scatter ( x = gdp_cap , y = life_exp , s = np . array ( pop ) * 2 , c = col , alpha = 0.8 ) # Previous customizations plt . xscale ( 'log' ) plt . xlabel ( 'GDP per Capita [in USD]' ) plt . ylabel ( 'Life Expectancy [in years]' ) plt . title ( 'World Development in 2007' ) plt . xticks ([ 1000 , 10000 , 100000 ], [ '1k' , '10k' , '100k' ]) # Additional customizations plt . text ( 1550 , 71 , 'India' ) plt . text ( 5700 , 80 , 'China' ) # Add grid() call plt . grid ( True ) # Show the plot plt . show () S\u0142owniki Je\u015bli korzystamy z list to musimy korzysta\u0107 z indeks\u00f3w co jest ma\u0142o intuicyjne oraz ma\u0142o wygodne xD. Lepsze do tego jest wykorzystanie s\u0142ownik\u00f3w. Poni\u017cej przedstawiono por\u00f3wnanie wykorzystania s\u0142ownik\u00f3w i list pop = [ 30.55 , 2.77 , 39.21 ] countries = [ \"afghanistan\" , \"albania\" , \"algeria\" ] ind_alb = countries . index ( \"albania\" ) # Wynik dla ind_alb print ( ind_alb ) # Wynik: 1 # Dost\u0119p do populacji Albanii u\u017cywaj\u0105c uzyskanego indeksu print ( pop [ ind_alb ]) # Wynik: 2.77 S\u0142ownik pop = [ 30.55 , 2.77 , 39.21 ] countries = [ \"afghanistan\" , \"albania\" , \"algeria\" ] world = { \"afghanistan\" : 30.55 , \"albania\" : 2.77 , \"algeria\" : 39.21 } print ( world [ \"albania\" ]) # Wynik: 2.77 S\u0142ownik skonstruowany jest w spos\u00f3b klucz : warto\u015b\u0107 Pozwala to unikn\u0105\u0107 . Dost\u0119p do warto\u015bci obywa si\u0119 poprzez klucz. Kolejny przyk\u0142ad stworzenia s\u0142ownika (Przyk\u0142ad pochodzi z Data Campa) # Definition of countries and capital countries = [ 'spain' , 'france' , 'germany' , 'norway' ] capitals = [ 'madrid' , 'paris' , 'berlin' , 'oslo' ] # From string in countries and capitals, create dictionary europe europe = { 'spain' : 'madrid' , 'france' : 'paris' , 'germany' : 'berlin' , 'norway' : 'oslo' } # Print europe print ( europe ) # output: # {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo'} Aby wy\u015bwietli\u0107 same klucze, nale\u017cy u\u017cy\u0107 metody keys() # Definition of dictionary europe = { 'spain' : 'madrid' , 'france' : 'paris' , 'germany' : 'berlin' , 'norway' : 'oslo' } # Print out the keys in europe print ( europe . keys ()) # Print out value that belongs to key 'norway' print ( europe [ 'norway' ]) Klucze w s\u0142owniku s\u0105 obiektami, kt\u00f3re s\u0105 niezmienne. Klucze powinny by\u0107 unikalne. Mo\u017cemy zmienia\u0107 jedynie warto\u015bci tych kluczy. Mo\u017cna dodawa\u0107 nowe rekordy s\u0142ownika. wykonujemy to poprzez world [ 'sealand' ] = 0.000027 Aby sprawdzi\u0107, czy dodanie przebieg\u0142o poprawnie, mo\u017cemy sprawdzi\u0107, czy w s\u0142owniku znajduje si\u0119 ten rekord: \"sealand\" in world #True Mo\u017cna zmienia\u0107 warto\u015bci w s\u0142owniku world [ 'sealand' ] = 0.000029 Mo\u017cna usuwa\u0107 elementy w s\u0142owniku poprzez wykonanie komendy del del ( world [ 'sealand' ]) R\u00f3\u017cnice mi\u0119dzy list\u0105 a s\u0142ownikiem Lista: Mo\u017cliwo\u015b\u0107 wyboru, aktualizacji i usuwania element\u00f3w przy u\u017cyciu nawias\u00f3w kwadratowych [] . Indeksowana zakresem numer\u00f3w. Kolekcja warto\u015bci, gdzie kolejno\u015b\u0107 ma znaczenie, umo\u017cliwiaj\u0105ca wyb\u00f3r ca\u0142ych podzbior\u00f3w. S\u0142ownik: Mo\u017cliwo\u015b\u0107 wyboru, aktualizacji i usuwania element\u00f3w przy u\u017cyciu nawias\u00f3w kwadratowych [] . Indeksowany unikalnymi kluczami. Tabela wyszukiwania z unikalnymi kluczami. Istnieje mo\u017cliwo\u015b\u0107 stworzenia s\u0142ownika, kt\u00f3ry zawiera w sobie inne mniejsze s\u0142owniki. Poni\u017cej wida\u0107 przyklad z DataCampa # Dictionary of dictionaries europe = { 'spain' : { 'capital' : 'madrid' , 'population' : 46.77 }, 'france' : { 'capital' : 'paris' , 'population' : 66.03 }, 'germany' : { 'capital' : 'berlin' , 'population' : 80.62 }, 'norway' : { 'capital' : 'oslo' , 'population' : 5.084 } } # Print out the capital of France print ( europe [ 'france' ][ 'capital' ]) # Create sub-dictionary data data = { 'capital' : 'rome' , 'population' : 59.83 } # Add data to europe under key 'italy' europe [ 'italy' ] = data # Print europe print ( europe ) Pandas podstawy tablice NumPy nie radz\u0105 sobie dobrze z r\u00f3\u017cnymi rodzajami danych. W pandasie przechowujemy dane tabelaryczne. Przechowywane s\u0105 w ramce danych DataFrame Aby utworzy\u0107 ramk\u0119 danych, mo\u017cna skorzysta\u0107 ze s\u0142ownika. dict = { \"country\" : [ \"Brazil\" , \"Russia\" , \"India\" , \"China\" , \"South Africa\" ], \"capital\" : [ \"Brasilia\" , \"Moscow\" , \"New Delhi\" , \"Beijing\" , \"Pretoria\" ], \"area\" : [ 8.516 , 17.10 , 3.286 , 9.597 , 1.221 ], \"population\" : [ 200.4 , 143.5 , 1252 , 1357 , 52.98 ] } import pandas as pd brics = pd . DataFrame ( dict ) Dodanie nowych indeks\u00f3w mo\u017cna zrobi\u0107 poprzez: brics . index = [ \"BR\" , \"RU\" , \"IN\" , \"CH\" , \"SA\" ] brics Importowanie danych z pliku csv odbywa si\u0119 przy u\u017cyciu komendy brics = pd . read_csv ( \"path/to/brics.csv\" ) brics Aby ustali\u0107 indeksy w ramce danych korzystamy z argumentu index_col. Kolejny przyk\u0142ad stworzenia s\u0142ownika, kt\u00f3ry sk\u0142ada si\u0119 w sobie z innych s\u0142ownik\u00f3w. # Pre-defined lists names = [ 'United States' , 'Australia' , 'Japan' , 'India' , 'Russia' , 'Morocco' , 'Egypt' ] dr = [ True , False , False , False , True , True , True ] cpc = [ 809 , 731 , 588 , 18 , 200 , 70 , 45 ] # Import pandas as pd import pandas as pd # Create dictionary my_dict with three key:value pairs: my_dict my_dict = { 'country' : names , 'drives_right' : dr , 'cars_per_cap' : cpc } # Build a DataFrame cars from my_dict: cars cars = pd . DataFrame ( my_dict ) # Print cars print ( cars ) #output: # country drives_right cars_per_cap # 0 United States True 809 # 1 Australia False 731 # 2 Japan False 588 # 3 India False 18 # 4 Russia True 200 # 5 Morocco True 70 # 6 Egypt True 45 Ustawienie w\u0142asnych indeks\u00f3w wykonuje si\u0119 poprzez u\u017cycie komendy. # Definition of row_labels row_labels = [ 'US' , 'AUS' , 'JPN' , 'IN' , 'RU' , 'MOR' , 'EG' ] # Specify row labels of cars cars . index = row_labels Dostep do danych Aby wy\u015bwietli\u0107 tylko jedn\u0105 kolumne mo\u017cna to zrobi\u0107 na dwa sposoby brigs [ \"country\" ] #LUB brigs . country Aby zachowa\u0107 dane tego samego typu jak w pocz\u0105tkowej ramce danych, nale\u017cy skorzysta\u0107 z podw\u00f3jnych nawias\u00f3w kwadratowych. W przeciwnym razie dane zostan\u0105 zapisane w serii. brigs [[ \"country\" ]] Mo\u017cna wybra\u0107 typ ramki danych dwie kolumny lub wi\u0119cej. brigs [[ \"country\" , \"capital\" ]] /TO DO Doczyta\u0107 o tym wi\u0119cej Aby uzyska\u0107 dost\u0119p do wybranych danych, nale\u017cy skorzysta\u0107 z indeks\u00f3w. Indeksy numerowane s\u0105 od 0. brigs [ 1 : 4 ] Dost\u0119p do okre\u015blonego rzedu, wierszu otrzymujemy poprzez u\u017cycie komendy loc . Pojedynczy nawias kwadratowy gdy dane s\u0105 typu Serii. brigs . loc [ \"RU\" ] Podw\u00f3jny nawias kwadratowy powoduje ze dane s\u0105 w typu ramki danych. brigs . loc [[ \"RU\" ]] Typ Series u\u017cywany gdy chcesz u\u017cywa\u0107 danych jako operacja typowe dla sekwencji, czyli takie jak obliczanie statystyk, funkcje agreguj\u0105ce. Typ DataFrame podw\u00f3jne nawiasy u\u017cywane s\u0105 gdy chcemy u\u017cy\u0107 filtrowania, do\u0142\u0105czania kolumn czy tabel. Mo\u017cna uzyska\u0107 dost\u0119p do wielu wierszy. brigs . loc [[ \"RU\" , \"IN\" , \"CH\" ]] Mo\u017cna uzyska\u0107 dost\u0119p r\u00f3wnie\u017c wybrane wiersze jak i kolumny. brigs . loc [[ \"RU\" , \"IN\" , \"CH\" ], [ \"country\" , \"capital\" ]] Aby wybra\u0107 tylko dwie kolumny z u\u017cyciem loc . Nale\u017cy skorzysta\u0107 z nast\u0119puj\u0105cej sk\u0142adni. brigs . loc [:, [ \"country\" , \"capital\" ]] Podsumowanie U\u017cycie nawias\u00f3w kwadratowych : Dost\u0119p do kolumn: brics[[\"country\", \"capital\"]] Dost\u0119p do wierszy poprzez wycinanie: brics[1:4] U\u017cycie loc (dost\u0119p oparty na etykietach) : Dost\u0119p do wierszy: brics.loc[[\"RU\", \"IN\", \"CH\"]] Dost\u0119p do kolumn: brics.loc[:, [\"country\", \"capital\"]] Dost\u0119p do wierszy i kolumn jednocze\u015bnie: brics.loc[[\"RU\", \"IN\", \"CH\"], [\"country\", \"capital\"]] Mo\u017cna uzyska\u0107 dost\u0119p przy u\u017cyciu indeksu. Poni\u017csze wyra\u017cenie: brigs . loc [[ \"RU\" , \"IN\" , \"CH\" ], [ \"country\" , \"capital\" ]] Mo\u017cna zast\u0105pi\u0107 indeksami z wykorzystaniem metody iloc . brigs . iloc [[ 1 , 2 , 3 ], [ 0 , 1 ]] Analogicznie brigs . loc [:, [ \"country\" , \"capital\" ]] brigs . iloc [:, [ 0 , 1 ]] ### Operatory logiczne < - Strictly less than <= - Less than or equal > - Strictly greater than >= - Greater than or equal == - Equal != - Not equal AND OR NOT Por\u00f3wnanie array w NumPy przy u\u017cyciu and , or , not wy\u015bwietla b\u0142\u0105d. bmi = array ([ 21.85171573 , 20.97505669 , 21.75028214 , 24.7473475 , 21.44127836 ]) bmi > 21 and bmi < 22 #Output #ValueError: The truth value of an array with more than one element is ambiguous. #Use a.any() or a.all() Nale\u017cy u\u017cy\u0107 odpowiadaj\u0105cych metod: logical_and () logical_or () logical_not () Poprawne u\u017cycie wygl\u0105da nast\u0119puj\u0105co: np . logical_and ( bmi > 21 , bmi < 22 ) #Output #array([True, False, True, False, True], dtype=bool) Wy\u015bwietlenie odpowiednich warto\u015bci spe\u0142niaj\u0105cych warunki. bmi [ np . logical_and ( bmi > 21 , bmi < 22 )] #Output #array([21.852, 21.75, 21.441]) ### Wyra\u017cenie warunkowe # Define variables room = \"bed\" area = 14.0 # if-elif-else construct for room if room == \"kit\" : print ( \"looking around in the kitchen.\" ) elif room == \"bed\" : print ( \"looking around in the bedroom.\" ) else : print ( \"looking around elsewhere.\" ) # if-elif-else construct for area if area > 15 : print ( \"big place!\" ) elif area > 10 : print ( \"medium size, nice!\" ) else : print ( \"pretty small.\" ) Funkcja elif dzia\u0142a wtedy gdy warunek pierwszy oznaczony jako if nie zosta\u0142 spe\u0142niony. Je\u015bli pierwszy warunek zosta\u0142 spe\u0142niony to operacja elif nie zostanie wykonana. Mo\u017ce by\u0107 wiele warunk\u00f3w elif . Je\u015bli pierwszy warunek if nie zostanie spe\u0142niony to przechodzi po kolei po kolejnych warunkach elif . ### Filtrowanie danych Je\u015bli w ramce danych b\u0119dzie kolumna, kt\u00f3rej b\u0119d\u0105 warto\u015bci logiczne True , False , to nie trzeba pisa\u0107 dodatkowego warunku. # Import cars data import pandas as pd cars = pd . read_csv ( 'cars.csv' , index_col = 0 ) print ( cars ) # cars_per_cap country drives_right # US 809 United States True # AUS 731 Australia False # JPN 588 Japan False # IN 18 India False # RU 200 Russia True # MOR 70 Morocco True # EG 45 Egypt True # Extract drives_right column as Series: dr dr = cars [ \"drives_right\" ] # Use dr to subset cars: sel sel = cars [ dr ] # Print sel print ( sel ) #Output # cars_per_cap country drives_right # US 809 United States True # RU 200 Russia True # MOR 70 Morocco True # EG 45 Egypt True Mo\u017cna zapisa\u0107 poni\u017csze komendy krocej dr = cars [ \"drives_right\" ] sel = cars [ dr ] sel = cars [ cars [ 'drives_right' ]] Gdy nale\u017cy spe\u0142ni\u0107 wiele warunk\u00f3w, warto skorzysta\u0107 ze wcze\u015bniejszych funkcji takich jak np.logical_and() , np.logical_or() lub np.logical_not() , # Import cars data import pandas as pd cars = pd . read_csv ( 'cars.csv' , index_col = 0 ) # Import numpy, you'll need this import numpy as np # Create medium: observations with cars_per_cap between 100 and 500 cpc = cars [ 'cars_per_cap' ] between = np . logical_and ( cpc > 100 , cpc < 500 ) medium = cars [ between ] # Print medium print ( medium ) P\u0119lte while i for. P\u0119tla while za ka\u017cdym razem sprawdza warunek. P\u0119tla for wykonuje okre\u015blon\u0105 liczb\u0119 iteracji. # Initialize offset offset = - 6 # Code the while loop while offset != 0 : print ( \"correcting...\" ) if offset > 0 : offset -= 1 else : offset += 1 print ( offset ) P\u0119tla for fam = [ 1.73 , 1.68 , 1.71 , 1.89 ] for height in fam : print ( height ) #Output #1.73 #1.68 #1.71 #1.89 metoda enumerate pozwala na uzyskanie indeksu. fam = [ 1.73 , 1.68 , 1.71 , 1.89 ] for index , height in enumerate ( fam ): print ( \"index \" + str ( index ) + \": \" + str ( height )) #Output #index 0: 1.73 #index 1: 1.68 #index 2: 1.71 #index 3: 1.89 Wyst\u0119puje funkcja capitalize() , kt\u00f3ra wy\u015bwietla pojedyncze znaki ze s\u0142owa. for c in \"family\" : print ( c . capitalize ()) #Output #F #A #M #I #L #Y # house list of lists house = [[ \"hallway\" , 11.25 ], [ \"kitchen\" , 18.0 ], [ \"living room\" , 20.0 ], [ \"bedroom\" , 10.75 ], [ \"bathroom\" , 9.50 ]] # Build a for loop from scratch for name , area in house : print ( \"the \" + str ( name ) + \" is \" + str ( area ) + \" sqm\" ) #output: #the hallway is 11.25 sqm #the kitchen is 18.0 sqm #the living room is 20.0 sqm #the bedroom is 10.75 sqm #the bathroom is 9.5 sqm P\u0119tla w s\u0142owniku world = { \"afghanistan\" : 30.55 , \"albania\" : 2.77 , \"algeria\" : 39.21 } for key , value in world : print ( key + \" -- \" + str ( value )) #Output #ValueError: too many values to unpack (expected 2) Ten b\u0142\u0105d wynika z tego, \u017ce podczas iteracji po s\u0142owniku world bezpo\u015brednio, otrzymuje si\u0119 tylko klucze. Aby uzyska\u0107 pary klucz-warto\u015b\u0107, nale\u017cy u\u017cy\u0107 metody .items() : for key , value in world . items (): print ( key + \" -- \" + str ( value )) #Output #Algeria -- 39.21 #Afghanistan -- 30.55 #Albania -- 2.77 Trzeba pami\u0119ta\u0107, \u017ce kolejno\u015b\u0107 ma znaczenie. Pierwsza zmienna otrzymuje klucz, a druga warto\u015b\u0107. Iterowanie po dw\u00f3ch tablicach. import numpy as np np_height = np . array ([ 1.73 , 1.68 , 1.71 , 1.89 , 1.79 ]) np_weight = np . array ([ 65.4 , 59.2 , 63.6 , 88.4 , 68.7 ]) meas = np . array ([ np_height , np_weight ]) for val in meas : print ( val ) #Output #[1.73, 1.68, 1.71, 1.89, 1.79] #[65.4, 59.2, 63.6, 88.4, 68.7] W powy\u017cszym przypadku p\u0119tla for wypisuje cala tablice w ka\u017cdej iteracji. Wypisanie ka\u017cdego elementu tablicy wykonuje si\u0119 poprzez wykorzystanie funkcji nditer() . import numpy as np np_height = np . array ([ 1.73 , 1.68 , 1.71 , 1.89 , 1.79 ]) np_weight = np . array ([ 65.4 , 59.2 , 63.6 , 88.4 , 68.7 ]) meas = np . array ([ np_height , np_weight ]) for val in np . nditer ( meas ): print ( val ) #Output #1.73 #1.68 #1.71 #1.89 #1.79 #65.4 #... Kolejny przyk\u0142ad z Data Campa: np_height, tablic\u0119 NumPy zawieraj\u0105c\u0105 wysoko\u015b\u0107 zawodnik\u00f3w Major League Baseball, oraz np_baseball , dwuwymiarow\u0105 tablic\u0119 NumPy zawieraj\u0105c\u0105 zar\u00f3wno wysoko\u015b\u0107 (pierwsza kolumna), jak i wag\u0119 (druga kolumna) tych zawodnik\u00f3w. # Import numpy as np import numpy as np # For loop over np_height for x in np_height : print ( str ( x ) + \" inches\" ) # For loop over np_baseball for x in np . nditer ( np_baseball ) : print ( x ) Iterowanie po DataFrame za pomoc\u0105 for DataFrame dzia\u0142aj\u0105 inaczej ni\u017c 2D NumPy. Nie wy\u015bwietla ka\u017cdego wiersza tylko wy\u015bwietli nazwy etykiet czyli nazwy kolumn. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for val in brics : print ( val ) W takim przypadku otrzymamy nazwy kolumn column, capital, area, population iterrows() Metoda iterrows() w bibliotece pandas w Pythonie s\u0142u\u017cy do iterowania po wierszach DataFrame. Dla ka\u017cdej iteracji zwraca par\u0119 (indeks, seria), gdzie \"indeks\" to etykieta wiersza, a \"seria\" to obiekt Series zawieraj\u0105cy dane danego wiersza. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for lab , row in brics . iterrows (): print ( lab ) print ( row ) Brazylia (BR): Kraj: Brazil Stolica: Brasilia Powierzchnia: 8.516 (jednostka nie podana, prawdopodobnie mln km\u00b2) Populacja: 200.4 (jednostka nie podana, prawdopodobnie mln) Rosja (RU): Kraj: Russia Stolica: Moscow Powierzchnia: 17.1 (jednostka nie podana, prawdopodobnie mln km\u00b2) Populacja: 143.5 (jednostka nie podana, prawdopodobnie mln) Mo\u017cna wy\u015bwietli\u0107 tylko stolice danego indeksu. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for lab , row in brics . iterrows (): print ( lab + \": \" + row [ \"capital\" ]) #Output #BR: Brasilia #RU: Moscow #IN: New Delhi #CH: Beijing #SA: Pretoria Mo\u017cna dodawa\u0107 now\u0105 kolumn\u0119 do DataFrame. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for lab , row in brics . iterrows (): brics . loc [ lab , \"name_length\" ] = len ( row [ \"country\" ]) print ( brics ) #Output #| Code | Country | Capital | Area | Population | Name Length | #|------|---------------|-----------|--------|------------|-------------| #| BR | Brazil | Brasilia | 8.516 | 200.40 | 6 | #| RU | Russia | Moscow | 17.100 | 143.50 | 6 | #| IN | India | New Delhi | 3.286 | 1252.00 | 5 | #| CH | China | Beijing | 9.597 | 1357.00 | 5 | #| SA | South Africa | Pretoria | 1.221 | 52.98 | 12 | Tutaj mo\u017ce nast\u0105pic spadek wydajno\u015bci. Nale\u017cy ca\u0142\u0105 kolumn\u0119 DataFrame import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) brics [ \"name_length\" ] = brics [ \"country\" ] . apply ( len ) print ( brics ) #output #Code| Country | Capital | Area | Population | Name Length | #BR | Brazil | Brasilia | 8.516 | 200.40 | 6 #RU | Russia | Moscow | 17.100 | 143.50 | 6 #IN | India | New Delhi | 3.286 | 1252.00 | 5 #CH | China | Beijing | 9.597 | 1357.00 | 5 #SA | South Africa | Pretoria | 1.221 | 52.98 | 12 Joining Data with Pandas Informacje o danych z pliku wards = pd . read_csv ( \"Ward_Offices.csv\" ) print ( wards . head ()) print ( wards . shape ) #Output #ward alderman address zip #1 Proco \"Joe\" ... 2058 NORTH W... 60647 #2 Brian Hopkins 1400 NORTH ... 60622 #3 Pat Dowell 5046 SOUTH S... 60609 #4 William D. B... 435 EAST 35T... 60616 #5 Leslie A. Ha... 2325 EAST 71... 60649 #(50,4) Drugi plik census = pd . read_csv ( \"Ward_Census.csv\" ) print ( census . head ()) print ( census . shape ) #Output #ward pop_2000 pop_2010 change address zip # 1 52951 56149 6% 2765 WEST SA... 60647 # 2 54361 55805 3% WM WASTE MAN... 60622 # 3 40385 53039 31% 17 EAST 38TH... 60653 # 4 51953 54589 5% 31ST ST HARB... 60653 # 5 55302 51455 -7% JACKSON PARK... 60637 Marging tables Inner join Poni\u017cszy kod pobiera pierwsz\u0105 ramk\u0119 DataFrame i \u0142\u0105czy j\u0105 z drug\u0105 ramk\u0105 DataFrame. i \u0142\u0105czy j\u0105 po kolumnie ward. wards_census = wards . merge ( census , on = \"ward\" ) print ( wards_census . head ( 4 )) #Output #ward alderman address_x zip_x pop_2000 pop_2010 change address_y zip_y # 1 Proco \"Joe\" ... 2058 NORTH W... 60647 52951 56149 6% 2765 WEST SA... 60647 # 2 Brian Hopkins 1400 NORTH ... 60622 54361 55805 3% WM WASTE MAN... 60622 # 3 Pat Dowell 5046 SOUTH S... 60609 40385 53039 31% 17 EAST 38TH... 60653 # 4 William D. B... 435 EAST 35T... 60616 51953 54589 5% 31ST ST HARB... 60653 Warto pami\u0119ta\u0107 ze je\u015bli tabele maj\u0105 takie same nazwy kolumn to Pandas automatycznie doda przyrostki _x lub _y. print ( wards_census . columns ) #Index(['ward', 'alderman', 'address_x', 'zip_x', 'pop_2000', 'pop_2010', 'change', # 'address_y', 'zip_y'], # dtype='object') Mo\u017cemy to kontrolowa\u0107 dodaj\u0105c argument suffixes do kt\u00f3rego b\u0119da przypisane wartosci w krotce. W poni\u017cszy przypadku b\u0119dzie to oznaczalo \u017ce _ward zostanie przypisany do kolumn nale\u017c\u0105cych wcze\u015bniej do pierwszej tabeli a _cen zostanie przypisany do kolumn nale\u017c\u0105cych wcze\u015bniej do drugiej tabeli. wards_census = wards . merge ( census , on = 'ward' , suffixes = ( '_ward' , '_cen' )) print ( wards_census . head ()) print ( wards_census . shape ) #Output #ward alderman address_ward zip_ward pop_2000 pop_2010 change address_cen zip_cen # 1 Proco \"Joe\" ... 2058 NORTH W... 60647 52951 56149 6% 2765 WEST SA... 60647 # 2 Brian Hopkins 1400 NORTH ... 60622 54361 55805 3% WM WASTE MAN... 60622 # 3 Pat Dowell 5046 SOUTH S... 60609 40385 53039 31% 17 EAST 38TH... 60653 # 4 William D. B... 435 EAST 35T... 60616 51953 54589 5% 31ST ST HARB... 60653 # 5 Leslie A. Ha... 2325 EAST 71... 60649 55302 51455 -7% JACKSON PARK... 60637 Aby policzy\u0107 ile by\u0142o wyst\u0105pie\u0144 danego rekordu w danej tabeli u\u017cywamy metody value_counts() # Merge the taxi_owners and taxi_veh tables setting a suffix taxi_own_veh = taxi_owners . merge ( taxi_veh , on = 'vid' , suffixes = ( '_own' , '_veh' )) # Print the value_counts to find the most popular fuel_type print ( taxi_own_veh [ 'fuel_type' ] . value_counts ()) #Output #HYBRID 2792 #GASOLINE 611 #FLEX FUEL 89 #COMPRESSED NATURAL GAS 27 #Name: fuel_type, dtype: int64 Relacje w tabeli Relacja jeden do jeden W tej relacji ka\u017cdy wiersz w lewej tabeli jest powi\u0105zany z tylko jednym wierszem w prawej tabeli. Relacja jeden do wielu W tej relacji ka\u017cdy wiersz po lewej tabeli jest powiazany z jednym lub wi\u0119ksz\u0105 liczb\u0105 wierszy w prawej tabeli. Na przyk\u0142ad w jednym oddziale pracuje wiele firm. ward_licenses = wards . merge ( licenses , on = 'ward' , suffixes = ( '_ward' , '_lic' )) print ( ward_licenses . head ()) ward alderman address_ward zip_ward account aid business address_lic 1 Proco \"Joe\" ... 2058 NORTH W... 60647 12024 nan DIGILOG ELEC... 1038 N ASHLA... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 14446 743 EMPTY BOTTLE... 1035 N WESTE... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 14624 775 LITTLE MEL'S... 2205 N CALIF... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 14987 nan MR. BROWN'S ... 2301 W CHICA... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 15642 814 Beat Kitchen 2000\u20132100 W ... Doklei\u0107 rzeczy z innej cz\u0119\u015bci merge_asof() dzia\u0142a podobnie jak merge_ordered() left join. Dopasowywuje kolumny najbli\u017cszej warto\u015bci, a nie r\u00f3wne warto\u015bci. Warto\u015b\u0107 ta jest nie wi\u0119ksza niz warto\u015b\u0107 C. Trzeba pami\u0119ta\u0107 aby kolumny by\u0142y posortowane. Zastosowanie argumentu direction=\u2019forward\u2019 spowoduj\u0119 \u017ce warto\u015bci przypisane b\u0119d\u0105 wi\u0119sz\u0105 lub r\u00f3wne danej wartosci. Natomiast direction=\u2019nearest\u2019 przypisz\u0119 warto\u015bc najbli\u017csz\u0105. Zastosowanie gdy dane godzinowe si\u0119 niezgadzaj\u0105. pd . merge_asof ( visa , ibm , on = [ 'date_time' ], suffixes = ( '_visa' , '_ibm' ), direction = 'forward' ) Prawdopodobie\u0144stwo Aby wyci\u0105gn\u0105\u0107 jedn\u0105 przyk\u0142adow\u0105 dan\u0105 korzystamy z metody .sample() . Dzia\u0142a ona losowo print ( sales_counts ) #Output # name n_sales #0 Amir 178 #1 Brian 128 #2 Claire 75 #3 Damian 69 sales_counts . sample () #Output # name n_sales #1 Brian 128 # name n_sales #2 Claire 75 Je\u015bli u\u017cyli\u015bmy metody sample() dany rekordu nie ma ju\u017c we zbiorze. Je\u015bli wybiezrszemy to samo ziarno do generowania liczb losowych otrzymamy te same wyniki. np . random . seed ( 10 ) sales_counts . sample () #Output # name n_sales #1 Brian 128 Mo\u017cna tak\u017ce poda\u0107 ilo\u015b\u0107 zwracanych rekord\u00f3w. sales_counts . sample ( 2 ) #Output # name n_sales #1 Brian 128 #2 Claire 75 Mo\u017cna przywr\u00f3ci\u0107 star\u0105 wersj\u0119 tabeli, korzystaj\u0105c z parametru replace = True . Jest to losowanie ze zwracaniem. sales_counts . sample ( 5 , replace = True ) Zliczenie wyst\u0105pienie ka\u017cdej warto\u015bci w danej tabeli. amir_deals [ \"product\" ] . value_counts () Wizualizacja danych na histogramie rolls_10 [ 'number' ] . hist ( bins = np . linspace ( 1 , 7 , 7 )) plt . show () Distributions Continous Aby obliczy\u0107 prawdopodobie\u0144stwo korzystamy z metody .cdf() from scipy.stats import uniform uniform . cdf ( 7 , 0 , 12 ) #0.5833333 cdf(7, 0, 12) Oblicza dystrybuant\u0119 rozk\u0142adu jednostajnego w punkcie 7, dla rozk\u0142adu zdefiniowanego od 0 do 12. Oblicza to prawdopodobie\u0144stwo \u017ce zmienna losowa na przedziale [0, 12] przyjmie warto\u015b\u0107 mniejsz\u0105 lub r\u00f3wn\u0105 7. Je\u015bli chcemy obliczy\u0107 prawdopodobie\u0144stwo \u017ce liczba b\u0119dize wi\u0119ksza od danej warto\u015bci to musimy odj\u0105\u0107 od jedno\u015bci. from scipy.stats import uniform 1 - uniform . cdf ( 7 , 0 , 12 ) Aby obliczy\u0107 przwdopodobie\u0144stwo wylosowania mi\u0119dzy dwoma przedzia\u0142ami korzystamy z odj\u0119cia wi\u0119kszej liczby od mniejszej. from scipy.stats import uniform uniform . cdf ( 7 , 0 , 12 ) - uniform . cdf ( 4 , 0 , 12 ) Je\u015bli chcemy wylosowa\u0107 10 liczb z przedzia\u0142u od 0 do 5. from scipy.stats import uniform uniform . rvs ( 0 , 5 , size = 10 ) #Output #array([1.89740094, 4.70673196, 0.33224683, 1.0137103 , 2.31641255, 3.49969897, 0.29688598, 0.92057234, 4.71086658, 1.56815855]) Mo\u017cliwe jest zasumulowanie w pythonie rzuceniem monet\u0105. binom . rvs ( 1 , 0.5 , size = 8 ) #Output #array([0, 1, 1, 0, 1, 0, 1, 1]) Powy\u017csza funkcja symuluje rzut monet\u0105 gdzie mo\u017clie s\u0105 dwie mo\u017cliwo\u015bci albo b\u0119dzie 0 albo 1. from scipy.stats import binom binom . rvs ( 3 , 0.5 , size = 10 ) #Output #array([0, 3, 2, 1, 3, 0, 2, 2, 0, 0]) Powy\u017cszy kod m\u00f3wi \u017ce chce rzuci\u0107 10 razy trzema monetami z prawdopodobie\u0144stwem sukcesu 50% . Je\u015bli chcemy zmieni\u0107 pradwopodobie\u0144stwo sukcesu(w poni\u017cszym przypadku je zmniejszy\u0107 do 25%) binom.rvs(3, 0.25, size=10) .pmf() u\u017cywana jest do obliczenia prawdopodobie\u0144stwa wyst\u0105pienia konkretnej liczby sukces\u00f3w w serii pr\u00f3b Bernulliego Prawdopodobie\u0144swo rzucenia 7 or\u0142\u00f3w na 10 monet mo\u017cna u\u017cy\u0107 metody .pmf(7, 10, 0.5) binom . pmf ( 7 , 10 , 0.5 ) #Output #0.1171875 Aby pozna\u0107 pradopodobie\u0144swo wyrzucenia 7 lub mniej or\u0142\u00f3w. binom . cdf ( 7 , 10 , 0.5 ) #Output #0.9453125 Prawdopodobie\u0144stwo wyrzucenia wi\u0119cej ni\u017c 7. Wyliczamy za pomoc\u0105 poni\u017cszego wyra\u017cenia. 1 - binom . cdf ( 7 , 10 , 0.5 ) #Output #0.0546875 Normalna dystrybuanta W\u0142a\u015bciwo\u015bci - Jest symetryczna - powierzchnia r\u00f3wna 1 - nigdy nie dotyka zera - s\u0142u\u017cy do okre\u015blenia \u015bredniej i/lub odchylenia standardowego - W rozk\u0142adzie normalnym 68% danych znajduje sie pomi\u0119dzy odchyleniami standardowymi - 95% wszystkich danych znajduj\u0119 si\u0119 w odleg\u0142o\u015bci 2 odchyle\u0144 standardowych od \u015brodka - 99.7% wszystkich danych znajduje si\u0119 w odleg\u0142o\u015bci 3 odchyle\u0144 standardowych od \u015bredniej Przyk\u0142ad: Wy\u015bwietlenie informacji ile kobiet ma wzrost mniejszy ni\u017c oblicza si\u0119: from scipy.stats import norm norm . cdf ( 154 , 161 , 7 ) Pierwsz\u0105 liczb\u0105 jest \u017c\u0105dana liczba kt\u00f3r\u0105 chcemy wiedzie\u0107 ile os\u00f3b ma mniejszy wzrost ni\u017c 154 cm, drugi parametr to \u015bredni wzrost, trzeci parametr to warto\u015b\u0107 odchylenia standardowego. \u017beby obliczy\u0107 ile os\u00f3b ma wzrost powy\u017cej 154 cm oblicza si\u0119 za pomoc\u0105 odj\u0119cia od jedno\u015bci: from scipy.stats import norm 1 - norm . cdf ( 154 , 161 , 7 ) \u017beby obliczy\u0107 ile procent kobiet jest w przedziale mi\u0119dzy 154 a 157 wyznacza si\u0119 po przez odj\u0119cie od wi\u0119kszego zbioru mniejszego czyli odj\u0119cie 154cm od 157cm. norm . cdf ( 157 , 161 , 7 ) - norm . cdf ( 154 , 161 , 7 ) Aby wyznaczy\u0107 wzrost mniejszy ni\u017c u 90% kobiet. Wyznacza si\u0119 za pomoc\u0105: norm . ppf ( 0.9 , 161 , 7 ) Aby wyznaczy\u0107 wzrost wi\u0119kszy dla 90% kobiet. Wyznacza si\u0119 za pomoc\u0105: norm . ppf (( 1 - 0.9 ), 161 , 7 ) Wygenerowanie losowych 10 wzrost\u00f3w wyznacza si\u0119 za pomoc\u0105 poni\u017cszego kodu: norm . rvs ( 161 , 7 , size = 10 ) Gdzie pierwszy parametr to \u015bredni wzrost, drugi parametr o odchylenie standardowe, a trzeci to liczba generowanych warto\u015bci. Centralne twierdzenie graniczne (ang. Central limit theorem) Rozk\u0142ad pr\u00f3bkowania b\u0119dzie si\u0119 zbli\u017ca\u0142 do rozk\u0142adu normalnego w miar\u0119 wzrostu liczby pr\u00f3b. Trzeba pami\u0119ta\u0107 \u017ce ma to zastosowanie wtedy i tylko wtedy gdy pr\u00f3bki s\u0105 podejmowane losowo i s\u0105 niezale\u017cne. sales_team = pd . Series ([ \"Amir\" , \"Brian\" , \"Claire\" , \"Damian\" ]) sales_team . sample ( 10 , replace = True ) #array(['Claire', 'Damian', 'Brian', 'Damian', 'Damian', 'Amir', 'Amir', 'Amir', 'Amir', 'Damian'], dtype=object) #10% wynik\u00f3w to Claire sales_team . sample ( 10 , replace = True ) #array(['Brian', 'Amir', 'Brian', 'Claire', 'Brian', 'Damian', 'Claire', 'Brian', 'Claire', 'Claire'], dtype=object) #40% wynik\u00f3w to Claire Warto\u015b\u0107 prawdopodobienstwa wylosowania Claire wynosi 25%. Ma to prze\u0142o\u017cenie na wykres. Rozk\u0142ad Poissona Proces w kt\u00f3rym zdarzenia zachodz\u0105 z okre\u015blon\u0105 cz\u0119stotliwo\u015bci\u0105, ale ca\u0142kowicie losowo. Rozk\u0142ad Poissona opisuje prawdopodobie\u0144stwo wyst\u0105pienia pewnej liczby zdarze\u0144 w ustalonym okresie. Na przyk\u0142ad: Liczba zwierz\u0105t adoptowanych co tydzie\u0144 ze schroniska Rozk\u0142ad Poissona opisuje liczba lambda Liczba lambda opisuje \u015bredni\u0105 liczb\u0119 zdarzen w danym okresie. Warto\u015b\u0107 ta jest jednocze\u015bnie warto\u015bci\u0105 oczekiwan\u0105 (ang. value of the distribution) Rozk\u0142ad Poissona Prawdopodobie\u0144stwo, \u017ce liczba adopcji b\u0119dzie r\u00f3wna 5 przy \u015bredniej tygodniowej \u015bredniej liczbie adopcji wynosz\u0105cej 8. from scipy.stats import poisson poisson . pmf ( 5 , 8 ) #Output #0.09160366 Aby obliczyc prawdopodobienstwo \u017ce liczba adopcji b\u0119dzie wi\u0119ksza ni\u017c 5 przy \u015bredniej wynosz\u0105cej 8. Oblicza si\u0119 za pomoc\u0105 ponizszego wzoru: 1 - poisson . cdf ( 5 , 8 ) Gdy \u015brednia liczba adopcji ulegnie zwi\u0119kszeniu to prawdopodobinstwo adopcji w takiej samej wartosci co poprzednio ulegnie zwi\u0119kszeniu. Mo\u017cna tak\u017ce wylosowa\u0107 okre\u015blon\u0105 liczb\u0119 warto\u015bci uwzgl\u0119dniaj\u0105c rozk\u0142ad Poissona from scipy.stats import poisson poisson . rvs ( 8 , size = 10 ) Powy\u017cszy przyk\u0142ad przedstawia przypadek gdy wybieramy 10 przykladowych rekord\u00f3w z rozk\u0142adu Poissona gdzie \u015brednia wynosi 8. Rozk\u0142ad wyk\u0142adniczy Reprezentuje prawdopodobienstwo up\u0142ywu okre\u015blonego czasu pomi\u0119dzy zdarzeniami Poissona. Na przk\u0142ad: Prawdopodobie\u0144stwo uplywu wi\u0119cej ni\u017c jednego dnia pomiedzy adopcjami. Rozk\u0142ad wyk\u0142adniczy wykorzystuj\u0119 wartosc lambda ktora okre\u015bla szybko\u015b\u0107. W przeciwie\u0144stwie o rozk\u0142adu Poissona jest ci\u0105g\u0142y, poniewa\u017c reprezentuje czas. Oczekiwany czas miedzy \u017cadaniami wyznacza si\u0119 jako 1/(lambda). Umieszcza si\u0119 go w wyra\u017ceniu kt\u00f3ry s\u0142u\u017cy do jego liczenia. Czas oczekiwania mniejszy ni\u017c minuta wyznacza sie po przez wykorzystanie ponizszego wzoru: from scipy.stats import expon expon . cdf ( 1 , scale = 2 ) Gdzie: Pierwszy argument to warto\u015b\u0107 dla ktorej chcemy policzy\u0107 prawdopodobienstwo a druga to czas mi\u0119dzy \u017c\u0105daniami. Prawdopodobie\u0144stwo oczekiwania wynoszace wi\u0119cej niz 4 minuty wyznacza si\u0119 za pomoc\u0105: from scipy.stats import expon 1 - expon . cdf ( 4 , scale = 2 ) Prawdopodobienstwo wynosz\u0105ce mi\u0119dzy jedn\u0105 minuta a czterema minutami wyznacza si\u0119 za pomoc\u0105: from scipy.stats import expon expon . cdf ( 4 , scale = 2 ) - expon . cdf ( 1 , scale = 2 ) Rozk\u0142ad t-Studenta Rozk\u0142ad t-Studenta charakteryzuje si\u0119 obserwacjami kt\u00f3re s\u0105 oddalone od \u015bredniej. Rozk\u0142ad t ma parametr, kt\u00f3ry wp\u0142ywa na grubo\u015b\u0107 ogon\u00f3w rozk\u0142adu. Ni\u017csze stopnie swobody powoduj\u0105 grubsze ogony i wi\u0119ksze odchylenie standardowe. Wraz ze wzrostem liczby stopni swobody rozk\u0142ad bardziej przypomina rozk\u0142ad normalny. Rozk\u0142ad logaryticzno-normalny Zmienne kt\u00f3re posiadaj\u0105 rozklad logarytmiczno-normalny maj\u0105 logarytm o rozk\u0142adzie normalnym. Korelacja (Miara Pearsona) Korelacja to badanie zale\u017cno\u015bci mi\u0119dzy dwiema zmiennymi. Je warto\u015b\u0107 jest le\u017cy pomi\u0119dzy-1 do 1. Bada si\u0142\u0119 relacji. Minus lub plus oznaczaj\u0105 kierunek zale\u017cno\u015bci. Dodatnia warto\u015b\u0107 korelacji oznacza \u017ce jak warto\u015bci osi x rosn\u0105 to warto\u015bci na drugiej osi y te\u017c rosn\u0105. Ujemna warto\u015b\u0107 korelacji oznacza jak warto\u015bci na osi x rosn\u0105 to warto\u015bci na osi y malej\u0105. Wykres przyk\u0142adowej korelacji: //TO DO Wyja\u015bni\u0107 jak to zasz\u0142o co to jest lmplot import seaborn as sns sns . lmplot ( x = \"sleep_total\" , y = \"sleep_rem\" , data = msleep , ci = None ) plt . show () Wyznaczenie wsp\u00f3\u0142czynnika korelacji msleep [ 'sleep_total' ] . corr ( msleep [ 'sleep_rem' ]) #Output #0.751755 Warto\u015bci wsp\u00f3\u0142czynnika korelacji si\u0119 nie znmieniaj\u0105. msleep [ 'sleep_rem' ] . corr ( msleep [ 'sleep_total' ]) #Output #0.751755 Logarytmiczna korelacja //TO DO doda\u0107 screeny z 1:38 z filmiku Correlation caveats. Liniowa korelacja daje s\u0142aby wynik. PAMI\u0118TAJ zawsze tw\u00f3rz wykres by lepiej mo\u017cna by\u0142o zobaczy\u0107. msleep [ 'bodywt' ] . corr ( msleep [ 'awake' ]) #Output #0.31 msleep [ 'log_bodywt' ] = np . log ( msleep [ 'bodywt' ]) sns . lmplot ( x = 'log_bodywt' , y = 'awake' , data = msleep , ci = None ) plt . show () msleep [ 'log_bodywt' ] . corr ( msleep [ 'awake' ]) #Output #0.57 Inne przyk\u0142ady: - korelacja kwadratowa, - korelacja odwrotnie proporcjonalna 1/x . Korelacja nie zawiera zwi\u0105zku przyczynowo-skutkowego. Oznacza to \u017ce warto\u015b\u0107 osi x nie powoduj\u0105 zmian warto\u015bci na osi y. Seaborn Stworzony by u\u0142atwi\u0107 tworzenie najpopularniejszych wykres\u00f3w, dzia\u0142a wyj\u0105tkowo dobrze ze strukturami danych, zbudowany na bazie Matplotlib. Jednak\u017ce Matplotlib nie jest elastyczny. Alias sns skr\u00f3t wzi\u0119to od S amuel N orman S eaborn. Aktora \"The West Wing\" Je\u015bli chcemy wykorzysta\u0107 Seaborn trzeba importowa\u0107 r\u00f3wnie\u017c matplotlib gdy\u017c na nim zosta\u0142 zbudowany. import seaborn as sns import matplotlib.pyplot as plt height = [ 62 , 64 , 69 , 75 , 66 , 68 , 65 , 71 , 76 , 73 ] weight = [ 120 , 136 , 148 , 175 , 137 , 165 , 154 , 172 , 200 , 187 ] sns . scatterplot ( x = height , y = weight ) plt . show () import seaborn as sns import matplotlib.pyplot as plt gender = [ \"Female\" , \"Female\" , \"Female\" , \"Female\" , \"Male\" , \"Male\" , \"Male\" , \"Male\" , \"Male\" , \"Male\" ] sns . countplot ( x = gender ) plt . show () Nale\u017cy pami\u0119ta\u0107 aby DataFrame by\u0142 uporz\u0105dkowany. Nie uporz\u0105dkowana ramka danych nie b\u0119dzie dzia\u0142a\u0107 prawid\u0142owo. import pandas as pd import matplotlib.pyplot as plt import seaborn as sns df = pd . read_csv ( \"masculinity.csv\" ) sns . countplot ( x = \"how_masculine\" , data = df ) plt . show () Mo\u017cna rozr\u00f3nia\u0107 kolory punkt\u00f3w ze wzgl\u0119du na dan\u0105 kategori\u0119. Przed dodaniem kodu kt\u00f3ry odpowiada za kolor import matplotlib.pyplot as plt import seaborn as sns sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips ) plt . show () Po dodaniu parametru hue kt\u00f3ry odpowiada za kolor. Automatycznie dodaje legend\u0119 do naszego wykresu. import matplotlib.pyplot as plt import seaborn as sns sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" ) plt . show () Po dodaniu parametru hue_order , kt\u00f3ra pobiera list\u0119 warto\u015bci i odpowiednio ustawia kolejno\u015b\u0107 warto\u015bci na wykresie. import matplotlib.pyplot as plt import seaborn as sns sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" , hue_order = [ \"Yes\" , \"No\" ]) plt . show () Mo\u017cna do u\u017cywania kolor\u00f3w wykorzystywa\u0107 palety kolor\u00f3w. import matplotlib.pyplot as plt import seaborn as sns hue_colors = { \"Yes\" : \"black\" , \"No\" : \"red\" } sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" , palette = hue_colors ) plt . show () Mo\u017cna tak\u017ce u\u017cywa\u0107 skr\u00f3t\u00f3w a tak\u017ce kod\u00f3w HTML import matplotlib.pyplot as plt import seaborn as sns hue_colors = { \"Yes\" : \"#808080\" , \"No\" : \"#00FF00\" } sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" , palette = hue_colors ) plt . show () Mo\u017cna wykorzystywa\u0107 odcie\u0144 do rozr\u00f3\u017cnienia kolor\u00f3w. import matplotlib.pyplot as plt import seaborn as sns sns . countplot ( x = \"smoker\" , data = tips , hue = \"sex\" ) plt . show () relplot() umo\u017cliwia korzystanie z wykres\u00f3w punktowych jak i liniowego. Pozwala na tworzenie wielu wykres\u00f3w na przy u\u017cyciu jednego schematu. R\u00f3\u017cnice mi\u0119dzy satterplot() i relplot(): import seaborn as sns import matplotlib.pyplot as plt sns . scatterplot ( x = 'total_bill' , y = 'tip' , data = tips ) plt . show () import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' ) plt . show () Podsumowywuj\u0105c r\u00f3\u017cnice mi\u0119dzy to to \u017ce w relplot wybieramy sobie rodzaj jaki to ma by\u0107 wykres. Do wyboru typu wykresu s\u0142u\u017cy kind . import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'smoker' ) plt . show () Parametr col NIE oznacza koloru lecz przedstawienie wykres\u00f3w jeden obok drugiego(kolumnowo) danych kt\u00f3re znajduj\u0105 si\u0119 w kolumnie smoker . Aby przedstawi\u0107 wykresy jeden pod drugim wykorzystuje si\u0119 parametr row . Mo\u017cna tak\u017ce wykorzystywa\u0107 oba te parametry. Istnieje mo\u017cliwo\u015b\u0107 przedstawienia wykres\u00f3w z wykorzystaniem zawijania (ang. wrap) Zawijanie kolumn import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'day' , col_wrap = 2 ) plt . show () Mo\u017cna tak\u017ce zastosowa\u0107 uporz\u0105dkowanie wykres\u00f3w z wykorzystaniem parametru col_order . import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'day' , col_wrap = 2 , col_order = [ \"Thur\" , \"Fri\" , \"Sat\" , \"Sun\" ]) plt . show () Mo\u017cna tak\u017ce wy\u015bwietli\u0107 z podzia\u0142em na kolumny i wiersze import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'smoker' , row = 'time' ) plt . show () Rozmiar punktu Do lepszej wizualizacji danych lepiej jest wykorzystywa\u0107 parametr size . import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , size = 'size' ) plt . show () Mo\u017cna tak\u017ce wykorzysta\u0107 parametr hue kt\u00f3ry rozr\u00f3\u017cnia kolorami dane punkty. import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , size = 'size' , hue = 'size' ) plt . show () Innym przyk\u0142adem jest wykorzystanie prametru style kt\u00f3ry przedstawia na wykresie r\u00f3\u017cne rodzaje punkt\u00f3w. import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , hue = 'smoker' , style = 'smoker' ) plt . show () Ustawienie przezroczysto\u015bci punkt\u00f3w. To zastosowanie jest polecane gdy na wykresie jest wiele nak\u0142adaj\u0105cych si\u0119 na siebie punkt\u00f3w. import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , alpha = 0.4 ) plt . show () Liniowe Wykresy relacyjne W bibliotece seaborna wyst\u0119puj\u0105 dwa typy wykres\u00f3w relacyjnych: wykresy punktowe Wykres ten zak\u0142ada \u017ce ka\u017cdy punkt jest niezale\u017cn\u0105 obserwacj\u0105 wykresy liniowe Opiera sie na \u015bledzeniu tego samego w czasie Wykorzystanie wykresu punktowego do wizualizacji \u015bredniej godzinnej warto\u015bci wyst\u0119powania dwutlenku azotu nie jest odpowiednie. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_mean , kind = 'scatter' ) plt . show () Wynika to z faktu \u017ce chcemy zwizualizowa\u0107 zmienno\u015b\u0107 w czasie. Dlatego lepszym wyborem jest wykorzystanie wykresu liniowego. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_mean , kind = 'line' ) plt . show () Wykorzystuj\u0105c dane, kt\u00f3re uwzgl\u0119dniaj\u0105 dodatkowo miejsce lokalizacji pomiaru (wsch\u00f3d, zach\u00f3d, p\u00f3\u0142noc, po\u0142udnie) w danym mie\u015bcie. Przedstawiamy wykres kt\u00f3ry tworzy r\u00f3\u017cny kolor li\u0144 i ich kszta\u0142t\u00f3w dla danego regionu. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_loc_mean , kind = 'line' , style = 'location' , hue = 'location' ) plt . show () Dodanie parametru markers i ustawienie go na True Spowoduje wy\u015bwietlenie znacznika punktu dla ka\u017cdego punktu danych. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_loc_mean , kind = 'line' , style = 'location' , hue = 'location' , markers = True ) plt . show () Je\u015bli nie chcemy aby style lin r\u00f3\u017cni\u0142y si\u0119 od podgrupy to wtedy nale\u017cy ustawi\u0107 parametr dashes na False Do wizualizacji danych, kt\u00f3rych jest wiele na ka\u017cd\u0105 godzin\u0119 zastosowanie wykresu punktowego scatter prowadzi do stworzenia wykresu kt\u00f3ry jest nie czytelny a punkty zachodz\u0105 na siebie. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'scatter' ) plt . show () W takich wypadkach nale\u017cy zastosowa\u0107 wykres liniowy. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'line' ) plt . show () Wykres liniowy zawiera wiele obserwacji na ka\u017cd\u0105 warto\u015b\u0107 x , kt\u00f3re zostan\u0105 zagregowane w jedn\u0105 sumaryczn\u0119 miar\u0119. Domy\u015blnie wy\u015bwietlana jest \u015brednia. Biblioteka seaborn automatycznie oblicza przedzia\u0142 ufno\u015bci dla ka\u017cdej \u015bredniej. Jest nim zacieniowany obszar. Zacieniowany obszar zawiera 95% danych. Mo\u017cna rozszerzy\u0107 ten obszar wykorzystuj\u0105c parametr ci i ustawiaj\u0105c go na sd . W tedy na wykresie zostan\u0105 przedstawione wszystkie dane. Przedzia\u0142 ufno\u015bci zostanie zwi\u0119kszony. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'line' , ci = 'sd' ) plt . show () Mo\u017cna go nie umieszcza\u0107 na wykresie. Wtedy do parametru ci przypisujemy warto\u015b\u0107 None . import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'line' , ci = 'None' ) plt . show () Wykresy kategoryczne Zalicza si\u0119 do nich wykresy zliczeniowe i s\u0142upkowe. S\u0142u\u017c\u0105 do por\u00f3wnania mi\u0119dzy r\u00f3\u017cnymi grupami. Wykres zliczaj\u0105cy wy\u015bwietla liczb\u0119 obserwacji w ka\u017cdej kategorii. Wykresy zliczeniowe Do tworzenia r\u00f3\u017cych typ\u00f3w wykres\u00f3w kategorycznych wykorzystuje si\u0119 funkcj\u0119 catplot . Podobnie jak relplot() wykorzystuje parametry col= oraz row= Przyk\u0142ad zastosowania funkcji countplot() import matplotlib.pyplot as plt import seaborn as sns sns . countplot ( x = \"how_masculine\" , data = masculinity_data ) plt . show () Zamiast wykorzystywa\u0107 funkcj\u0119 countplot() wykorzystamy funkcj\u0119 catplot() . R\u00f3\u017cni\u0105 si\u0119 parametrem kind import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"how_masculine\" , data = masculinity_data , kind = \"count\" ) plt . show () Mo\u017cna tak\u017ce uporz\u0105dkowa\u0107 wykresy wed\u0142ug w\u0142asnego uznania. Robi si\u0119 to przy pomocy tablicy zawieraj\u0105cej dane rekordy oraz dodaniem do funkcji import matplotlib.pyplot as plt import seaborn as sns category_order = [ \"No answer\" , \"Not at all\" , \"Not very\" , \"Somewhat\" , \"Very\" ] sns . catplot ( x = \"how_masculine\" , data = masculinity_data , kind = \"count\" , order = category_order ) plt . show () Wykresy s\u0142upkowe Wykresy s\u0142upkowe pokazuj\u0105 \u015bredni\u0105 zmniennej ilo\u015bciowej dla ka\u017cdej chcianej kategorii. Podobnie jak w przypadku wykres\u00f3w zliczeniowych wykorzystuj\u0119 si\u0119 funkcj\u0119 catplot() . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"day\" , y = \"total_bill\" , data = tips , kind = \"bar\" ) plt . show () Seaborn automatycznie pokazuje przedzia\u0142y ufno\u015bci dla tych \u015brednich. Zawieraj\u0105 one 95% danych. Przedzia\u0142y te przekazuj\u0105 nam informacj\u0119 o poziomie niepewno\u015bci jaki jest do tych szacunk\u00f3w. Mo\u017cna nie pokazywa\u0107 tego przedzia\u0142u ufno\u015bci. Wykorzystujemy do tego parametr ci kt\u00f3re ustawiamy na None import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"day\" , y = \"total_bill\" , data = tips , kind = \"bar\" , ci = None ) plt . show () Mo\u017cna zmieni\u0107 orientacj\u0119. Ustawiamy wtedy zmienna kategoryczn\u0105 na zmienn\u0105 y . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( y = \"total_bill\" , x = \"day\" , data = tips , kind = \"bar\" , ci = None ) plt . show () W praktyce zmienn\u0105 kategoryczn\u0105 ( w tym przypadku day ) umieszczamy na osi x Wykresy pude\u0142kowe Przedstawia rozk\u0142ad danych ilo\u015bciowych. Pude\u0142ko przedstawia dane znajduj\u0105ce si\u0119 pomi\u0119dzy pierwszym a trzecim kwartylem. Linia po \u015brodku przedstawia median\u0119. S\u0142u\u017c\u0105 do por\u00f3wnywania rozk\u0142adu zmniennej ilo\u015bciowej do zmniennej kategorycznej . Tworzenie wykresu pude\u0142kowego import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" ) plt . show () Mo\u017cna tak\u017ce wykorzystywa\u0107 boxplot() . Praktyczniej lepiej jest korzysta\u0107 z funkcji catplot ze wzgl\u0119du na mo\u017cliwo\u015b\u0107 wykorzystywania parametr\u00f3w col , row . Mo\u017cna tak\u017ce zmienia\u0107 kolejno\u015b\u0107 boxplot import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" , order = [ \"Dinner\" , \"Lunch\" ]) plt . show () Wykresy pude\u0142kowe mog\u0105 zawiera\u0107 punkty odstaj\u0105ce (ang. outliers) Mo\u017cna je pomin\u0105\u0107 i wog\u00f3le ich nie bra\u0107 pod uwag\u0119. Mo\u017cna to osi\u0105gn\u0105\u0107 po przez zastosowanie parametru sym i przypisaniu do niego warto\u015bci \"\" . import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" , sym = \"\" ) plt . show () Rozst\u0119p mi\u0119dzykwartylowy (IQR) to miejsce pomi\u0119dzy pierwszym a trzecim kwartylem. Punkty odstaj\u0105ce pojawiaj\u0105 sie po przekroczeniu 1,5 warto\u015bci rozst\u0119pu mi\u0119dzykwartylowego. Istnieje mo\u017cliwo\u015b\u0107 zwi\u0119kszenia \"w\u0105s\u00f3w\" przy wykorzystaniu parametru whis . Mo\u017cna modyfikowa\u0107 d\u0142ugo\u015b\u0107 w\u0105s\u00f3w po przez rozszerzenie przedzia\u0142u otrzymujemy to po przez 2.0 * IQR (whis=2.0) . Mo\u017cna to tak\u017ce zrobi\u0107 modyfikuj\u0105c przedzia\u0142 whis=[5, 96] . import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" , whis = [ 0 , 100 ]) plt . show () Point plots Przedstawiaj\u0105 \u015bredni\u0105 oraz przedzia\u0142 ufno\u015bci wynosz\u0105cy 95%. Jest podobny do wykresu liniowego lecz r\u00f3\u017cni si\u0119 tym \u017ce punktowy wykres jest zale\u017cny od zmniennej x , kt\u00f3ra jest zmienn\u0105 kategoryczn\u0105 . Wykres liniowy jest zale\u017cny o warto\u015bci x kt\u00f3re s\u0105 zmiennymi ilo\u015bciowymi . Wykres punktowy pozwala na czytelniejsze por\u00f3wnanie wysoko\u015bci podgrup na jednym wykresie w por\u00f3wnaniu do boxplot . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"age\" , y = \"masculinity_important\" , data = masculinity_data , hue = \"feel_masculine\" , kind = \"point\" ) plt . show () Mo\u017cna storzy\u0107 wykres, gdzie punkty oznaczaj\u0105ce \u015brednie nie maj\u0105 po\u0142\u0105cze\u0144 mi\u0119dzy kolejnumi punktami. import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"age\" , y = \"masculinity_important\" , data = masculinity_data , hue = \"feel_masculine\" , kind = \"point\" , join = False ) plt . show () Istnieje mo\u017cliwo\u015b\u0107 aby punkt na wykresie by\u0142 median\u0105. Wykorzystuje sie do tego parametr estimator z biblioteki numpy . import matplotlib.pyplot as plt import seaborn as sns from numpy import median sns . catplot ( x = \"age\" , y = \"masculinity_important\" , data = masculinity_data , kind = \"point\" , estimator = median ) plt . show () Lepiej jest stosowa\u0107 median\u0119 ze wzgl\u0119du na to \u017ce jest bardziej odporna na punkty odstaj\u0105ce . Mo\u017cna doda\u0107 poziome linie na zako\u0144czeniu przedzia\u0142u ufno\u015bci. Wykorzystuj\u0119 si\u0119 do tego parametr capsize . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"smoker\" , y = \"total_bill\" , data = tips , kind = \"point\" , capsize = 0.2 ) plt . show () Isnieje mo\u017cliwo\u015b\u0107 wy\u0142\u0105czenia przedzia\u0142u ufno\u015bci. import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"smoker\" , y = \"total_bill\" , data = tips , kind = \"point\" , ci = None ) plt . show () Modyfikacja wygl\u0105du wykresu W seaborn wyst\u0119puj\u0105 pi\u0119\u0107 r\u00f3\u017cnych rodzai styl\u00f3w t\u0142a background kt\u00f3rych chcemy wy\u015bwietli\u0107: white, dark, whitegrid,darkgrid, ticks . Domy\u015blnym kolorem t\u0142a jest bia\u0142y. whitegrid umo\u017cliwia dodanie szarych poziomych linii na wykresie. ticks dodaje ma\u0142e kreski na osiach, dark dodaje szare tlo wykresu darkgrid dodaje szare t\u0142o na wykresie oraz dodaje poziome linie na wykresie, Wykorzystuje si\u0119 do tego metod\u0119 sns.set_style() Mo\u017cliwe jest wykorzystanie sns.set_palette() kt\u00f3ry zmienia kolory, //TO DO Doda\u0107 screena z 2:49 (screen z kolorami) z filmiku Changing plot style and color Wyst\u0119puj\u0105 tak\u017ce palety sekwencyjne , kt\u00f3re s\u0105 domy\u015blne. Istnieje mo\u017cliwo\u015b\u0107 tworzenia w\u0142asnych palet kolor\u00f3w. Robi si\u0119 to po przez stworzenie tablicy z nazwami kolor\u00f3w lub podanie szesnastkowych kod\u00f3w kolor\u00f3w. Aby u\u017cy\u0107 je w wykresie nalezy u\u017cyc nazej tablicy jako parametru naszej metody. Zmiana skali wykresu: Wykonuje si\u0119 to po przez u\u017cycie metody sns.set_context() Istnieje mo\u017cliwo\u015b\u0107 zmiany skali \"paper\", \"notebook\", \"talk\", \"poster\" Dodanie tytu\u0142u i nazw zmiennych Istnieje zmiany wizualizacji nazw na osiach. Biblioteka Seaborna dostarcza dwa r\u00f3\u017cne typy obiekt\u00f3w FacetGrids , AxesSubplots Aby sprawdzi\u0107 z jakim typem obiektu mamy doczynienia nale\u017cy u\u017cy\u0107 funkcji type() FacetGrids sk\u0142ada si\u0119 z jednego lub wi\u0119kszej liczby AxesSubplots kt\u00f3ry obs\u0142uguje w\u0105tki podrz\u0119dne, czyli mo\u017cliwe jest stworzenie wiele rodzai wykres\u00f3w. FacetGrid - relplot(), catplot() AxesSubplot - scatterplot(), countplot() Aby doda\u0107 tytu\u0142 do wykresu nale\u017cy u\u017cy\u0107 metody g.fig.suptitle(\"New Title\") Mo\u017cna zmieni\u0107 rozmiar wielko\u015bci tytu\u0142\u00f3w. Aby doda\u0107 tytu\u0142 do wykresu nale\u017cy u\u017cy\u0107 metody fig.suptitle(\"New Title\", y=1.03) Ustawienie tytu\u0142u dla ca\u0142ego wykresu w FacetGrid dodaje si\u0119 przy u\u017cyciu metody g.fig.suptitle(\"New Title\", y=1.03) Ustawienie tytu\u0142u dla ca\u0142ego wykresu w AxesSubplot g.set_title(\"New Title\", y=1.03\") g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box) g . fig . suptitle ( \"New Title\" , y = 1.03 ) g = sns . boxplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data ) g . set_title ( \"New Title\" , y = 1.03 ) Dodanie dw\u00f3ch wykres\u00f3w ko\u0142o siebie z podzia\u0142em na grupy. Do podzia\u0142u s\u0142uzy parametr col . g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" , col = \"Group\" ) Aby doda\u0107 podtytu\u0142 dla ka\u017cdego mniejszego wykresu wykorzystuje si\u0119 metod\u0119 set_titles(\"This is {col_name}\") Ponadto je\u015bli ma byc to nazwa warto\u015b\u015bci z kolumny to trzeba wykorzysta\u0107 col_name g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" , col = \"Group\" ) g . fig . suptitle ( \"New Title\" , y = 1.03 ) g . set_titles ( \"This is {col_name} \" ) Do ustawienia nazw osi wykorzystuj\u0119 si\u0119 metod\u0119 set() g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" ) g . set ( xlabel = \"New X label\" , ylabel = \"New Y label\" ) plt . show () Aby obr\u00f3ci\u0107 nazwy zmiennych kategorycznych wykorzystujemy metod\u0119 xticks z parametrem rotation . g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" ) plt . xticks ( rotation = 90 ) plt . show () Introdution to function in Python Definiowanie funkcji bez przyjmowania \u017cadnej warto\u015bci oraz bez zwracania \u017cadnej warto\u015bci. def square (): new_value = 4 ** 2 print ( new_value ) square () Definiowanie funkcji z przyjmowaniem warto\u015bci ale bez zwracania warto\u015bci. def square ( value ): new_value = value ** 2 print ( new_value ) square ( 4 ) Definiowanie funkcji z przyjmowaniem warto\u015bci oraz zwracaj\u0105ca warto\u015b\u0107. def square ( value ): new_value = value ** 2 return new_value num = square ( 4 ) print ( num ) Opisywanie funkcji przed cia\u0142em funkcji nale\u017cy napisa\u0107 w komentarzu co ta funkcja robi. def square ( value ): \"\"\"Returns the square of a value.\"\"\" new_value = value ** 2 return new_value Funkcje przyjmuj\u0105ce wiele warto\u015bci: def raise_to_power ( value1 , value2 ): \"\"\"Raise value1 to power of value2.\"\"\" new_value = value1 ** value2 return new_value result = raise_to_power ( 2 , 3 ) print ( result ) Zwracanie wielu zmiennych z funkcji odbywa si\u0119 przy u\u017cyciu krotki. even_nums = ( 2 , 4 , 6 ) a , b , c = even_nums Mo\u017cna uzyska\u0107 dost\u0119p do krotki tak jak do listy. even_nums = ( 2 , 4 , 6 ) print ( even_nums [ 1 ]) second_num = even_nums [ 1 ] print ( second_num ) def raise_both ( value1 , value2 ): \"\"\"Raise value1 to the power of value2 and vice versa.\"\"\" new_value1 = value1 ** value2 new_value2 = value2 ** value1 new_tuple = ( new_value1 , new_value2 ) return new_tuple result = raise_both ( 2 , 3 ) print ( result ) Globalne i lokalne Wyst\u0119puj\u0105 trzy rodzaje zmiennych: Globalne zmienne s\u0105 zdefiniowane w g\u0142\u00f3wnym ciele skryptu, Lokalne zmienne s\u0105 zdefiniowane wewn\u0105trz funkcji, wbudowane zmienne jak print, type. Do wszystkich zmiennych mo\u017cna przypisywa\u0107 nowe warto\u015bci. def func1 (): num = 3 print ( num ) def func2 (): global num double_num = num * 2 num = 6 print ( double_num ) W powy\u017cszych funkcjach u\u017cywamy zmiennej lokalnej z jednej funkcji, kt\u00f3ra jest u\u017cywana jako r\u00f3wnie\u017c lokalna w drugiej funkcji jako zmiennea lokalna. Python w poszukiwaniu warto\u015bci zmiennej przeszukuj\u0119 najpierw funkcj\u0119 wewnetrzn\u0105, nast\u0119pnie funkcja otaczaj\u0105c\u0105(jesli taka jest) a na ko\u0144cu przeszukuje zmienne globalne. Zagnie\u017cdzanie funkcji jednej w drug\u0105. Je\u015bli w jednej funkcji mamy duzo rzeczy, kt\u00f3re si\u0119 zagnie\u017cdzaj\u0105 to warto wtedy wykorzysta\u0107 funkcj\u0119 zagnie\u017cdzon\u0105. def mod2plus5 ( x1 , x2 , x3 ): \"\"\"Return the remainder plus 5 of tree values\"\"\" new_x1 = x1 % 2 + 5 new_x2 = x2 % 2 + 5 new_x3 = x3 % 2 + 5 return ( new_x1 , new_x2 , new_x3 ) Powy\u017csz\u0105 funkcj\u0119 mo\u017cemy zast\u0105pi\u0107 poni\u017csz\u0105 funkcj\u0105: def mod2plus5 ( x1 , x2 , x3 ): \"\"\"Returns the remainder plus 5 of three values.\"\"\" def inner ( x ): \"\"\"Returns the remainder plus 5 of value.\"\"\" return x % 2 + 5 return ( inner ( x1 ), inner ( x2 ), inner ( x3 )) print ( mod2plus5 ( 1 , 2 , 3 )) def raise_val ( n ): \"\"\"Return the inner function.\"\"\" def inner ( x ): \"\"\"Raise x to the power of n.\"\"\" raised = x ** n return raised return inner square = raise_val ( 2 ) cube = raise_val ( 3 ) print ( square ( 2 ), cube ( 4 )) #Output #4 64 Je\u015bli chcemy zmieni\u0107 warto\u015b\u0107 zmiennej w nie tylko w jednej funkcji wewn\u0119trznej ale tak\u017ce w ca\u0142ym zakresie zar\u00f3wno w danej funkcji jak i jej otoczeniu poprzedzamy nazw\u0119 zmiennej nonlocal . def outer (): \"\"\"Prints the value of n.\"\"\" n = 1 def inner (): nonlocal n n = 2 print ( n ) inner () print ( n ) outer () Warto\u015b\u0107 zmiennej wyszukuj\u0119 si\u0119 najpierw we funkcji lokalnej, nast\u0119pnie w funkcji otaczaj\u0105cej, po\u017cniej w zmiennych globalnych a na ko\u0144cu w zmiennych wbudowanych. Jest to metoda LEGB od pierwszych liter: L ocal scope, E nclosing functions G lobal B uilt-in Ustawienie domy\u015blnego parametru w funkcji Definiuj\u0105c argumenty funkcji mo\u017cna odg\u00f3rnie przypisa\u0107 jak\u0105 warto\u015b\u0107 ma mie\u0107 domy\u015blnie argument. Mo\u017cna go zmieni\u0107 w wywo\u0142aniu funkcji. def power ( number , pow = 1 ): \"\"\"Raise number to the power of pow.\"\"\" new_value = number ** pow return new_value power ( 9 , 2 ) #81 power ( 9 , 1 ) #9 power ( 9 ) #9 Mo\u017cna tak\u017ce u\u017cywa\u0107 listy agrument\u00f3w (*args) jako argument funkcji. def add_all ( * args ): \"\"\"Sum all values in *args together.\"\"\" # Initialize sum sum_all = 0 # Accumulate the sum for num in args : sum_all += num return sum_all add_all ( 1 ) #1 add_all ( 1 , 2 ) #3 add_all ( 5 , 10 , 15 , 20 ) #50 Mo\u017cna tak\u017ce wykorzystywa\u0107 s\u0142owniki jako argumenty funkcji u\u017cywaj\u0105c do tego argument *kwargs * S\u0142owniki to struktura danych kt\u00f3ra przechowuje warto\u015bci jako klucz-warto\u015b\u0107** def print_all ( ** kwargs ): \"\"\"Print out key-value pairs in **kwargs.\"\"\" #Print out the key-value pairs for key , value in kwargs . items (): print ( key + \": \" + value ) print_all ( name = \"dumbledore\" , job = \"headmaster\" ) #Output #job: headmaster #name: dumbledore Funkcje Lambda Jest to szybszy spos\u00f3b pisania funkcji. U\u017cywa si\u0119 do tego s\u0142owa kluczowego lambda. Jest to szybki spos\u00f3b pisania funkcji. Konsktrukcja Zapisujemy nasz\u0105 funkcj\u0119 i przypisujemy do niej po s\u0142owie kluczowym lambda dwie nazwy argument\u00f3w, po nich stawiamy dwukropek ( : ). Po nich stwiamy wyra\u017cenie okre\u015blaj\u0105ce co funkcja ma zwr\u00f3ci\u0107. raise_to_power = lambda x , y : x ** y raise_to_power ( 2 , 3 ) #Output #8 Nazywamy to wtedy funkcjami anonimowymi Sprawdzmy funkcj\u0119 map, kt\u00f3ra przyjmuje dwa : funkcj\u0119 oraz sekwencj\u0119 taka jak lista. // TO DO jak to dzia\u0142a nums = [ 48 , 6 , 9 , 21 , 1 ] square_all = map ( lambda num : num ** 2 , nums ) print ( square_all ) #Output #<map object at 0x103e065c0> Jest to w rzeczwisto\u015bci obiekt mapy. print ( list ( square_all )) #Output #[2304, 36, 81, 441, 1] //TO Do //Dodac opisy z dw\u00f3ch ostatnich lekcji z kursu Introduction to Functions in Python z rozdzia\u0142u: Lambda functions and error-handling z lekcji Filter(), Reduce(). Funkacja mo\u017ce zwraca\u0107 b\u0142\u0105d. Aby wy\u0142apyra\u0107 wyj\u0105tek nale\u017cy u\u017cy\u0107 kombinacji try & except . def sqrt ( x ): \"\"\"Return the square root of a number.\"\"\" try : return x ** 0.5 except : print ( \"x must be an int or float\" ) Mo\u017cna tak\u017ce zrobi\u0107 tak \u017ceby wy\u0142apywa\u0142a tylko jeden rodzaj b\u0142\u0119du. def sqrt ( x ): \"\"\"Return the square root of a number.\"\"\" try : return x ** 0.5 except TypeError : print ( \"x must be an int or float\" ) Je\u015bli nie chcemy aby funkcja dzia\u0142a\u0142a dla liczb ujemnych nalezy u\u017cy\u0107 if i dodatkowo u\u017cy\u0107 s\u0142owa kluczowego raise co spowoduje przypisanie do wyj\u0105tku def sqrt ( x ): \"\"\"Return the square root of a number.\"\"\" if x < 0 : raise ValueError ( 'x must be non-negative' ) try : return x ** 0.5 except TypeError : print ( \"x must be an int or float\" ) Introduction to iterators Playing with iterators enumerate() - funkcja kt\u00f3ra przyjmuje dowolny argument iterowalny i zwraca obiekt wyliczeniowy, kt\u00f3ry sk\u0142ada si\u0119 z indeksu oraz elementu. avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] e = enumerate ( avengers ) print ( type ( e )) #Output #<class 'enumerate'> Gdy chcemy zwr\u00f3ci\u0107 liste element\u00f3w w postaci listy krotek [(index_elementu, element), (index_drugiego_elementu, drugi_element)] to zwr\u00f3cimy list\u0119 krotek. e_list = list ( e ) print ( e_list ) #Output #[(0, 'hawkeye'), (1, 'iron man'), (2, 'thor'), (3, 'quicksilver')] Domy\u015blnym indeksem iteracji jest 0, ale mo\u017cna to zmieni\u0107 poprzez przypisanie do parametru start odpowiedniej warto\u015bci, avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] for index , value in enumerate ( avengers ): print ( index , value ) #Output # 0 hawkeye # 1 iron man # 2 thor # 3 quicksilver for index , value in enumerate ( avengers , start = 10 ): print ( index , value ) #Output # 10 hawkeye # 11 iron man # 12 thor # 13 quicksilver Funkcja zip(), kt\u00f3ry dwie listy umieszcza je w li\u015bcie krotek i zwraca list\u0119 krotek gdzie ka\u017cda krotka sk\u0142ada si\u0119 z po jednym elemencie z pierwszej i drugiej listy. avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] names = [ 'barton' , 'stark' , 'odinson' , 'maximoff' ] z = zip ( avengers , names ) print ( type ( z )) #Outout #<class 'zip'> z_list = list ( z ) print ( z_list ) #Output #[('hawkeye', 'barton'), ('iron man', 'stark'), ('thor', 'odinson'), ('quicksilver', 'maximoff')] Zamiast tworzy\u0107 liste mo\u017cemy stworzy\u0107 p\u0119tle avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] names = [ 'barton' , 'stark' , 'odinson' , 'maximoff' ] for z1 , z2 in zip ( avengers , names ): print ( z1 , z2 ) #Output # hawkeye barton # iron man stark # thor odinson # quicksilver maximoff Mo\u017cna tak\u017ce u\u017cy\u0107 operatora splat do wydrukowania wszystkich element\u00f3w names = [ 'barton' , 'stark' , 'odinson' , 'maximoff' ] z = zip ( avengers , names ): print ( * z ) Using iterators to load large files into memory Je\u015bli danych jest bardzo du\u017co mo\u017cna je \u0142adowa\u0107 fragmentami przy wykorzystaniu funkcji read_csv przy u\u017cyciu parametru chunksize, kt\u00f3rego warto\u015b\u0107 ustawiamy na tyle fragment\u00f3w ile chcemy za\u0142adowa\u0107. Je\u015bli mamy plik CSV z kolumn\u0105 \"x\" zawieraj\u0105c\u0105 liczb\u0119 i chcemy obliczy\u0107 sum\u0119 wszystkich liczb w tej kolumnie, Ale plik jest za du\u017cy by przechowa\u0107 go w pami\u0119ci. Wykorzystanie chunksize spowoduje \u017ce ka\u017cdy gragment b\u0119dzie ramka danych (Data Frame). Do listy result zapisywane s\u0105 polejne rekordy. import pandas as pd result = [] for chunk in pd . read_csv ( 'data.csv' , chunksize = 1000 ): result . append ( sum ( chunk [ 'x' ])) total = sum ( result ) print ( total ) #Output # 4252532 Nie musimy tworzy\u0107 osobnej listy wystarczy \u017ce na pocz\u0105tku zainicjalizujemy jak\u0105\u015b zmienn\u0105 na 0. import pandas as pd total = 0 for chunk in pd . read_csv ( 'data_csv' , chunksize = 1000 ): total += sum ( chunk [ 'x' ]) print ( total ) #Output # 4252532 List comprehensions and generators W tym rozdziale zajmiemy si\u0119 zast\u0105pieniem zape\u0142nieniem listy przy u\u017cyciu p\u0119tli for, gdy\u017c s\u0105 nieefektywne obliczeniowo. Mo\u017cna to zrobi\u0107 w jednym wierszu kodu. nums = [ 12 , 8 , 21 , 3 , 16 ] new_nums = [] for num in nums : new_nums . append ( num + 1 ) print ( new_nums ) #Output #[13, 9, 22, 4, 17] Zamiast tego mo\u017cna sko\u017cysta\u0107 z wyra\u017ce\u0144 listowych. Sk\u0142adnia: w nawiasach kwadratowych wpisujemy wartosci kt\u00f3re chcesz utworzy\u0107 inaczej zwane wyra\u017ceniami wyj\u015bciowymi, po kt\u00f3rym nast\u0119puje wykonanie p\u0119tli for, kt\u00f3ra si\u0119 po\u017cniej do niej odwo\u0142uje. nums = [ 12 , 8 , 21 , 3 , 16 ] new_nums = [ num + 1 for num in nums ] print ( new_nums ) #Output #[13, 9, 22, 4, 17] Mo\u017cna stworzy\u0107 wyra\u017cenie listowe przy u\u017cyciu obiektu zakresu. result = [ num for num in range ( 11 )] print ( result ) #Output #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Mo\u017cna wykorzystywa\u0107 wyra\u017ce\u0144 listowych do zast\u0119powania dw\u00f3ch p\u0119tli. pairs_1 = [] for num1 in range ( 0 , 2 ): for num2 in range ( 6 , 8 ): pairs_1 . append (( num1 , num2 )) print ( pairs_1 ) #Output #[(0, 6), (0, 7), (1, 6), (1, 7)] Powy\u017cszy kod mo\u017cna zast\u0105pi\u0107 wyra\u017ceniem listowym pairs_2 = [( num1 , num2 ) for num1 in range ( 0 , 2 ) for num2 in range ( 6 , 8 )] print ( pairs_2 ) #Output #[(0, 6), (0, 7), (1, 6), (1, 7)] Istnieje mo\u017cliwo\u015b\u0107 dodania wyra\u017cenia warunkowego - if . [ num ** 2 for num in range ( 10 ) if num % 2 == 0 ] #Output # [0, 4, 16, 36, 64] List\u0119 mo\u017cna uzale\u017cni\u0107 od wyra\u017cenia wyj\u015bciowego. [ num ** 2 if num % 2 == 0 else 0 for num in range ( 10 )] #Output # [0, 0, 4, 0, 16, 0, 36, 0, 64, 0] Mo\u017cemy tak\u017ce pisa\u0107 wyra\u017cenia listowe tworz\u0105ce s\u0142owniki z element\u00f3w iteracyjnych. R\u00f3\u017cnic\u0105 jest to \u017ce u\u017cywamy nawias\u00f3w klamrowych zamist kwadratowych. pos_neg = { num : - num for num in range ( 9 )} print ( pos_neg ) #Output #{0: 0, 1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8} print ( type ( pos_neg )) #Output #<class 'dict'> Generatory jest obiektem kt\u00f3ry nie tworzy listy ale mo\u017cna po nim iterowa\u0107 result = ( num for num in range ( 6 )) for num in result : print ( num ) #Output # 0 # 1 # 2 # 3 # 4 # 5 Mo\u017cna przekaza\u0107 generator do listy aby utworzyc list\u0119. result = ( num for num in range ( 6 )) print ( list ( result )) Mo\u017cna iterowa\u0107 generator jeden po drugim result = ( num for num in range ( 6 )) print ( next ( result )) # 0 print ( next ( result )) # 1 W tym wypadku warto\u015b\u0107 jest wyci\u0105gana tylko wtedy gdy jest potrzebna. Nazywa si\u0119 ocen\u0105 leniw\u0105, kt\u00f3rej warto\u015b\u0107 wyra\u017cenia jest op\u00f3\u017cniona. Mo\u017ce to bardzo pom\u00f3c podczas pracy z bardzo duzymi sekwencjami danych poniewa\u017c umo\u017cliwia generowanie elementy sekwencji w locie. Na generatorach mo\u017cna wykonywa\u0107 te same operacje co na listach. Funkcje generatora, kt\u00f3re po wywo\u0142aniu tworz\u0105 obiekty generatora. S\u0105 pisane ze sk\u0142adni\u0105 dowolnie innej funkcji zdefiniowanj przez u\u017cytkownika lecz zamiast zwracania warto\u015bci za pomoc\u0105 slowa kluczowego return zwracaj\u0105 sekwencje warto\u015bci przy u\u017cyciu s\u0142owa kluczowego yield. def num_sequence ( n ): \"\"\"Generate values from 0 to n.\"\"\" i = 0 while i < n : yield i i += 1 Exploratory Data Analysis in Python Getting to Know a Dataset Aby wczyta\u0107 plik u\u017cywamy metody read_csv dost\u0119pnej w bibliotece Pandas. Wczytanie pierwszych rekord\u00f3w (domy\u015blnie 5) odbywa si\u0119 przez wykorzystanie metody head() books = pd . read_csv ( \"book.csv\" ) books . head () name author rating year genre 10-Day Green Smoothie Cleanse JJ Smith 4.73 2016 Non Fiction 11/22/63: A Novel Stephen King 4.62 2011 Fiction 12 Rules for Life Jordan B. Peterson 4.69 2018 Non Fiction 1984 (Signet Classics) George Orwell 4.73 2017 Fiction 5,000 Awesome Facts National Geographic Kids 4.81 2019 Childrens \u017beby wy\u015bwietli\u0107 informacj\u0119 o danych wykorzystujemy metod\u0119 info() . Jakiego s\u0105 typu, ile ich jest, czy s\u0105 warto\u015bci null, jakie s\u0105 nazwy kolumn i ile jest rekord\u00f3w w ka\u017cdej kolumnie books . info () #<class 'pandas.core.frame.DataFrame'> #RangeIndex: 350 entries, 0 to 349 #Data columns (total 5 columns): # # Column Non-Null Count Dtype # -- ------ -------------- ----- # 0 name 350 non-null object # 1 author 350 non-null object # 2 rating 350 non-null float64 # 3 year 350 non-null int64 # 4 genre 350 non-null object # dtypes: float64(1), int64(1), object(3) # memory usage: 13.8+ KB Aby zliczy\u0107 ile jest rekord\u00f3w w danej kolumnie u\u017cywamy metody value_counts . books . value_counts ( \"genre\" ) #genre #Non Fiction 179 #Fiction 131 #Childrens 40 #dtype: int64 Aby wy\u015bwietli\u0107 informacje dotycz\u0105ce opisu danych liczbowych wykorzystujemy metod\u0119 describe() . books . describe () # rating year #count 350.000000 350.000000 #mean 4.608571 2013.508571 #std 0.226941 3.284711 #min 3.300000 2009.000000 #25% 4.500000 2010.000000 #50% 4.600000 2013.000000 #75% 4.800000 2016.000000 #max 4.900000 2019.000000 Do wizualizacji danych mo\u017cna wykorzyta\u0107 histogram. import seaborn as sns import matplotlib.pyplot as plt sns . histplot ( data = books , x = 'rating' ) plt . show () Aby wy\u015bwietli\u0107 dane w nieco uporz\u0105dkowany spos\u00f3b mo\u017ce pos\u0142u\u017cy\u0107 parametr binwidth . Porz\u0105dkuje on dane tak by wy\u015bwietla\u0142y si\u0119 co zadany przedzia\u0142. sns . histplot ( data = books , x = 'rating' , binwidth = .1 ) Aby sprawdzi\u0107 jakiego typu s\u0105 dane w kolumnach u\u017cywamy metody info() lub dtypes . Aby zmieni\u0107 warto\u015bci w kolumnie wykorzystujemy metod\u0119 astype() Dost\u0119pne s\u0105 nast\u0119puj\u0105ce modywfikacje: - String str - Integer int - Float float - Dictionary dict - List list - Boolean bool books [ \"year\" ] = books [ \"year\" ] . astype ( int ) books . dtypes Aby sprawdzi\u0107 czy znajduj\u0105 si\u0119 wybrane dane kategoryczne wykorzystujemy metod\u0119 isin() . Zwraca ona warto\u015b\u0107 logiczn\u0105. Je\u015bli dana kategoryczna znajduj\u0119 si\u0119 w danej kolumnie to zwraca True je\u015bli jej nie ma to zwraca False . books [ \"genre\" ] . isin ([ \"Fiction\" , \"Non Fiction\" ]) Mo\u017cna wy\u015bwietli\u0107 negacj\u0119 poprzez poprzedzenie powy\u017cszego wyra\u017cenia tyld\u0105 ~ . books [ \"genre\" ] . isin ([ \"Fiction\" , \"Non Fiction\" ]) Wy\u015bwietlenie tylko tych rekord\u00f3w kt\u00f3re spe\u0142niaj\u0105 za\u0142o\u017cenie. books [ books [ \"genre\" ] . isin ([ \"Fiction\" , \"Non Fiction\" ])] . head () Wy\u015bwietlenie tylko tych rekord\u00f3w kt\u00f3ey maj\u0105 ten sam typ co dana kolumna. books . select_dtypes ( \"number\" ) . head () Wy\u015bwietlenie warto\u015bci minimalnej przy u\u017cyciu metody min() books [ \"year\" ] . min () # Output # 2009 Wy\u015bwietlenie warto\u015bci maksymalnej przy u\u017cyciu metody max() books [ \"year\" ] . max () # Output # 2019 Dane mo\u017cna grupowa\u0107 po zmiennych kategorycznych wyst\u0119puj\u0105cych w danej kolumnie przy u\u017cyciu metody groupby() . books . groupby ( \"genre\" ) . mean () Agregacja danych Wykorzystuje si\u0119 do tego metod\u0119 agg() w kt\u00f3rej umieszczamy funkcje greguj\u0105ce takie jak: sum sum() count count() minimum min() maximum max() variance var() Standard deviation std() books . agg ([ \"mean\" , \"std\" ]) Mo\u017cna agregowa\u0107 wybrane kolumny przy u\u017cyciu jednych funkcji agreguj\u0105cych oraz inne kolumny przy wykorzystaniu innych funkcji agreguj\u0105cych. books . agg ({ \"rating\" : [ \"mean\" , \"std\" ], \"year\" : [ \"median\" ]}) Mo\u017cna jednocze\u015bnie grupowa\u0107 oraz agregowa\u0107 dane. books . groupby ( \"genre\" ) . agg ( mean_rating = ( \"rating\" , \"mean\" ), std_rating = ( \"rating\" , \"std\" ), median_year = ( \"year\" , \"median\" ) ) Mo\u017cna przedstawi\u0107 wizualizacje danych kategorycznych przy wykorzystaniu wykresu kolumnowego: sns . barplot ( data = books , x = 'genre' , y = \"rating\" ) plt . show () Addressing missing data Aby zsumowa\u0107 ilo\u015b\u0107 brakuj\u0105cych danych u\u017cywamy metod\u0119 sum() print ( salaries . isna () . sum ()) Aby usun\u0105\u0107 brakuj\u0105ce wiersze wykorzystuje si\u0119 metod\u0119 dropna W poni\u017cszym usuwamy dane w kolumnach w kt\u00f3rych liczba brakuj\u0105cych danych nie przekracza 5%. threshold = len ( salaries ) * 0.05 print ( threshold ) cols_to_drop = salaries . columns [ salaries . isna () . sum () <= threshold ] print ( col_to_drop ) salaries . dropna ( subset = cols_to_drop , inplace = True ) Parametr subset okre\u015ble z jakich kolumn maj\u0105 by\u0107 usuwane wiersze/ Parametr inplace=True powoduje \u017ce zmiany zostan\u0105 dokonane bezpo\u015brednio na obiekcie salaries , bez konieczno\u015bci przypisywania wyniku do nowej zmiennej. cols_with_missing_values = salaries . columns [ salaries . isna () . sum () > 0 ] print ( cols_with_missing_values ) for col in cols_with_missing_values [: - 1 ]: salaries [ col ] . fillna ( salaries [ col ] . mode ()[ 0 ]) Powy\u017csza p\u0119tla iteruje przez ka\u017cd\u0105 kolumn\u0119 z wy\u0142\u0105czeniem ostatniej kolumny. salaries[col].fillna(salaries[col].mode()[0]) . metoda fillna uzupe\u0142nia brakuj\u0105ce warto\u015bci w kolumnie col warto\u015bci\u0105 mody mode()[0] . Indeks [0] oznacza \u017ce to jest pierwsza najcz\u0119\u015bciej wyst\u0119puj\u0105ca warto\u015b\u0107. (najcz\u0119\u015bciej wyst\u0119puj\u0105ca warto\u015b\u0107 dla danej kolumny) Poni\u017cszy kod grupuje wed\u0142ug warto\u015bci w kolumnie Experience a nast\u0119pni\u0119 kolumna Salary_USD brana jest do dalszych analiz i wyliczane jest mediana, a na ko\u0144cu zapisujemy to do s\u0142ownika. salaries_dict = salaries . groupby ( \"Experience\" )[ \"Salary_USD\" ] . median () . to_dict () print ( salaries_dict ) Mo\u017cna tak\u017ce brakuj\u0105ce dane uzupe\u0142nia\u0107 po przez mapowanie przy wykorzystaniu s\u0142ownika. salaries [ \"Salary_USD\" ] = salaries [ \"Salary_USD\" ] . fillna ( salaries [ \"Experience\" ] . map ( salaries_dict )) Metoda nunique() Zlicza ile jest unikalnych stanowisk. print ( salaries [ \"Designation\" ] . nunique ()) Metoda str.contains przeszukuje kolumn\u0119 pod k\u0105tem okre\u015blonego ci\u0105gu. salaries [ \"Designation\" ] . str . contains ( \"Scientist\" ) Aby wyszuka\u0107 dane z wybranej kolumny kt\u00f3re zaczynaj\u0105 si\u0119 od frazy wykorzystujemy znak ^ . salaries [ \"Designation\" ] . str . contains ( \"^Data\" ) job_categories = [ \"Data Science\" , \"Data Analytics\" , \"Data Engineering\" , \"Machine Learning\" , \"Managerial\" , \"Consultant\" ] data_science = \"Data Scientist|NLP\" data_analyst = \"Analyst|Analytics\" data_engineer = \"Data Engineer|ETL|Architect|Infrastructure\" ml_engineer = \"Machine Learning|ML|Big Data|AI\" manager = \"Manager|Head|Director|Lead|Principal|Staff\" consultant = \"Consultant|Freelance\" conditions = [ ( salaries [ \"Designation\" ] . str . contains ( data_science )), ( salaries [ \"Designation\" ] . str . contains ( data_analyst )), ( salaries [ \"Designation\" ] . str . contains ( data_engineer )), ( salaries [ \"Designation\" ] . str . contains ( ml_engineer )), ( salaries [ \"Designation\" ] . str . contains ( manager )), ( salaries [ \"Designation\" ] . str . contains ( consultant )) ] salaries [ \"Job_Category\" ] = np . select ( conditions , job_categories , default = \"Other\" ) print ( salaries [[ \"Designation\" , \"Job_Category\" ]] . head ()) # Designation Job_Category # 0 Data Scientist Data Science # 1 Machine Learning Scientist Machine Learning # 2 Big Data Engineer Data Engineering # 3 Product Data Analyst Data Analytics # 4 Machine Learning Engineer Machine Learning sns . countplot ( data = salaries , x = \"Job_Category\" ) plt . show () Dane kt\u00f3re s\u0105 obiektami mo\u017cna przekonwertowa\u0107 na dowolny typ. Najpierw trzeba usun\u0105\u0107 przecinki jako seperatory tysi\u0119cy, nast\u0119pnie float kt\u00f3ry zmieni typ danych. Stworzenie nowej kolumny do konwersji danych. Aby zast\u0105pi\u0107 jaki\u015b znak jakim\u015b innym wykorzystujemy metod\u0119 str.replace() pd . Series . str . replace ( \"znak do usuni\u0119cia\" , \"znak kt\u00f3ry s\u0142u\u017cy do zast\u0105pienia\" ) Na przyk\u0142ad: Zast\u0119pujemy przecinek i niczym go niezast\u0119pujemy. salaries [ \"Salary_In_Rupees\" ] = salaries [ \"Salary_In_Rupees\" ] . str . replace ( \",\" , \"\" ) Aby przekonwertowa\u0107 dane u\u017cywamy metody astype() salaries [ \"Salary_In_Rupees\" ] = salaries [ \"Salary_In_Rupees\" ] . astype ( float ) Wiedz\u0105c \u017ce Rupee to 0,012 dolara ameryka\u0144skiego salaries [ \"Salary_In_Rupees\" ] = salaries [ \"Salary_In_Rupees\" ] * 0.012 Aby po grupowac dane po warto\u015bciach w kolumne Company_Size tak by zawiera\u0142y \u015brednie zarobki w dolarach u\u017cywamy poni\u017cszego przyk\u0142adu: salaries . groupby ( \"Company_Size\" )[ \"Salary_USD\" ] . mean () Zamiast tworzy\u0107 now\u0105 tabel\u0119 jak w przypadku powy\u017cszym lepiej jest stworzy\u0107 kolumn\u0119 kt\u00f3ra b\u0119dzie wylicza\u0142a odchylenie standardowe od wynagrodze\u0144 na podstawie do\u015bwiadczenia. salaries [ \"std_dev\" ] = salaries . groupby ( \"Experience\" )[ \"Salary_USD\" ] . transform ( lambda x : x . std ()) Aby zliczyc ile jest poszczeg\u00f3lnych przypadk\u00f3w korzystamy z metody value_counts() print ( salaries [[ \"Experience\" , \"std_dev\" ]] . value_counts ()) Aby stworzy\u0107 kolumn\u0119 w kt\u00f3rej b\u0119d\u0105 przechowywane mediany wynagrodze\u0144 na podstawie wielko\u015bci firmy. Robimy to przy wykorzystaniu poni\u017cszego wyra\u017cenia. salaries [ \"median_by_comp_size\" ] = salaries . groupby ( \"Company_Size\" )[ \"Salary_USD\" ] . transform ( lambda x : x . median ()) Punkty Odstaj\u0105ce g\u00f3rne pojawiaj\u0105 si\u0119 dla warto\u015bci wiekszej ni\u017c 1,5 odst\u0119pu mi\u0119dzy kwartylnego ( IQR ) ponad trzeci kwartyl. IQR = 75th - 25th percentile Upper Outliers > 75th percentile + (1.5 * IQR) Punkty odstaj\u0105ce dolene pojawiaj\u0105 sie dla warto\u015bci mniejszej ni\u017c 1.5 odst\u0119pu mi\u0119dzy kwartylnego ( IQR ) poni\u017cej pierwszego kwartylu. IQR = 75th - 25th percentile Lower Outliers < 25th percentile - (1.5 * IQR) seventy_fifth = salaries [ \"Salary_USD\" ] . quantile ( 0.75 ) twenty_fifth = salaries [ \"Salary_USD\" ] . quantile ( 0.25 ) salaries_iqr = seventy_fifth - twenty_fifth print ( salaries_iqr ) Aby obliczyc skrajne warto\u015bci po kt\u00f3rych przekroczeniu pojawiaj\u0105 si\u0119 punkty odstaj\u0105ce. Korzystamy z powy\u017cszych oblicze\u0144. upper = seventy_fifth + ( 1.5 * salaries_iqr ) lower = twenty_fifth - ( 1.5 * salaries_iqr ) print ( upper , lower ) Aby wy\u015bwietli\u0107 dane dla kt\u00f3rych warto\u015bci s\u0105 odstaj\u0105ce korzystamy z poni\u017cszego kodu: salaries [( salaries [ \"Salary_USD\" ] < lower ) | ( salaries [ \"Salary_USD\" ] > upper )][[ \"Experience\" , \"Employee_Location\" , \"Salary_USD\" ]] Mo\u017cemy odfiltrowa\u0107 punkty odstaj\u0105ce no_outliers = salaries [( salaries [ \"Salary_USD\" ] > lower ) & ( salaries [ \"Salary_USD\" ] < upper > )] print ( no_outliers [ \"Salary_USD\" ] . describe ()) Relationships in Data Data Miesi\u0105ce dzie\u0144 W wi\u0119kszo\u015bci przypadk\u00f3w podczas importu danych dane dotycz\u0105ce dat i godzin s\u0105 typami object . divorce = pd . read_csv ( \"divorce.csv\" ) divorce . head () divorce . dtypes Mo\u017cna naprawic tak by odrazu dane by\u0142y czytane jako daty u\u017cywaj\u0105c parametru parse_dates divorce = pd . read_csv ( \"divorce.csv\" , parse_dates = [ \"marriage_date\" ]) divorce . dtypes Mo\u017cna tak\u017ce zmieni\u0107 typ danych po zaimportowaniu danych. divorce [ \"marriage_date\" ] = pd . to_datetime ( divorce [ \"marriage_date\" ]) divorce . dtypes Je\u015bli data jest przechowywana w trzech r\u00f3znych kolumnach takich jak miesi\u0105c dzie\u0144 rok to mozna to zapisa\u0107 we wsp\u00f3lnej kolumnie. divorce [ \"marriage_date\" ] = pd . to_datetime ( divorce [[ \"month\" , \"day\" , \"year\" ]]) Mo\u017cna wy\u0142uska\u0107 same miesi\u0105ce z daty przy wykorzystaniu parametru dt.month divorce [ \"marriage_month\" ] = divorce [ \"marriage_date\" ] . dt . month divorce . head () Mo\u017cna stworzy\u0107 wykres zale\u017cno\u015bci miedzy d\u0142ugo\u015bci\u0105 ma\u0142\u017ce\u0144stwa a miesi\u0105cem gdy wzi\u0119to \u015blub. sns . lineplot ( data = divorce , x = \"marriage_month\" , y = \"marriage_duration\" ) plt . show () Korelacja opisuje kierunek zale\u017cno\u015bci mi\u0119dzy dwiema zmiennymi oraz jej warto\u015b\u0107(si\u0142\u0119) divorce . corr () Heatmapa Okre\u015bla szybka wizualizacje interpretacji korelacji. //TO DO Wyja\u015bnij co znaczy parametr annot sns . heatmap ( divorce . corr (), annot = True ) plt . show () Powy\u017csza korelacja jest liniowa. Mo\u017cliwe s\u0105 korelacja super-liniowe (O(n log n)) lub kwadratowe. Dlatego nale\u017cy wzbogaca\u0107 nasze wykresy korelacji wykresami punktowymi. Poni\u017cej przedstawiono wykres korelacji zarobk\u00f3w miesi\u0119cznych kobiet i m\u0119\u017cczyzn w chwili rozwodu sns . scatterplot ( data = divorce , x = \"income_man\" , y = \"income_woman\" ) plt . show () // TO DO Doda\u0107 wykres punktowy Po tej wizualizacji wida\u0107 \u017ce zwi\u0105zek istnieje, ale nie jest szczeg\u00f3lnie silny tak jak to sugerowa\u0142a nasza mapa popularno\u015bci. Aby zobaczy\u0107 wykres wszystkich relacji mi\u0119dzy zmiennymi numerycznymi umozliwia metoda pairplot sns . pairplot ( data = divorce ) plt . show () Mo\u017cna tak\u017ce ograniczy\u0107 liczb\u0119 wy\u015bwietlonych relacji, ustawiaj\u0105c parametr vars . sns . pairplot ( data = divorce , vars = [ \"income_man\" , \"income_woman\" , \"marriage_duration\" ]) plt . show () Zwi\u0105zki mi\u0119dzy zmiennymi kategorycznymi divorce [ \"education_man\" ] . value_counts () Nale\u017cy dokonac wizualizacji by zobaczy\u0107 powi\u0105zania miedzy liczb\u0105 ma\u0142ze\u0144stwa a d\u0142ugo\u015bci\u0105 ma\u0142\u017ce\u0144stwa. sns . histplot ( data = divorce , x = \"marriage_duration\" , binwidth = 1 ) plt . show () Aby przedstawi\u0107 zwi\u0105zek (liczb\u0119) mi\u0119dzy d\u0142ugo\u015bci\u0105 ma\u0142\u017ce\u0144stwa w odniesieniu do poziomu wykszta\u0142cenia m\u0119\u017cczyzny. sns . histplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" , binwidth = 1 ) plt . show () Zwi\u0105zek mi\u0119dzy d\u0142ugo\u015bci\u0105 trwania ma\u0142\u017ce\u0144stwa a poziomem wykszta\u0142cenia nie jest do ko\u0144ca jasny. Wykresy te rozwi\u0105zuj\u0105 wykresy Kernel Density Estimate ( KDE ) dost\u0119pne w bibliotece Seaborn. sns . kdeplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" ) plt . show () // TO DO W por\u00f3wnaniu do histogram\u00f3w \u015brodowisko KDE uwa\u017ca si\u0119 za bardziej zrozumia\u0142e, zw\u0142aszcza gdy pokazuje wiele dystrybucji. Nalezy zauwa\u017cy\u0107, \u017ce lokalizacja szczytowego czasu trwania ma\u0142\u017ce\u0144stwa dla ka\u017cdego poziomu m\u0119skiego jest bardziej widoczna niz na histogramie. Mo\u017cna wy\u0142\u0105czy\u0107 algorytm wyg\u0142adzenia bo to on psuje poprawny odbi\u00f3r wykresu. Algorytm ten mo\u017ce powodowa\u0107 \u017ce d\u0142ugo\u015b\u0107 niekt\u00f3rych ma\u0142\u017ce\u0144stw mo\u017ce by\u0107 kr\u00f3tsza od zera. Mo\u017cna to zmieni\u0107 i pomin\u0105\u0107 algorytm wyg\u0142adaaj\u0105cy po przez zastosowanie parametru cut . Parametr cut przekazuje informacj\u0119 jak daleko poza minimalne i maksymalne dane powinna si\u0119ga\u0107 krzywa podczas stosowania wyg\u0142adzenia. sns . kdeplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" , cut = 0 ) plt . show () //TO DO DOdac ten wykres Wykres ten przedstawia tylko te ma\u0142\u017ce\u0144stwa trwaj\u0105ce conajmniej jeden rok. Je\u017celi interesuje nas funkcja rozk\u0142adu kumulatywnego mo\u017cna ustawi\u0107 parametr cumulative sns . kdeplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" , cut = 0 , cumulative = True ) plt . show () Wykres ten przedstawia prawdopodobi\u0144stwo \u017ce czas trwania ma\u0142\u017ce\u0144stwa b\u0119dzie kr\u00f3tszy ni\u017c dany okres. Mo\u017cemy stworzy\u0107 przybli\u017cony wiek zawarcia ma\u0142\u017ce\u0144stwa kobiet i m\u0119\u017cczyzn. divorce [ \"man_age_marriage\" ] = divorce [ \"marriage_year\" ] - divorce [ \"dob_man\" ] . dt . year divorce [ \"woman_age_marriage\" ] = divorce [ \"marriage_year\" ] - divorce [ \"dob_woman\" ] . dt . year Przedstawiono wykres punktowy na wykresie punktowym. sns . scatterplot ( data = divorce , x = \"woman_age_marriage\" , y = \"man_age_marriage) plt . show () Przedstawiaj\u0105c dane na wykresie punktowym koloruj\u0105ce punkty po poziomie wykszta\u0142cenia przedstawia wykres poni\u017cszy: sns . scatterplot ( data = divorce , x = \"woman_age_marriage\" , y = \"man_age_marriage\" , hue = \"education_man\" ) plt . show () Mo\u017cna okre\u015bli\u0107 jaka cz\u0119\u015bci\u0105 ca\u0142o\u015bci jest dana kategorii. Pozwala to okre\u015bli\u0107 czy dany zbi\u00f3r jest reprezentacyjny dla ca\u0142ej populacji. planes [ \"Destination\" ] . value_counts ( normalize = True ) Inn\u0105 metod\u0105 na zwerfikowanie cz\u0119sto\u015b\u0107 kombinacji klas s\u0105 tabele krzy\u017cowa. W naszym przypadku to cz\u0119stotliwo\u015b\u0107 tras lot\u00f3w. Nast\u0119pnie wybieramy kolumn\u0119, kt\u00f3ra ma by\u0107 u\u017cywana jako indeks dla tabeli pd . crosstab ( planes [ \"Source\" ], planes [ \"Destination\" ]) Mo\u017cna zastosowa\u0107 dodatkowo funkcje agreguj\u0105ce. W poni\u017cszym przypadku jest to mediana cen dla danego kierunku pd . crosstab ( planes [ \"Source\" ], planes [ \"Destination\" ], values = planes [ \"Price\" ], aggfunc = \"median\" ) Je\u015bli mam dane dotycz\u0105ce liczb\u0119 przystank\u00f3w wyra\u017cona jako \"1 przystanek\"(1 stop), \"2 przystanki\"(2 stops), \"3 przystanki\"(3 stops) print ( planes [ \"Total_Stops\" ] . value_counts ()) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . str . replace ( \" stops\" , \"\" ) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . str . replace ( \" stop\" , \"\" ) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . str . replace ( \" non-stop\" , \"0\" ) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . astype ( int ) Aby zobaczy\u0107 jak ceny si\u0119 zmieniaj\u0105 w ciagu miesi\u0119cy oraz jak to wygl\u0105da w tygodniu. planes [ \"month\" ] = planes [ \"Date_of_Journey\" ] . dt . month planes [ \"weekday\" ] = planes [ \"Date_of_Journey\" ] . dt . weekday print ( planes [[ \"month\" , \"weekday\" , \"Date_of_Journey\" ]] . head ()) Mo\u017cna tak\u017ce wyodr\u0119bni\u0107 godzin\u0119 odlotu i przylotu planes [ \"Dep_Hour\" ] = planes [ \"Dep_Time\" ] . dt . hour planes [ \"Arrival_Hour\" ] = planes [ \"Arrival_Time\" ] . dt . hour Mo\u017cna tak\u017ce grupowa\u0107 dane liczbowe i oznacza\u0107 je jako klasy. Czyli stworzenie nowej kolumny kt\u00f3ra b\u0119dzie zawiera\u0142a opis dla danej liczby przypisuj\u0105c jej warto\u015b\u0107 kategoryczn\u0105. twenty_fifth = planes [ \"Price\" ] . quantile ( 0.25 ) median = planes [ \"Price\" ] . median () seventy_fifth = planes [ \"Price\" ] . quantile ( 0.75 ) maximum = planes [ \"Price\" ] . max () Nast\u0119pnie tworzymy list\u0119 kategorii, a nast\u0119pnie tworzymy zbi\u00f3r zakres\u00f3w dla kt\u00f3rych przypisana zostanie odpowiednia warto\u015b\u0107 kategorii. labels = [ \"Economy\" , \"Premium Economy\" , \"Business Class\" , \"First Class\" ] bins = [ 0 , twenty_fifth , median , seventy_fifth , maximum ] Do przypisania nowej kategorii z wcze\u015bniej utworzonej listy slu\u017cy metoda cut planes [ \"Price_Category\" ] = pd . cut ( planes [ \"Price\" ], labels = labels , bins = bins ) Mo\u017cemy teraz stworzyc wykres kategorii lot\u00f3w w odniesieniu do lin lotniczych. sns . countplot ( data = planes , x = \"Airline\" , hue = \"Price_Category\" ) plt . show () Working with Categorical Data in Python Zmienna jest zmienn\u0105 kategoryczn\u0105 o ile zawiera sko\u0144czon\u0105 liczb\u0119 odr\u0119bnych grup lub kategorii. W badaniach naukowych zwana r\u00f3wnie\u017c danymi jako\u015bciowymi. Dane kategoryczne mo\u017cna podzieli\u0107 na trzy typy: porz\u0105dkowe i nominalne. Je\u015bli zmnienna kategoryczna ma naturaln\u0105 kolejno\u015b\u0107 rang naprzyk\u0142ad stopnie wojskowe to mo\u017cna j\u0105 uzna\u0107 za zmien\u0105 kategoryczn\u0105 porz\u0105dkow\u0105. Zmienna kategoryczna nominalna to takie dane kt\u00f3rych nie mo\u017cna umie\u015bci\u0107 w porz\u0105dku naturalnym np. ulubione kolory Je\u015bli kolumny ramki danych po wykorzystaniu metody .info() prezentuj\u0105 dane w kolumnie jako object to najprawdopodobniej oznacza \u017ce mamy doczynienia ze zmienn\u0105 kategoryczn\u0105. Aby otrzyma\u0107 jeszcze wi\u0119cej informacji na temat danych w danej kolumnie mo\u017cemy u\u017cy\u0107 do tego parametru describe() adult[\"Marital Status\"].describe() . #count 32561 #unique 7 #top Married-civ-spouse #freq 14976 #Name: Marital Status, dtype: object Dzi\u0119ki temu dostajemy informacje o licznie element\u00f3w w danej kolumnie a tak\u017ce ile unikalnych warto\u015bci znajduje sie w kolumnie, najpopulaniejsz\u0105 kategori\u0119 i liczb\u0119 jej wyst\u0105pie\u0144. Innym sposobem jest wykorzystanie metody value_counts() , kt\u00f3ra zwraca warto\u015bci kategoryczne oraz ich liczb\u0119. # Married-civ-spouse 14976 # Never-married 10683 # Divorced 4443 # Separated 1025 # Widowed 993 # Married-spouse-absent 418 # Married-AF-spouse 23 # Name: Marital Status, dtype: int64 Mo\u017cna tak\u017ce zwr\u00f3ci\u0107 ile procent danej kategorii jest w danej kolumnie przy u\u017cyciu metody i odpowiedniego parametru value_counts(normalize=True) # Married-civ-spouse 0.459937 # Never-married 0.328092 # Divorced 0.136452 # Separated 0.031479 # Widowed 0.030497 # Married-spouse-absent 0.012837 # Married-AF-spouse 0.000706 # Name: Marital Status, dtype: float64 Wy\u015bwietlenie typu ka\u017cdej kolumny odbywa sie po przez wykorzystanie metody dtypes Aby wy\u015bwitlic typ danej serii czyli danej kolumny u\u017cywamy metody dtype . O oznacza \u017ce to obiekty. adult [ \"Marital Status\" ] . dtype #dtype('O') adult [ \"Marital Status\" ] = adult [ \"Marital Status\" ] . astype ( \"category\" ) adult [ \"Marital Status\" ] . dtype # S\u0105 dwa sposoby tworzenia serii kategoeycznych, gdy dane nie s\u0105 jeszcze w formacie DataFrame. Wykorzystuje sie do tego parametr dtype my_data = [ \"A\" , \"A\" , \"C\" , \"B\" , \"C\" , \"A\" ] my_series1 = pd . Series ( my_data , dtype = \"category\" ) print ( my_series1 ) Innym sposobem jest wykorzystanie metody Categorical my_data = [ \"A\" , \"B\" , \"C\" , \"B\" , \"C\" , \"A\" ] my_series2 = pd . Categorical ( my_data , categories = [ \"C\" , \"B\" , \"A\" ], ordered = True ) my_series2 #[A, A, C, B, C, A] #Categories (3, object): [C < B < A] Przechowywanie serii pand z typem categorical jest przydatne z powodu oszcz\u0119dno\u015bci ogromnej liczby pami\u0119ci. adult = pd . read_csv ( \"data/adult.csv\" ) adult [ \"Marital Status\" ] . nbytes #260488 adult [ \"Marital Status\" ] = adult [ \"Marital Status\" ] . astype ( \"category\" ) adult [ \"Marital Status\" ] . nbytes #32617 Mo\u017cna przed wczytaniem zrobic s\u0142ownik gdzie kluczem b\u0119dzie kolumna a warto\u015bcia typ zmiennej. adult_dtypes = { \"Marital Status\" : \"category\" } adult = pd . read_csv ( \"data/adult.csv\" , dtype = adult_dtypes ) adult [ \"Marital Status\" ] . dtype # CategoricalDtype(categories=[' Divorced','Married-AF-spouse',..., ' Widowed'], ordered=False) .str umo\u017cliwia wykonywanie operacji na danych tekstowych w kolumnach typu Series .apply() pozwala na zastosowanie funkcji dla ka\u017cdego elementu. U\u017cywanie funkcji NumPy w seriach kategorycznych zwykle powoduje b\u0142\u0119dy. Trzeba sprawdz\u0107 zawsze czy mamy doczynienia ze zmien\u0105 kategoryczn\u0105. Check - sprawdzenie used_cars [ \"color\" ] = used_cars [ \"color\" ] . astype ( \"category\" ) used_cars [ \"color\" ] = used_cars [ \"color\" ] . str . upper () print ( used_cars [ \"color\" ] . dtype ) # object convert - przekszta\u0142cenie used_cars [ \"color\" ] = used_cars [ \"color\" ] . astype ( \"category\" ) print ( used_cars [ \"color\" ] . dtype ) # category Trzeba sprawdza\u0107 czy zmiany zadzia\u0142a\u0142y zgodnie z zamierzeniami used_cars [ \"color\" ] = used_cars [ \"color\" ] . astype ( \"category\" ) used_cars [ \"color\" ] . cat . set_categories ([ \"black\" , \"silver\" , \"blue\" ], inplace = True ) used_cars [ \"color\" ] . value_counts ( dropna = False ) Przyk\u0142ad \u017ce nie mo\u017cna wykorzysta\u0107 funkcji NumPy: used_cars [ \"number_of_photos\" ] = used_cars [ \"number_of_photos\" ] . astype ( \"category\" ) used_cars [ \"number_of_photos\" ] . sum () Mo\u017cna jednak przekonwertowa\u0107 szereg na liczb\u0119 ca\u0142kowit\u0105 i zastosowa\u0107 sumowanie. used_cars [ \"number_of_photos\" ] . astype ( int ) . sum () # .str converts the column to an array used_cars [ \"color\" ] . str . contains ( \"red\" ) # 0 False # 1 False Kodowania etykiet to technika kodowania warto\u015bci kategorycznych jako liczb ca\u0142kowitych. Kody zaczynaj\u0105 si\u0119 od 0 i ko\u0144cz\u0105 na n - 1 , gdzie n to liczba kategorii. Kod -1 skazywany jest dla brakuj\u0105cej warto\u015bci. Kodowanie etykiet s\u0142u\u017cy do oszcz\u0119dzania pami\u0119ci i upraszczania odpowiedzi. Tworzenie kod\u00f3w used_cars [ \"manufacturer_name\" ] = used_cars [ \"manufacturer_name\" ] . astype ( \"category\" ) used_cars [ \"manufacturer_name\" ] = used_cars [ \"manufacturer_name\" ] . cat . codes print ( used_cars [[ 'manufacturer_name' , 'manufacturer_code' ]]) # manufacturer_name manufacturer_code # 0 Subaru 45 # 38526 Chrysler 8 Przy kodowaniu etykiet nale\u017cy stworzy\u0107 mapy. Mo\u017cna to zrobi\u0107 tworzy\u0107 obiekt dla kod\u00f3w i obiekt dla kategorii. codes = used_cars [ \"manufacturer_name\" ] . cat . codes categories = used_cars [ \"manufacturer_name\" ] name_map = dict ( zip ( codes , categories )) U\u017cywanie s\u0142ownika: used_cars [ \"manufacturer_code\" ] = used_cars [ \"manufacturer_name\" ] . cat . codes used_cars [ \"manufacturer_code\" ] . map ( name_map ) Etykietowanie wszystkich s\u0142\u00f3w kt\u00f3re zawieraj\u0105 s\u0142owo \"van\" . Etykietowanie zero jedynkowe gdy w s\u0142owie zawarte jest \"van\" . # Codes from previous lesson: used_cars [ \"body_type\" ] . str . contains ( \"van\" , regex = False ) used_cars [ \"van_code\" ] = np . where ( used_cars [ \"body_type\" ] . str . contains ( \"van\" , regex = False ), 1 , 0 ) used_cars [ \"van_code\" ] . value_counts () // TO DO uzupelni\u0107 dane o ten rozdzial przed data storytelling Data Comunication Concept Storytelling with Data W analizie wazna jest komunikacja w tym szczegolnie przep\u0142yw informacji. Z\u0142a komunikacja mo\u017ce doprowadzic do katastrofy podobnej do Challengera gdzie \u015bmierci uleglo 7 astronaut\u00f3w. Technicy przekazali informacj\u0119 o uszczelce ale nie zosta\u0142a ona zg\u0142oszona dalej. Dobra analiza: - wyja\u015bniono rzeczy techniczne nawet dla os\u00f3b nie technicznych, - u\u0142o\u017cenie tak histori\u0119 by wplyn\u0105c na podejmowanie decyzji, - nie k\u0142amiemy - ci\u0105g przyczynowo-skutkowy Wiadomo\u015bci przekazywane przez prezentera powinny by\u0107 proste , a przede wszystkim wiarygodne . Kazda prezentacja powinna zawiera\u0107 odpowiednie zaprezentowanie danych. Dobra analiza powinna przekonac interesariuszy,kt\u00f3rzy s\u0105 przeciwni do zmian, ktore nale\u017ca\u0142o by zmieni\u0107. Dobra analiza powinna zainteresowa\u0107 interesariuszy ktorzy nie s\u0105 specjalistami technicznymi a szczeg\u00f3lnie nie s\u0105 dobrze obeznani z matematyk\u0105 lub statystyk\u0105. Opowiadanie o danych ( data storytelling ) Mechanizm, kt\u00f3ry udostepnia spostrze\u017cenia po przez narracj\u0119 i zrozumiala wizualizacj\u0119. Dzi\u0119ki temu mozliwe jest - nap\u0119dzanie ludzkiej wyobra\u017ani - zapadni\u0119cie w pami\u0119\u0107 lepiej ni\u017c metryki - nadaj\u0105 kontekst danym - uwaga s\u0142uchaczy jest poddtrzymywana i przykuwana, - u\u0142atwiaja podejmowanie decyzji - pozwalaj\u0105 na nap\u0119dzenie zmian i podejmowanie dzia\u0142a\u0144 Aby dobrze przedstawi\u0107 analiz\u0119 to taka: - przedstawienie najwa\u017cniejszej tre\u015bci w trzy minuty , - za pomoc\u0105 jednego zdania przedstawic to co nas popycha i nas motywuje do dzia\u0142ania, //TO Do daoda\u0107 rysunek z pierwszego filmiku (Fundamentals of storytelling - 2:57) Prezentacja wynik\u00f3w analizy powinna opiera\u0107 sie na trzech filarach: danych, narracji i elementow wizualnych. Opowiadanie o danych powinno - wysiagn\u0105\u0107 jasne wnioski z naszej analizy - wyjasni\u0107 temat - zwi\u0119z\u0142y, kt\u00f3ry poda konkretne fakty Efektywna historia zawiera: - wnioski z naszych modeli oraz analiz, kt\u00f3re odnosz\u0105 si\u0119 do sytuacji, - dok\u0142adne i wiarygodne danych, - praktyczne spostrze\u017cenia, - dobra narracja kt\u00f3ra powoduje ze analiza jest atrakcyjna i \u0142atwa w zrozumieniu, - tylko najwa\u017cnejsze informacje, - wziecie pod uwag\u0119 docelowych odbiorc\u00f3w, ktore pomaga w wyja\u015bnieniu fakt\u00f3w, - nale\u017cy nie wprowadza\u0107 w b\u0142\u0105d wykres\u00f3w, proste i czytelne. W prezentowaniu analizy nalezy zwrocic uwag\u0119 na naszych odbiorc\u00f3w czy s\u0105 techniczni czy nie, Nale\u017cy zaprzesta\u0107 mowieniu o metodach dojscia do celu. Dla odbiorc\u00f3w wazniejszy jest wynik oraz metody wdro\u017cenia zmian w \u017cycie. Historie powinny by\u0107 proste do zrozumienia i zaanga\u017cowac publicznosc nietechniczn\u0105. Warunki mog\u0105 u\u0142atwia\u0107 procesy decyzyjne i nap\u0119dza do zmian. Na poczatku trzeba zwr\u00f3ci\u0107 uwage na odbiorcow tak by nasza tres\u0107 byla zrozumiala dla nich. Odbiorcy powinni zrozumie\u0107 wplyw i ograniczenia prognoz na temat naszego modelu, Powinni\u015bmy by\u0107 otwarci i \u015bwiadomi na pytania od odbiorc\u00f3w Powinni\u015bmy zrozumie\u0107 co odbiorcy chc\u0105. Aby \u0142atwo zrozumie\u0107 jak powinnismy prezentowa\u0107 nasze analizy powinni\u015bmy zastosowa\u0107 technik\u0119 ADEPT: - A nalogy - por\u00f3wnywanie nowo omawianych rzeczy do rzeczy juz znanych. Czyli np. t\u0142umaczenie dzia\u0142ania sieci neuronowych na przyk\u0142adzie nauki dziecka. Akronimy czyli skr\u00f3ty powinny by\u0107 u\u017cywane ostro\u017cnie. Pomagaj\u0105 one w komunikacji o ile wszyscy odbiorcy je rozumiej\u0105, a w przeciwnym razie szkodz\u0105. Dobra praktyka jest wyja\u015bnienie akronimy w pierwszym u\u017cyciu. Powinni\u015bmy ogranicza\u0107 \u017cargon. Tlumaczy\u0107 technologie na prostsze i znane terminy. Dodawanie s\u0142ownika w dokumentacji, kt\u00f3ry tlumaczy te skr\u00f3ty. - D iagram - pomagaj\u0105 zwizualizowa\u0107 proces, gdzie ilustracyjna moc jest zawsze skuteczniejsza - E xample - P lain English - T echnical definition Prezentowanie analizy powinno opiera\u0107 si\u0119 na wp\u0142ywie a nie na procesie. Powinnismy wiedzie\u0107 ze nie wszystkie szczego\u0142y techniczne mozna usun\u0105\u0107 z naszej prezentacji ale jednak trzeba je dobrze i jasno wyja\u015bnic naszym odbiorcom. Pyta\u0107 si\u0119 odbiorcow czy rozumiej\u0105 temat i czy s\u0105 pytania. Trzeba by\u0107 przygotowany na wyja\u015bnianie pojec przy wykorzystaniu roznych strategii. Narracja Skupmy si\u0119 na narracji, po znalezieniu odpowiednich spostrze\u017ce\u0144 w naszych danych powinnismy znale\u017c\u0107 sensowny sposob ich przedstawienia. Narracja ta powinna zawiera\u0107: - tylko kluczowe punkty, - wprowadza zmiany, Dbra narracja porz\u0105dkuje informacje, tak aby zaanga\u017cowa\u0107 odbiorc\u00f3w i sprawi\u0107 by zainteresowali sie wynikami lub informacjami. Rozpoczynaj\u0105c swoj\u0105 prezentacj\u0119 powinni\u015bmy przedstawi\u0107 szczeg\u00f3\u0142owe informacje na temat motywacji, co si\u0119 zmieni\u0142o. Trzeba zwraca\u0107 uwag\u0119 na to na czym skupia si\u0119 analiza. Po przedswieniu dowod\u00f3w na czynniki, kt\u00f3re przyczyni\u0142y si\u0119 do powstania problemu. Powinnismy podawa\u0107 tylko istotne informacje, a nie szczeg\u00f3\u0142owe dane, ktore przeci\u0105\u017caj\u0105 odbiorc\u00f3w. Mo\u017cna pokusi\u0107 sie o g\u0142ebsze wyja\u015bnienie przyczyny problemu. Powinnismy zawrze\u0107 centralny wniosek analizy, kt\u00f3ry zapewnia jasny wgl\u0105d na to co mo\u017ce si\u0119 sta\u0107, je\u015bli nic si\u0119 nie zmieni. Na ko\u0144cu powinni\u015bmy przedstawi\u0107 potencjalne rozwi\u0105zania i mozliwosci po przez zelecenia co do sposobu post\u0119powania. Powinni\u015bmy by\u0107 proaktywni i prowadzi\u0107 publiczno\u015b\u0107 przez zrozumienie. Selecting the right data W celu odpowiedniego przekazania informacji nale\u017cy ustali\u0107 do jakich os\u00f3b b\u0119dziemy kierowa\u0107 swoja wypowied\u017a, wybrane ustalenia jak i statystyki, wizualizacje, format naszych wynik\u00f3w. Nale\u017cy zwr\u00f3ci\u0107 uwag\u0119 na wybor odpowiednich danych, czy to takie dane ktore zawieraj\u0105 wystarczaj\u0105co kontekstowych spostrze\u0144 w naszej historii, by poprze\u0107 nasz g\u0142owny punkt bez prze\u0142adowania naszego sprawozdania informacjami. Zale\u017cy nam na tym aby uwzgl\u0119dni\u0107 minimaln\u0105 liczb\u0119 wynik\u00f3w. Nalezy pami\u0119ta\u0107 \u017ce jak we\u017amiemy zasmiecone dane to nasza analiza r\u00f3wnie\u017c b\u0119dzie za\u015bmiecona. Nasze wyniki musz\u0105 wyro\u017cnia\u0107 inny widok danych dla ka\u017cdej grupy odbiorc\u00f3w. Trzeba dostosowa\u0107 nasz sposob prezentowania dla ka\u017cdego z nich. Odbiorcy sa r\u00f3\u017cni w r\u00f3\u017cny sposob zainteresowani wynikami projektu. okre\u015blenie osob pomaga dobra\u0107 odpowiednie dopasowanie, tak aby przekazac kluczowe spostrze\u017cenia. Po znalezieniu naszej historii musimy zdefiniowa\u0107 osoby w naszych celach. Pozwoli to na dobranie ustalenia naszego przekazu. Dobra przezentacja zagadnienia jest skierowana do ro\u017cnego rodzaju sceptyk\u00f3w. Majac na celu lepszy przekaz analizy powinni\u015bmy: - najpierw przekona\u0107 do racji samego siebie, - nast\u0119pnie przyjaciela, - a na ko\u0144cu sceptyka. R\u00f3\u017cnice w danych Ro\u017cnic\u0119 miedzy zbiorami mo\u017cemy przedstawi\u0107 jako: - warto\u015b\u0107 bezwgl\u0119dna np. liczb\u0119 bezwgl\u0119dn\u0105 w konkretnych liczbach, - warto\u015b\u0107 wzgl\u0119dna w procentach. Bezwzgl\u0119dna zmiana dla ma\u0142ej liczby mo\u017ce byc niewielka, nawet je\u015bli wzgledna zmiana jest du\u017ca. Z drugiej strony wzgledne zmiany na malych liczbach mog\u0105 wydawa\u0107 si\u0119 wi\u0119ksze ni\u017c s\u0105 w rzeczywisto\u015bci. Ma\u0142a zmiana bezwgledna mo\u017ce skutkowa\u0107 du\u017c\u0105 zmian\u0105 procentow\u0105. //TO DO doda\u0107 wykresy z 1:40 z filmiku Showing relevant statistics Pierszy wykres przedstawia sprzeda\u017c w liczbach (warto\u015bci bezwzgledna) a drugi przedstawia proporcje zmian wyra\u017con\u0105 w procentach. Ratio Jest to por\u00f3wnanie dw\u00f3ch zmiennych wyra\u017conej jako iloraz. // TO DO przedstawi\u0107 wykres z 2:08 W przypadku czekolady i chips\u00f3w mo\u017cemy pos\u0142u\u017cy\u0107 si\u0119 przychodem podzielonym przez liczb\u0119 klient\u00f3w. Ratio pomaga znormalizowa\u0107 warto\u015bci co pomaga por\u00f3wna\u0107 rozk\u0142ad danych z pierwotnie r\u00f3\u017cnych skal. Agregacja Niekiedy nale\u017cy podsumowa\u0107 dane liczbowe w agregacje, czyli takiej liczbie ktora daje wyobrazenie o ca\u0142o\u015bci lub przez wybranie wartosci reprezentatywnej. Mo\u017ce to byc \u0142\u0105czna sprzeda\u017c lub czas trwania kampanii. Innym przyk\u0142adem jest \u015brednia, mediana. \u015arednia mo\u017ce wprowadza\u0107 w b\u0142\u0105d, szczeg\u00f3lnie gdy wyst\u0119puja wartosci odstaj\u0105ce. Wizualizacja Wizualizacja jest przeznaczona dla konkretnej grupy odbiorc\u00f3w i znajomo\u015bci przez nich poj\u0119\u0107. Na przyk\u0142ad wykres gesto\u015bci by\u0142by odpowiedni dla os\u00f3b technicznych, natomioast histogram odpowiedni dla os\u00f3b nietechnicznych. Zasada Pareto m\u00f3wi o tym \u017ce wi\u0119kszo\u015b\u0107 wyj\u015b\u0107 pochodzi z mniejszo\u015bci wej\u015b\u0107. Dane, kt\u00f3re s\u0105 mniej istotne powinni\u015bmy zagregowa\u0107, to ogranicza ha\u0142as. Analiza powinna by\u0107 uproszczona do poziomu wiedzy naszej publiczno\u015bci. Nale\u017cy nam na szybkim spostrzezeniu przez odbiorc\u00f3w. Zamiast pokazywa\u0107 wiele szczeg\u00f3\u0142\u00f3w powinni\u015bmy pokaza\u0107 najprostsze i najistotniejsze dane. Nale\u017cy skutecznie zaprezentowa\u0107 wizualizacj\u0119 naszym odbiorcom. Metoda McCandless Najpierw naszemu wykresowi nada\u0107 nag\u0142\u00f3wek i za pomoc\u0105 jego odnosi\u0107 sie do s\u0142uchaczy i w dalszej cz\u0119\u015bci prezentacji. Nag\u0142\u00f3wek powinnym by\u0107 kr\u00f3tki, jasny i oczywisty. To on wspiera nasz\u0105 histori\u0119 i wyja\u015bnia wizualizacj\u0119. Dodac opis osi x i y gdy\u017c pomaga to w \u0142atwiejszej interpretacji wykresu. Nale\u017cy opiera\u0107 si\u0119 na solidnych danych i by\u0107 gotowym na pytania. Uwaga powinna si\u0119 skupi\u0107 na naszym wykresie i naszej historii. O ka\u017cdym wykresie powinni\u015bmy wyja\u015bniac nasze spostrzerzenia co do naszej wizualizacji. Powinni\u015bmy wyja\u015bnia\u0107 co widz\u0105, a nie zak\u0142ada\u0107, \u017ce pytania pojawi\u0105 si\u0119 p\u00f3\u017aniej lub sami je zrozumiej\u0105. Na ko\u0144cu powinnismy odniesc si\u0119 do wykresu i jego spostrze\u017ce\u0144 i jakie ma to zastosowanie na przysz\u0142o\u015b\u0107 i jakie kroki nale\u017cy podj\u0105\u0107. Choosing the appropriate format //TO Do Doda\u0107 wykres z 0:19 Prezentacja Na koncu ka\u017cdej analizy nalezy zaprezentowac nasz\u0105 analiz\u0119 Dobra komunikacja zawiera: - kluczowe informacje, - wci\u0105gaj\u0105cy/interesuj\u0105cy, - \u0142atwe do zrozumienia. Ka\u017cda analiza wymaga pisemnego i ustnego raportu, lecz trzeba pami\u0119ta\u0107 od sytuacji projektu. Podczas przygotowania prezentacji ko\u0144cowej powinni\u015bmy wzi\u0105c pod uwag\u0119: - publiczno\u015b\u0107, - zawarto\u015b\u0107, - specjalne wymagania, - kana\u0142 komunikacji Wszystkie te elementy pomagaj\u0105 okre\u015bli\u0107 najlepszy format do komunikowania naszych wynik\u00f3w. Poni\u017cej rozwini\u0119to powy\u017csze punkty na kt\u00f3rych nale\u017cy si\u0119 skupi\u0107: - komu prezentujemy nasz\u0105 prezentacj\u0119, - dlaczego publiczno\u015b\u0107 ma wiedzie\u0107 o ustaleniach: - metodologi\u0119, - odpowiedzialno\u015b\u0107, - jak wykorzysta\u0107 nasze odkrycia - podj\u0119cie decyzji, - rozpoczecia nowego projektu, - jakich informacji potrzebuj\u0105 - wyniki naszych analiz - wp\u0142yw na nasze dotychczasowe ustalenia. Dowiedzie\u0107 si\u0119 czy odbiorcy: - maj\u0105 jakies szczego\u0142owe wymagania, - maj\u0105 wystarczaj\u0105co du\u017co czasu na zapoznanie si\u0119 z raportem czy lepsze kr\u00f3tkie spotkanie, - czy werfikuj\u0105 otrzymane informacje, - jak\u0105 form\u0119 komunikacji preferuj\u0105 zwr\u00f3ci\u0107 uwag\u0119 na strefy czasowe. - forma dokumentu czy word, notatnik Jupyter, czy blog W jaki spos\u00f3b zostanie on dostarczony czy b\u0119dzie on bezo\u015brednio prezentowany interesariuszom by odpowiedziec na komentarze. W ko\u0144cu jak du\u017ca ma by\u0107 publiczno\u015b\u0107. Dostosowywujemy prezentacje do ludzi inaczej prezentujemy dla 6 osob a inaczej dla 200 osob. Wyb\u00f3r formy komunikacji (pisemna czy ustna) nie zale\u017cy tylko od odbiorc\u00f3w, ale zar\u00f3wno od zalet i wad r\u00f3\u017cnych format\u00f3w. Komunikacja ustna pozwala na budowanie relacji z publicznosci\u0105 oraz natychmiastowa informacj\u0119 zwrotn\u0105. Lepszy przekaz gdy\u017c mowa cia\u0142a i g\u0142os daj\u0105 du\u017co do znaczenia. Wad\u0105 tego ustnej prezentacji jest: -brak trwa\u0142ego zapisu spotkania - nie nadaje si\u0119 do d\u0142ugich wiadomo\u015bci. Im d\u0142uzsza prezentacja tym wieksza szansa na to ze publiczno\u015b\u0107 straci koncentracj\u0119. Komunikacja pisemna pozwala na: - udostepnienie zapisu komunikacji, przez co wiadomo\u015b\u0107 mo\u017ce by\u0107 analizowana w d\u0142uzszej perspektywie, - \u0142atwiej udostepni\u0107 to du\u017cej grupie odbiorc\u00f3w, - mniej podatny na reakcje emocjonalne, - udost\u0119pnienie kodu dowolnemu interesariuszowi technicznemu. Wad\u0105 jest: - brak reakcji publiczno\u015bci co utrudnia adaptacj\u0119. - odpowied\u017a nie jest natychmiastowa, ale pojawi si\u0119 p\u00f3\u017aniej w formie komentarzy Dla osob kierowniczych liczy si\u0119 naszymi wnioskami i chc\u0119 szybkich odpowiedzi na swoje pytania. Ceni czas wi\u0119c trzeba szybko i merytorycznie podej\u015b\u0107 do tematu. Po spotkaniu nalezy spo\u017c\u0105dzi\u0107 raport kt\u00f3ry b\u0119dzie zawiera\u0142 wa\u017cne decyzje oparte na naszych wnioskach i przeka\u017ce je inwestorom. Nalezy sporzadzi\u0107 je w pisemny raport, bior\u0105c pod uwag\u0119 pytania i opinie, kt\u00f3re od niej otrzymali\u015bmy. Types of reports W tym rozdziale dowiesz si\u0119 jak tworzy\u0107 pisemny raport. W raporcie powino znale\u017a\u0107: - na czym koncentruje sie nasz projekt, - analiza recencji produkt\u00f3w, - przedstawienie naszych ustale\u0144, - krytyczna analiza wniosk\u00f3w czyli co nale\u017cy zmienic na co zwr\u00f3cic uwag\u0119, - szacunki dok\u0142adno\u015bci naszej analizy, - standardy nadane przez firm\u0119, - wyniki analizy powinny by\u0107 klarowne i \u0142atwe do werfikacji, gdy\u017c to one b\u0119d\u0105 nap\u0119dzac zmian\u0119, Istnieja r\u00f3\u017cbne typy raport\u00f3w: - Ratorty informacyjne, ktorych zadaniem jest podawanie faktycznej informacji. S\u0105 kr\u00f3tkie i nie maj\u0105 \u015bcis\u0142ej struktury. Ich zadaniem jest informowanie o faktach bez dodawania jakichkolwiek analiz. Raporty analityczne , kt\u00f3rych zadaniem jest dostarczenie analizy i demonstracja zaleznosci lub rekomendacji. Mog\u0105 r\u00f3\u017cni\u0107 si\u0119 wielko\u015bci\u0105 ale maja scis\u0142\u0105 struktur\u0119. Celem ich jest podejmowanie decyzji na podstawie danych. Sprawozdanie ko\u0144cowe obejmuj\u0105 szczeg\u00f3\u0142ow\u0105 analiz\u0119 danych, ustalenia i wyniki, a tak\u017ce wizualizacje. Zwykle s\u0105 d\u0142ugie i s\u0105 przeznaczone dla odbiorc\u00f3w, ktorzy potrzebuj\u0105 szczeg\u00f3\u0142\u00f3w technicznych. Raporty podsumowywuj\u0105ce zawieraj\u0105 kluczowe ustalenia i zalecenia a takze wizualizacje. Zwykle s\u0105 kr\u00f3tkie i maj\u0105 mniej ni\u017c pi\u0119\u0107 stron. Wynika to z faktu \u017ce sa podsumowaniem raportu ko\u0144cowego i mog\u0105 zawiera\u0107 odnosniki do dokumentu g\u0142\u00f3wnego. S\u0105 przeznaczone dla decydent\u00f3w, ktorym nie potrzebne s\u0105 szczeg\u00f3\u0142y techniczne. W przypadku raport\u00f3w analitycznych, koncowych jaki i podsumowywuj\u0105cych posiadaj\u0105 nastepuj\u0105c\u0105 strukture: - wprowadzenie - podsumowanie cel raportu, - dlaczego przeprowadzono ta analiz\u0119 przedstawi\u0107 motywacj\u0119, - podsumowanie pyta\u0144 analitycznych- np. Jakie czynniki wp\u0142ywaja na z\u0142e wrazenia u\u017cytkownik\u00f3w, - tre\u015b\u0107 raportu - opis najistotniejszych danych s\u0142owno-muzycznie albo za pomoc\u0105 tabeli - metody, kt\u00f3re pos\u0142uzyly do zebrania i analizy danych oraz do zbudowania modelu. - W analizie uwzgl\u0119dniamy wybrane dane do analizy, gdzie modelujemy je za pomoc\u0105 wizualizacji, np. za pomoca wykresu - wyniki, w ktorych opisujemy i wyja\u015bniamy wyniki naszej analizy - podsumowanie - ponownie sformu\u0142owanie pytania analitycznego, - podsumowanie najwa\u017cniejszych wynik\u00f3w analizy, - podajemy tu nasze zalecenia dotycz\u0105cych kolejnych krok\u00f3w Powy\u017csza struktura doprego raportu/sprawozdania jest dobra dla umieszczenia ich w czasopismach naukowych. W kotekscie biznesowy odbiorcy s\u0105 inni i nalezy sie dopasowa\u0107 do nich. Odpowiednia metoda to podej\u015bcie 1-3-25. Tworzy sie wtedy streszczenie wykonawcze - 1 strona bardzo kr\u00f3tka analiza tylko najwa\u017cniejsze informacje - maksymalnie 3 strony streszczenia ca\u0142ej analizy - maksymalnie 25 stron szczeg\u00f3\u0142ow Zawsze trzeba pamieta\u0107 o naszych interesariuszach, gdyz kazdy z nich jest zainteresowany r\u00f3\u017cnymi cz\u0119\u015bciami naszego raportu dlatego nale\u017cy odpowiednio dopasowa\u0107. Gdy\u017c moga by\u0107 ludzie kt\u00f3rzy maj\u0105 ma\u0142o czasu np kierownicy, dyrktorzy. Czytaj\u0105 oni wst\u0119p i zako\u0144czenie a nastepnie przegladnie tres\u0107 w poszukiwaniu poszczegolnych punkt\u00f3w. Wniosek powinien zawiera\u0107 wskaz\u00f3wki co do naszej analizy a przede wszystkim zawiera\u0107 nasza rekomendacj\u0119. Interesariusze techniczni s\u0105 g\u0142\u00f3wnie zainteresowani tresci\u0105 raportu. Chc\u0105 zrozumie\u0107 nasze metody tyechniczne i analizy. Reproducibility and references Podstawow\u0105 cz\u0119\u015bcia przekazywania naszych ustale\u0144 jest fakt \u017ce nasz raport jest jasny i powtarzalny. Powtarzalno\u015b\u0107 czyli reprodukcja to dla przykladu jak mamy przepis to id\u0105c zawsze tymi samymi krokami osiagniemy ten sam cel. Wynik za ka\u017cdym razem powinien byc ten sam i nie zmienny o ile pracujemy na tych samych danych. D\u0105zymy do uzyskania podobnych wynikow przy wykorzystanu tego samego og\u00f3lnego podej\u015bcia. Jest to kluczowe dla Data Scientisty gdyz zapobiega powielaniu si\u0119 wysi\u0142kom wykonywania tej samej czynnosci. Umozliwia to kontynuacje dotychczasowej pracy i skoncentrowanie sie na nowych wyzwaniach. Wa\u017cne jest w spos\u00f3b w jaki uzyskano wyniki. Dobre praktyki w pracy nad danymi. 1) Powinnismy zatrzyma\u0107 wszystkie skrypty kt\u00f3re pozwoli\u0142y nam uzyska\u0107 wynik. Dodawac komentarze, przekazywa\u0107 informacje o wykorzystanych pakietach. Wykorzystywanie systemu kontroli wersji, kt\u00f3ry \u015bledzi wszystkie zmiany i wersje w naszych skryptach. 2) Nale\u017cy unika\u0107 recznych manipulacji danych po przez r\u0119czne zmiany bezpo\u015brednio w edytorze. Powinnismy zapisac wszystkie wersje naszego pliku. Powinnismy ratowa\u0107 surowe dane wraz ze skryptem z krokami po\u015brednimi. Dzieki temu b\u0119dzie mo\u017cliwe przedstawienie historii i utworzenia wok\u00f3\u0142 niej narracji. 3) Wyra\u017any widok gwarantuje co si\u0119 dzieje z danymi, a zatem mo\u017ce dostosowywa\u0107 i rozwi\u0105zywa\u0107 problemy. Kontrola wersji jest wa\u017cna gdy w uczeniu maszynowym wyst\u0119puje element losowo\u015bci. Wykorzystanie r\u00f3\u017cnego ziarna w losowo\u015bci mo\u017ce spowodowa\u0107 otrzymanie ro\u017cnych wynik\u00f3w. Je\u015bli wykorzystamy ro\u017cn\u0105 liczb\u0119 r\u00f3\u017cnych ziaren i otrzymamy ten sam wynik to wynik zale\u017cny jest od modelu a nie od losowo\u015bci. 4) Przewidywalnosc algorytmu to stopie\u0144 w jaki cz\u0142owiek moze zrozumie\u0107 model, przyczyn\u0119 decyzji. Przewidywalno\u015b\u0107 jest istotna by wyt\u0142umaczy\u0107 odbiorcom ze nasze wnioski mog\u0105 zostac oddtworzone. 5) Powinnismy poprawnie cytowa\u0107 prace innych ludzi w naszej analizie. Najpopularniejszm stylem jest APA ktory wykorzystuje cytaty w tek\u015bcie. Umieszcza on nazwisko autora i dat\u0119 publikacji. Do wykorzystania odniesie\u0144 mozna wykrzysta\u0107 EndNote , Mendeley , RefWorks , W biznesie wystarczy do\u0142\u0105czyc hiper\u0142\u0105cze do \u017ar\u00f3d\u0142a. Nale\u017cy kierowa\u0107 si\u0119 \u017ce informacje s\u0105 \u0142atwe do zdobycia. Write precise and clear reports Raport powinien byc nie tylko powtarzalny ale przedewszystkim jasny i zrozumia\u0142y. Raport powinien by\u0107: - jasny - precyzyjny - nie wprowadza\u0107 w b\u0142\u0105d i zamieszanie, - \u0142atwe do zrozumienia przes\u0142anie Powinni\u015bmy unika\u0107 pustych frazes\u00f3w nie daja one znaczenia oraz informacji. Nale\u017cy unika\u0107 sformu\u0142owa\u0144: - warto zauwa\u017cy\u0107 \u017ce, - fakt, \u017ce - nale\u017cy podkre\u015bli\u0107, \u017ce - jak powszechnie wiadomo, - jest to oczywiste. Puste frazesy rozpraszaja i nalezy ich unika\u0107. Trzeba by\u0107 bezpo\u015bredni i rzeczowym. W skr\u00f3cie je\u015bli tekst nic nie dodaje informacji nale\u017cy go usun\u0105\u0107. Pisanie techniczne jest zwiez\u0142e i bezpo\u015brednie. Powinni\u015bmy pisa\u0107 konkretne rzeczowniki i unika\u0107 nadu\u017cywania zaimk\u00f3w to, tamto itp, bo powoduj\u0105 one \u017ce nie wiadomo do czego sie one odnosz\u0105. \u015aledzenie co oznaczaj\u0105 zaimki obci\u0105\u017ca swiadomo\u015b\u0107 poznawcz\u0105 co odwraca uwag\u0119 czytelnik\u00f3w od rzeczywistego problemu. G\u0142os aktywny czyli koncentrujemy si\u0119 na aktorze a nie nad faktami. Wykorzystuje si\u0119 go w biznesie. G\u0142os bierny krytykowany jest za zbyt duszny i trudniejszy do odczytania. Wykorzystuje si\u0119 w j\u0119zyku akademickim. Przy podkresleniu argumentu \u0142atwo jest u\u017cy\u0107 zbednych przymiotnik\u00f3w i przys\u0142\u00f3wk\u00f3w. Nale\u017cy d\u0105\u017cy\u0107 do ich ograniczenia a nawet do ich eliminacji. Nale\u017cy unika\u0107 d\u0142ugich zda\u0144 pozwoli to na unikniecie b\u0142edow jezykowych jak i lepsze zrozumienie tematu. Nalezy unika\u0107 przecinka w formu\u0142owaniu wniosk\u00f3w. Powini\u015bmy wprowadzi\u0107 takie s\u0142owa jak: poniewa\u017c, bo. Case study: report on credit risk Story Napoczatku tworzymy historie i skupiamy si\u0119 na tle. np. W ci\u0105gu 5 lat nastapi\u0142 wzrost odsetka klient\u00f3w zalegaj\u0105cych ze sp\u0142at\u0105. Bank postanowi\u0142 zainteresowa\u0107 si\u0119 przewidywaniem, kt\u00f3rzy klienci maj\u0105 wysokie prawdopodobe\u0144stwo niewyp\u0142acalno\u015bci. Po przeanalizowaniu danych widac \u017ce osoby z d\u0142u\u017cszym okresem bezrobocia cze\u015bciej splacaj\u0105 zobowi\u0105zania. Ponadto m\u0142odsi ludzie o ni\u017cszych dochodach cz\u0119\u015bciej sp\u0142acaj\u0105 zobowiazania. Po przetrenowaniu modelu jeste\u015bmy wstanie powiedzie\u0107, ktore osoby s\u0105 sk\u0142onne do niewyp\u0142acalno\u015bci z dok\u0142adno\u015bci\u0105 do 95%. Nast\u0119pnym krokiem powinno by\u0107 przeprowadzenie pr\u00f3by na kontrolowanej populacji. Tech or noc-tech Mamy wyniki terez trzeba przet\u0142umaczy\u0107 wyniki techniczne dla interesariuszy nietechnicznych. The right data Kto jkest naszym odbiorc\u0105 czyli dla kogo raportujemy: dla dyrektora, kt\u00f3ra decyduje za wdro\u017ceniem automatycznego systemu odrzucania po\u017cyczek, przy wykorzystaniu naszego modelu. Zglaszamy wiec zaleznosc mi\u0119dzy wiekiem czy dochodem a kredytem. Dodatkowo prognozujemy odsetek niewywi\u0105zuj\u0105cych si\u0119 klientow w ci\u0105gu najbli\u017cszych miesi\u0119cy. W tym zakresie pokazujemy \u015bredni wiek i doch\u00f3d klientow niewywi\u0105zuj\u0105cych sie z platnosciami w porownaniu z klientami wyp\u0142acalnymi. Przedstawiamy liczb\u0119 klient\u00f3w zalegaj\u0105cych ze splata w czasie (to jest procent zmiany). Wizualizacja Do\u0142\u0105czamy wykres pudelkowy pokazujacy wiek lub doch\u00f3d tych co s\u0105 wyp\u0142acalni lub nie. Przedstawiamy wykres liniowy przedstawiaj\u0105cy procentow\u0105 zmian\u0119 liczby klientow zalegaj\u0105cych ze splat\u0105 w ci\u0105gu nast\u0119pnych miesi\u0119cy. Prezentacja Podsumowywuj\u0105c: who? - raportujemy dla dyrektora dzialu finansowego, why? - bo ma wazn\u0105 decyzj\u0119 do podj\u0119cia, content Jest zainteresowana naszymi klucowymi ustaleniami i rekomendacjami channel - przes\u0142anie e-mailem ustale\u0144 przed spotkaniem Powy\u017csze prowadza nas do stworzenia pisemnego raportu. Dla osob nie-technicznych wybieramy raport podsumowujacy, dla technicznych raport ko\u0144cowy. Ma to by\u0107 raport informacyjny czy analityczny? Przedstawiamy nie tylko fakty ale tak\u017ce analizy tak wi\u0119c odpowiednim wyborem b\u0119dzie raport analityczny. Jaka jest struktura tego raportu: najpierw podsumowujemy cel naszego raportu, dodajemy kontekstowe informacje o celu naszego projektu, podajemy pytania analityczne W rozwini\u0119ciu opisujemy dane ale zawieramy tylko kluczowe ustalenia w sekcji wynik\u00f3w. W podsumowaniu ponownie przedstawiamy pytania \u0142aczac je z naszymi ustaleniami i dodajemy nasze rekomendacje. Planning an oral presentation Warto zaplanowa\u0107 co ma byc w prezentacji niz robic to na o\u015blep. Dobra prezentacja uwzglednia: - zamiar - rozmiar publiczno\u015bci, - wiadomo\u015b\u0107, kt\u00f3r\u0105 chcemy przekaza\u0107, Zamiar Typy prezentacji: - informacyjna - instrukta\u017cowa wyjasnia w jaki spos\u00f3b zbudowano model analizy - przekonywuj\u0105ca Publiczno\u015b\u0107 Kto jest odbiorc\u0105? Jak du\u017ca jest publiczno\u015b\u0107? Widomo\u015b\u0107 Nasza publiczno\u015b\u0107 zapomni 90% prezentacji tydzie\u0144 po jej obejrzeniu. Trzeba zrobi\u0107 tak by zapamietali jedn\u0105 rzecz z prezentacji. Otwarto\u015b\u0107 Przyciagn\u0105\u0107 nasz\u0105 publiczno\u015b\u0107 i przedstawi\u0107 jedn\u0105 rzecz, ktor\u0105 chcemy aby odbiorcy zapami\u0119tali. Ma to by\u0107 jedno zdanie. Podsumowanie, kt\u00f3re podsumuje prezentacj\u0119 i wzmacnia g\u0142\u00f3wny przekaz. Struktura Zaczynamy od wst\u0119pu. Powinni\u015bmy przekaza\u0107 pewne podstawowe informacje. Powinny one przykuwa\u0107 uwag\u0119 naszych s\u0142uchaczy i dawa\u0107 im wglad w nasza prezentacje. Mo\u017cemy zag\u0142\u0119bi\u0107 si\u0119 w metody, analizy oraz w wyniki modeli. Wyciagni\u0119cie wniosk\u00f3w, dodania wezwania do dzialania lub rekomendacji dalszych krok\u00f3w. Sluchacze sa uwa\u017cni na pocz\u0105tku i na ko\u0144cu naszego wyst\u0105pienia. Zarys Przedstawienie wykres\u00f3w i wizualizacji, kt\u00f3re chcemy u\u017cy\u0107. Trzeba zaplanowa\u0107, kt\u00f3re sekcje b\u0119d\u0105 nam potrzebne i ich kolejno\u015b\u0107. Powinno by\u0107 maksymalnie 5 sekcji. Wi\u0119ksza ich liczba utrudnia utrzymanie uwagii odbiorc\u00f3w.: Te sekcje to: - pow\u00f3d analizy, - analiza eksploracyjna, - analiza nastroj\u00f3w, - wnioski, - dzia\u0142ania nast\u0119pcze. Building presentation slides Slajdy powinny wspierac histori\u0119, kt\u00f3r\u0105 przekazujemy. Powinni\u015bmy pami\u0119ta\u0107 o naszych zdolnosciach uwagi odbiorc\u00f3w. Slajdy nie powinny by\u0107 zawalone tre\u015bci\u0105. Nie powinni\u015bmy przejmowa\u0107 sie czasem sp\u0119dzonym na poszczegolnym slajdzie. Za to powinnismy mie\u0107 jedn\u0105 wiadomo\u015b\u0107 na slajd. Sprawi to ze sprawy b\u0119d\u0105 kr\u00f3tkie i p\u0142ynne. Odbiorcy moga przyswoi\u0107 tylko pewn\u0105 ilo\u015b\u0107 informacji naraz. Pr\u00f3ba wytlumaczenia wielu informacji jednocze\u015bnie zwi\u0119kszy obci\u0105\u017cenie poznawcze, zaciemniaj\u0105 nasz przekaz i spowoduje \u017ce nasi sluchacze przeocz\u0105 niekt\u00f3re kluczowe punkty. Formatowanie moze doprowadzi\u0107 do zaciemnienia przekazu. Jedna z technik jest kolor. Wszystko co prezentujesz powinno przekazywa\u0107 znaczenie. Powi\u015bmy zwracac uwag\u0119 na to aby nasza prezetacja byla tak\u017ce dobrze odbierana przez osoby z niepe\u0142nosprawnosciami, np wykres zielony z czerwonym. Czcionki r\u00f3wnie\u017c wplywaja na czytelno\u015b\u0107. Badania nie okre\u015blaj\u0105 jednoznacznie kt\u00f3ry kroj czcionki jest \u0142atwiejszy do odczytania czy to bedzie szeryfowa czy bezszeryfowa. Praktyk\u0105 jest aby tekst bezszeryfowy by\u0142 odpowiedni dla tekstu, ktory b\u0119dzie czytany na ekranie . Szeryfowa jest dobra gdy tekst b\u0119dzie drukowany . Slajd powinien by\u0107 o tym o czym m\u00f3wimy. Nale\u017cy stara\u0107 si\u0119 by tekst byl kr\u00f3tki ale za to du\u017cy. Formatowanie tekstu jest wa\u017cne ale nie mo\u017cna przesadza\u0107 bo to odwr\u00f3ci uwag\u0119 naszych odbiorc\u00f3w. Slajdy nie powinny zawiera\u0107 du\u017cej ilosci tekstu. Ludzie maja tendencj\u0119 do czytania slajdu a nie do s\u0142uchania. Zamiast d\u0142ugiego tekstu powinni\u015bmy napisa\u0107 g\u0142owne punkty wspieraj\u0105ce nasze przes\u0142anie. Slajdy sa tylko wsparciem. Slajdy nie s\u0105 zbudowane do konsumcji bez prezentera. Nie powinno byc copy paste slajdu z prezentacji do raportu. Nagl\u00f3wek slajdu pozwala na przekonanie odbiorc\u00f3w na zwr\u00f3cenie uwagi. Nagl\u00f3wek powinien podkresla\u0107 g\u0142\u00f3wny punkt slajdu. Powinien by\u0107 zwi\u0119z\u0142y, konkretny i widoczny dzi\u0119ki wi\u0119kszej czcionce. Warstwy to pot\u0119\u017cne narz\u0119dzie, kt\u00f3ry dzieli slajd na mniejsze punkty. Powinnismy miec czysty slajd o lepszej strukturze. U\u0142atwi to skupienie si\u0119 na ka\u017cdej cze\u015bci z osobna. Ka\u017cdy pukt powinien by\u0107 wyja\u015bniany osobno. Na ko\u0144cu wy\u015bwietlamy wszystko razem. Takie podej\u015bcie pozwala na skupienie uwagi odbiorc\u00f3w. Gdy uzywamy zdyt du\u017cej ilo\u015bci tekstu powinni\u015bmy zast\u0105pi\u0107 go wykresem. Warstwowanie mo\u017cemy zastosowa\u0107 tak\u017ce dla wykres\u00f3w. Wy\u015bwietlajac kazdy z nich osobno a na ko\u0144cu \u0142aczyc je. Na slajdzie powinno znajdowa\u0107 sie maksymalnie dwa slajdy. Delivering the presentation Slajdy powinny wspiera\u0107 historie kt\u00f3r\u0105 chcemy przkaza\u0107. W celu dobrego przygotowania si\u0119 do prezentacji nale\u017cy napisac scenariusz. Uzywa\u0107 go jako przewodnik i spostrze\u017cenia. Powinnismy przewidywa\u0107 pytania od odbiorc\u00f3w i zastanawia\u0107 si\u0119 nad odpowiedziami na nie. Nie kt\u00f3re rzeczy nie brzmi\u0105 tak dobrze w mowie jak to by\u0142ow formie pisemnej. Powinni\u015bmy \u0142\u0105czy\u0107 w mowie kolejne slajdy mi\u0119dzy sob\u0105. Dodatkowo powinni\u015bmy prze\u0107wiczyc odpowiadania na pytania, kt\u00f3re przewidywali\u015bmy. Kilkukrotne prze\u0107wiczenie naszej prezentacji to skuteczny spos\u00f3b na zapoznanie si\u0119 z naszymi tre\u015bciami. Podczas prezentacji powinnismy zwraca\u0107 nasz\u0105 \u015bwiadomo\u015b\u0107 na nasze emocje. Mowa cia\u0142a ma ogromne znaczenie. Odbiorcy potrafi\u0105 utrzyma\u0107 uwag\u0119 od 5 do 20 minut. Trzeba robi\u0107 wszystko by anga\u017cowa\u0107 odbiorc\u00f3w w nasz\u0105 prezentacj\u0119. Mo\u017cemy to zrobi\u0107 po przez kontakt wzrokowy, interaktywno\u015b\u0107, zadaj\u0105c im pytania. Trzeba budowa\u0107 relacj\u0119 z publiczno\u015bci\u0105 trzeba okazywa\u0107 empati\u0119 oraz trzeba by\u0107 przewodnikiem. Powinni\u015bmy unika\u0107 s\u0142\u00f3w \"jak wiesz\" czy \"oczywiscie\". U\u017cywanie takich s\u0142\u00f3w spowoduje, \u017ce odbiorcy nie b\u0119d\u0105 chcieli zadawa\u0107 pyta\u0144. Trzeba robi\u0107 przerwy. Natomiast je\u015bli sprawa jest pilna mo\u017cemy m\u00f3wi\u0107 troch\u0119 szybciej. Po przekazaniu idei nalezy zatrzymac sie na moment i da\u0107 widzom czas do namys\u0142u. Powinni\u015bmy by\u0107 otwarci na pytania wtrakcie lub na ko\u0144cu prezentacji. W przedstawianiu prezentacji powinni\u015bmy: - rozmawia\u0107 z publiczno\u015bci\u0105, - mniej znaczy wi\u0119cej, - przekaz powinien by\u0107 sp\u00f3jny i trwa\u0142y, - byc gotowi na pytania. B\u0142\u0119dy w prezentacji W celu przygotowania dobrej prezentacji powinni\u015bmy zaplanowa\u0107 to co zamierzamy zaprezentowa\u0107: - unika\u0107 d\u0142ugich prezentacji, - publiczno\u015b\u0107 ma pewien zakres uwagi, - po\u015bwi\u0119ca\u0107 czas na pytania odbiorc\u00f3w, - podawa\u0107 cel prezentacji na pocz\u0105tku, - m\u00f3wcy powinni utzymywa\u0107 uwag\u0119 naszych odbiorc\u00f3w, - Wnioski powinny by\u0107 w ca\u0142ej prezentacji a nie tylko na ko\u0144cu, - unika\u0107 monologu, - angazowa\u0107 odbiorc\u00f3w, - powinni\u015bmy okresla\u0107 nasze kluczowe za\u0142o\u017cenia, - zadawanie pyta\u0144 w trakcie prezentacji, - trzyma\u0107 si\u0119 tematu, - u\u017cywa\u0107 ruchu r\u0105k, - u\u017cywa\u0107 r\u00f3\u017cnych tonacji g\u0142osu by podkresla\u0107 przekaz, - r\u00f3\u017cnicowa\u0107 szybkosc m\u00f3wienia, - przedstawia\u0107 nowe pomy\u015b\u0142y i nowe rozwi\u0105zania, - zaanga\u017cowanie w prezentacj\u0119. Import Data Reading file filename = 'huck_finn.txt' file = open ( filename , mode = 'r' ) #'r' is to read text = file . read () file . close () Powy\u017cszy kod s\u0142u\u017cy do odczytu pliku. Argument r gwarantuje \u017ce plik sluzy tylko do odczytu. text = file.read() - zapis jako jeden ci\u0105g znak\u00f3w. Zapis do pliku filename = 'huck_finn.txt' file = open ( filename , mode = 'w' ) file . close () Mo\u017cna unikn\u0105\u0107 koniecznosci zamykania po\u0142\u0105czenia z plikiem wykorzystuj\u0105c operator with with open ( 'huck_finn.txt' , 'r' ) as file : text = file . read () Dzi\u0119ki wykorzystaniu with mozliwe jest tworzenie kontekstu, kt\u00f3ry umo\u017cliwa wykonywanie polece\u0144 przy otwartym pliku. Po wyjsciu z tego plik nie jest u\u017cywany. Nazywa si\u0119 to menadzerem kontekstu. Import of flat files Pliki p\u0142askie(flat files) to pliki tekstowe zawierajace rekordy bez relacji strukturalnych (czy nie jak w bazach danych). Czyli nie mo\u017cemy powiazac kolumny r\u00f3\u017cnych tabel. Warto\u015bci w plikach p\u0142askich oddziela si\u0119 znakami lub ciagami znak\u00f3w takimi jak przecinki, tabulatory. Importing flat files using NumPy Tablice NumPy sa standardem do przechowywania danych liczbowych. S\u0105 szybkie i s\u0105 czyste. Wykorzytywane sa do pakietu scikit-learn, kt\u00f3ry jest popularny do uczenia maszynowego. NumPy posiada wiele wbudowanych funkcji, kt\u00f3re u\u0142atwiaj\u0105 i usprawniaj\u0105 importowanie danych: loadtxt() , genfromtxt() import numpy as np filename = 'MNIST.txt' data = np . loadtxt ( filename , delimiter = ',' ) data Domy\u015blnym ogranicznikiem jest spacja wi\u0119c trzeba okre\u015bli\u0107 ogranicznik jawnie. Je\u015bli chcemy pomin\u0105c dany wiersz to u\u017cywamy parametru skiprows . Je\u015bli chcemy wybrane kolumny to u\u017cywamy usecols import numpy as np filename = 'MNIST.txt' data = np . loadtxt ( filename , delimiter = ',' , skiprows = 1 , usecols = [ 0 , 2 ]) print ( data ) Mo\u017cna importowa\u0107 wy\u0142\u0105cznie dane okre\u015blonego typu. data = np . loadtxt ( filename , delimiter = ',' , dtype = str ) loadtxt ma wad\u0119 gdy importujemy dane r\u00f3\u017anego typu. Importing flat files using pandas Czym si\u0119 r\u00f3\u017cni\u0105 macierze od ramek danych? Macierze maj\u0105 wiersze i kolumny. Ramki danych posiadaj\u0105 obserwacje i zmienne. Importowanie plik\u00f3w w Pandas import pandas as pd filename = 'winequality-red.csv' data = pd . read_csv ( filename ) data . head () data.head() wy\u015bwietli pierwsze pi\u0119\u0107 wierszy. Mo\u017cna konwertowa\u0107 ramk\u0119 danych do macierzy NumPy. data_array = data . to_numpy () Key arguments for pd.read_csv() include: sep sets the expected delimiter. You can use ',' for comma-delimited. You can use '\\t' for tab-delimited. comment takes characters that comments occur after in the file, indicating that any text starting with these characters should be ignored. na_values takes a list of strings to identify as NA/NaN . By default, some values are already recognized as NA/NaN . Providing this argument will supply additional values. Introduction to other file types Python potrafi oddczyta\u0107 opr\u00f3cz plik\u00f3w *.csv i *.txt tak\u017ce: Excel MATLAB SAS (Statistical Analysis System) Stata (\"Statistics\" + \"data\") HDF5 Python posiada tak\u017ce w\u0142asne rozszerzenie kt\u00f3re u\u017cywa jest to pickled s\u0105 one zapisywane w formacie binarnym. Mo\u017cna nim zapisywa\u0107 r\u00f3\u017cne rodzaje typ\u00f3w zmiennych. Otwieranie pliku pickle ( pkl ): Warto zauwa\u017cy\u0107 \u017ce wykorzystano argument 'rb', kt\u00f3ry s\u0142u\u017cy do czytania plik\u00f3w binarnych. import pickle with open ( 'pickled_fruit.pkl' , 'rb' ) as file data = pickle . load ( file ) print ( data ) Importowanie danych z Excela import pandas as pd file = 'urbanpop.xlsx' data = pd . ExcelFile ( file ) print ( data . sheet_names ) # ['1960-1966', '1967-1974', '1975'] df1 = data . parse ( '1960-1966' ) df2 = data . parse ( 0 ) df1, df2 - wskazanie danego arkusza w excelu. Mo\u017cna wy\u015bwietli\u0107 po nazwie arkusza albo indexie. The spreadsheet 'battledeath.xlsx' is already loaded as xls . As before, you'll use the method parse() . This time, however, you'll add the additional arguments skiprows , names and usecols . These skip rows, name the columns and designate which columns to parse, respectively. All these arguments can be assigned to lists containing the specific row numbers, strings and column numbers, as appropriate. Import SAS files import pandas as pd from sas7bdat import SAS7BDAT with SAS7BDAT ( 'urbanpop.sas7bdat' ) as file df_sas = file . to_data_frame () Import Stata files import pandas as pd data = pd . read_stata ( 'urbanpop.dta' ) Import HDF5 Format pliku kt\u00f3ry przeechowuje du\u017co danych. Mo\u017cna skalowa\u0107 do setek eksabajt\u00f3w. import h5py filename = 'H-H1_LOSC_4_V1-815411200-4096.hdf5' data = h5py . File ( filename , 'r' ) print ( type ( data )) Struktura plik\u00f3w HDF5 Grupy (Groups) \u2013 Dzia\u0142aj\u0105 jak katalogi, organizuj\u0105c dane w logiczny spos\u00f3b. Datasety (Datasets) \u2013 Macierze numeryczne przechowywane w pliku. Atrybuty (Attributes) \u2013 Dodatkowe informacje przypisane do grup i dataset\u00f3w. Ma hierarchiczn\u0105 struktur\u0119. for key in data . keys (): print ( key ) print ( np . array ( data [ 'meta' ][ 'Description' ]), np . array ( data [ 'meta' ][ 'Detector' ])) Import MATLAB Wykorzystujemy do tego bibliotek\u0119 SciPy , gdzie do odczytu u\u017cywamy scipy.io.loadmat() a do zapisu scipy.io.savemat() Importowany plik MATLAB mo\u017ce zawiera\u0107 zar\u00f3wno zmienne, komentarze, listy, macierze. import scipy.io filename = 'workspace.mat' mat = scipy . io . loadmat ( filename ) print ( type ( mat )) #<class 'dict'> Dane s\u0105 zapisywane w s\u0142owniku. Klucze slownika to nazwy zmiennych MATLAB, a warto\u015bci s\u0142ownika Pythona to obiekty przypisane do zmiennych. Na przyk\u0142ad: print ( type ( mat [ 'x' ])) #<class 'numpy.ndarray'> Itrodution to relational databases Bazy danych skladaja sie z tabel po\u0142\u0105czonych miedzy sob\u0105 relacjami. Ka\u017cda tabela to zbi\u00f3r istancji/obiekt\u00f3w/byt\u00f3w kt\u00f3re maja okreslone atrybuty. W wierszach zapisujemy obiekty natomiast w kolumnach atrybuty. Ka\u017cdy wiersz posiada unikalny identyfikator znany jako klucz podstawowy. //TO DO Ka\u017cdy wiersz lub rekord w tabeli reprezentuje instancj\u0119 typu encji. Ka\u017cda kolumna w tabeli reprezentuje atrybut lub cech\u0119 instancji. Ka\u017cda tabela zawiera kolumn\u0119 klucza podstawowego, kt\u00f3ra ma unikalny wpis dla ka\u017cdego wiersza. Istniej\u0105 relacje mi\u0119dzy tabelami. // TO DO 12 przykaza\u0144 Codda - relacyjne bazy danych. Creating a database engine in Python Bedziemy pobiera\u0107 dane z naszych baz danych SQL. Aby uzyska\u0107 dost\u0119p do baz danych z wykorzystaniem Pythona wykorzystujemy: - sqlite3 - SQLAlchemy sqlite3 wsp\u00f3\u0142pracuje tylko z SQLite. Natomiast SQLAlchemy wsp\u00f3\u0142pracuje z wieloma rodzajami baz danych takimi jak Postgres i MySQL. Uruchamiamy silnik SQL, kt\u00f3ry przeka\u017ce nasze wyniki zapyta\u0144 do bazy danych. from sqlalchemy import create_engine engine = create_engine ( 'sqlite:///Northwind.sqlite' ) Nazwy kolumn w tabeli mo\u017cna pozna\u0107 z wykorzystaniem: table_names = engine . table_names () print ( table_names ) Querying relational databases in Python Tworzenie zapytan do SQL. SELECT * FROM Table_Name SELECT * FROM Orders * - gwiazdka oznacza wszystkie kolumny. W SQLAlchemy tworzymy zapytania w nast\u0119puj\u0105cy spos\u00f3b: - importujemy pakiety i funkcje, - tworzymy silnik, - po\u0142\u0105czenie z nim, - zapytanie do bazy danych, - zapisanie danych - zamkniecie zapytania. Przyk\u0142adowe zapytanie: from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Nortwind.sqlite' ) con = engine . connect () rs = con . execute ( \"SELECT * FROM Orders\" ) df = pd . DataFrame ( rs . fetchall ()) con . close () fetchall odpowiada za pobieranie wierszy w tabeli. Powy\u017csze zapytanie jest niedopracowane ze wzgledu na brak nazw kolumn. Trzeba to doda\u0107 znawanie kolumn df.columns = rs.keys() . from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Nortwind.sqlite' ) con = engine . connect () rs = con . execute ( \"SELECT * FROM Orders\" ) df = pd . DataFrame ( rs . fetchall ()) df . columns = rs . keys () con . close () Powy\u017csze zapytanie mo\u017cna zmieni\u0107 dodaj\u0105c menadzera kontekstu with . from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Nortwind.sqlite' ) with engine . connect () as con : rs = con . execute ( \"SELECT OrderID, OrderDate, ShipName FROM Orders\" ) df = pd . DataFrame ( rs . fetchmany ( size = 5 )) df . columns = rs . keys () fetchmany(size=5) importuje tylko 5 wierszy. Powy\u017csze zapytanie mo\u017cna zrobic krocej i zrobi\u0107 to w jednej linijce: df = pd . read_sql_query ( \"SELECT * FROM Orders\" , engine ) INNER JOIN in Python(pandas) INNER JOIN sluzy do \u0142\u0105czenia tabel. from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Northwind.sqlite' ) df = pd . read_sql_query ( \"SELECT OrderID, CompanyName FROM Orders INNER JOIN Customers on Orders.CustomerID = Customers.CustomerID\" , engine ) print ( df . head ()) Cleaning Data in Python Data type constraints","title":"Data Science"},{"location":"DataScience/DataScience/#data-science","text":"sprawdzenie typu zmiennej type ( nazwa_zmiennej )","title":"Data Science"},{"location":"DataScience/DataScience/#zmienne","text":"int - typ zmiennej ca\u0142kowitej float - typ zmiennej u\u0142amkowej str - typ zmiennej \u0142a\u0144cuchowej (string) czyli text bool - typ wartos\u0107 logiczna True/False","title":"zmienne"},{"location":"DataScience/DataScience/#lista","text":"Zbi\u00f3r danych zapisanych pod nazw\u0105 zmiennej. W pythonie mo\u017cna zapisywa\u0107 r\u00f3\u017cne typy zmiennej do tej samej tablicy. Mo\u017cna zapisywa\u0107 listy w listach. hall = 11.25 kit = 18.0 liv = 20.0 bed = 10.75 bath = 9.50 # House information as list of lists house = [[ \"hallway\" , hall ], [ \"kitchen\" , kit ], [ \"living room\" , liv ], [ \"bedroom\" , bed ], [ \"bathroom\" , bath ]] # Print out house print ( house )","title":"Lista"},{"location":"DataScience/DataScience/#indeksowanie-elementow-tablicy","text":"Indeksowanie element\u00f3w tablicy zaczyna si\u0119 od liczby 0. # Create the areas list areas = [ \"hallway\" , 11.25 , \"kitchen\" , 18.0 , \"living room\" , 20.0 , \"bedroom\" , 10.75 , \"bathroom\" , 9.50 ] # Print out second element from areas print ( areas [ 1 ]) #Output #11.25 Indeks -1 oznacza ostatni element w tablicy. # Print out last element from areas print ( areas [ - 1 ]) #Output #9.5 Mo\u017cna wykorzysta\u0107 przedzia\u0142, jaki chcemy, aby zosta\u0142 wy\u015bwietlony. Zwracany s\u0105 elementy nieuwzgl\u0119dniaj\u0105cego ostatniego podanego indeksu. Mo\u017cna zwr\u00f3ci\u0107 elementy do konkretnego indeksu lub od konkretnego indeksu. #U\u017cyj krojenia, aby utworzy\u0107 list\u0119, downstairs, kt\u00f3ra zawiera 6 pierwszych #element\u00f3w obszar\u00f3w. downstairs = areas [: 6 ] #Output #['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0] #Utw\u00f3rz g\u00f3r\u0119, jako ostatnie 4 elementy obszar\u00f3w. Tym razem upro\u015b\u0107 ci\u0119cie, pomijaj\u0105c #indeks ko\u0144cowy. upstairs = areas [ 6 :] #Output #['bedroom', 10.75, 'bathroom', 9.5] Podzbiory Lista Pythona mo\u017ce r\u00f3wnie\u017c zawiera\u0107 inne listy. Do podzbioru list list mo\u017cna u\u017cy\u0107 tej samej techniki, co poprzednio: nawias\u00f3w kwadratowych. Wygl\u0105da\u0142oby to mniej wi\u0119cej tak dla listy, house: #Subset the house list to get the float 9.5. house = [[ \"hallway\" , 11.25 ], [ \"kitchen\" , 18.0 ], [ \"living room\" , 20.0 ], [ \"bedroom\" , 10.75 ], [ \"bathroom\" , 9.50 ]] # Subset the house list house [ - 1 ][ 1 ] #Output #9.5 Zmiana warto\u015bci w li\u015bcie Mo\u017cna dokona\u0107 zmiany warto\u015bci w li\u015bcie przypisuj\u0105c jej jak\u0105\u015b warto\u015b\u0107. areas = [ \"hallway\" , 11.25 , \"kitchen\" , 18.0 , \"living room\" , 20.0 , \"bedroom\" , 10.75 , \"bathroom\" , 9.50 ] areas [ - 1 ] = 10.50 areas [ 4 ] = \"chill zone\" Mo\u017cna tak\u017ce przypisa\u0107 warto\u015bci do kilku wybranych indeks\u00f3w. areas [ 2 : 4 ] = [ \"garage\" , 14.45 ] Mo\u017cna tak\u017ce dopisa\u0107 nowe elementy do istniej\u0105cej tablicy areas_1 = areas + [ \"poolhouse\" , 24.5 ] Mo\u017cna tak\u017ce usuwa\u0107 elementy z listy. del areas [ 10 : 12 ] #Output # 'hallway', 11.25, 'kitchen', 18.0, 'chill zone', 20.0, 'bedroom', 10.75, # 'bathroom', 10.5, 'garage', 15.45] Jak jest zmienna to ona przechowuje wska\u017anik na list\u0119. Zapisanie tablicy pod now\u0105 zmienn\u0105 y x = [ \"a\" , \"b\" , \"c\" ] y = x y [ 1 ] = \"z\" y #Output #['a', 'z','c'] x #Output #['a', 'z','c'] Spowoduje skopiowanie odniesienia do listy, a nie same warto\u015bci. Wskazuje ona na to samo miejsce w pami\u0119ci Aby wskaza\u0107 inne miejsce w pami\u0119ci nale\u017cy u\u017cy\u0107 funkcji listy. x = [ \"a\" , \"b\" , \"c\" ] y = list ( x ) y = x [:] y [ 1 ] = \"z\" x #Output #['a', 'b','c'] x #Output #['a', 'z','c']","title":"Indeksowanie element\u00f3w tablicy"},{"location":"DataScience/DataScience/#funkcje","text":"Fragment kodu, kt\u00f3ry mo\u017cna wykorzystywa\u0107 wielokrotnie. Agregacje max() - znajduje maksymalna warto\u015b\u0107 min() - znajduje minimaln\u0105 warto\u015b\u0107 round() - zaokr\u0105gla len() - zwraca d\u0142ugo\u015b\u0107 tablicy append() - dodaje warto\u015b\u0107 na ko\u0144cu listy remove() - usuwa pierwszy argument z listy reverse() - odwraca list\u0119 index() - zwraca warto\u015b\u0107 indeksu, na kt\u00f3rym znajduje si\u0119 dany element count() - zlicza wyst\u0105pienia danego argumentu wgl\u0105d do dokumentacji help ( nazwa_funkcji ) # LUB ? nazwa_funkcji Zwracanie indeksu areas = [ \"hallway\" , 11.25 , \"kitchen\" , 18.0 , \"living room\" , 20.0 , \"bedroom\" , 10.75 , \"bathroom\" , 9.50 ] areas . index ( \"kitchen\" ) #Output #2 Zliczenie ile razy w tablicy pojawi\u0142 si\u0119 dany argument areas . count ( 11.25 ) #Output #1 Zmiana pierwszej litery na du\u017c\u0105 liter\u0119 sister #Output #'liz' sister . capitalize () #Output #'Liz' Zmiana niekt\u00f3rych cz\u0119\u015bci w ci\u0105gu innymi cz\u0119\u015bciami sister . replace ( \"z\" , \"sa\" ) #Output #lisa Metody mog\u0105 si\u0119 zachowywa\u0107 inaczej dla innego rodzaju obiektu.","title":"Funkcje"},{"location":"DataScience/DataScience/#pakiet-numpy","text":"//TO DO Opisa\u0107 to bardziej S\u0142u\u017cy do wykonywania skomplikowanych oblicze\u0144 w Pythonie. Wykonywanie oblicze\u0144 na zwyk\u0142ej li\u015bcie by\u0142o bardzo nieefektywne i by\u0142o bardzo czasoch\u0142onne i bardzo skomplikowane. #instalacja pip3 install numpy R\u00f3\u017cnice mi\u0119dzy u\u017cywaniem NumPy oraz nie. height = [ 1.73 , 1.68 , 1.71 , 1.89 , 1.79 ] weight = [ 65.4 , 59.2 , 63.6 , 88.4 , 68.7 ] weight / height ** 2 #Output #TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int' Wykorzystanie NumPy np_height = np . array ( height ) np_weight = np . array ( weight ) np_weight / np_height ** 2 #Output #array([21.85171573, 20.97505669, 21.75028214, 24.7473475 , 21.44127836]) R\u00f3\u017cnice w dodawaniu tablic python_list = [ 1 , 2 , 3 ] numpy_array = np . array ([ 1 , 2 , 3 ]) python_list + python_list #Output # [1, 2, 3, 1, 2, 3] numpy_array + numpy_array #Output #array([2, 4, 6]) np . array ([ True , 1 , 2 ]) + np . array ([ 3 , 4 , False ]) #Output #np.array([4, 3, 0]) + np.array([0, 2, 2]) Wy\u015bwietlanie wato sci kt\u00f3re spe\u0142niaja warunek bmi = array ([ 21.85171573 , 20.97505669 , 21.75028214 , 24.7473475 , 21.44127836 ]) Dost\u0119p do elementu Kod : bmi [ 1 ] #Output #Wynik: 20.975 Warunkowe filtrowanie Kod : bmi > 23 #Output #array([False, False, False, True, False]) Elementy spe\u0142niaj\u0105ce warunek bmi [ bmi > 23 ] #Output #array([24.7473475])","title":"Pakiet NumPy"},{"location":"DataScience/DataScience/#dwuwymiarowe-tablice","text":"Okre\u015blenie ile tablica ma wierszy i kolumn wykorzystuje si\u0119 metod\u0119 shape Zwracanie elementu w tablicy dwuwymiarowej np_2d [ 0 ][ 2 ] #LUB np_2d [ 0 , 2 ] #Wy\u015bwietlenie tylko drugiej i trzeciej kolumny np_2d [:, 1 : 3 ] #Piewszy argument to wiersz a drugi to kolumna","title":"Dwuwymiarowe tablice"},{"location":"DataScience/DataScience/#intermediate-python","text":"","title":"Intermediate Python"},{"location":"DataScience/DataScience/#matplot","text":"lineplot import matplotlib.pyplot as plt year = [ 1950 , 1970 , 1990 , 2010 ] pop = [ 2.519 , 3.692 , 5.263 , 6.972 ] plt . plot ( year , pop ) plt . show () Scatter Plot import matplotlib.pyplot as plt year = [ 1950 , 1970 , 1990 , 2010 ] pop = [ 2.519 , 3.692 , 5.263 , 6.972 ] plt . scatter ( year , pop ) plt . show () Skala logarytmiczna plt . xscale ( 'log' )","title":"Matplot"},{"location":"DataScience/DataScience/#histogramy","text":"Je\u015bli potrzebujemy pomocy z funkcj\u0105 i znale\u017a\u0107 o niej informacj\u0119 nale\u017cy skorzysta\u0107 z poni\u017cszej komendy. Nale\u017cy pami\u0119ta\u0107, \u017ce nale\u017cy o skr\u00f3cie biblioteki. import matplotlib.pyplot as plt help ( plt . hist ) Tworzenie Histogram\u00f3w w matlib values = [ 0 , 0.6 , 1.4 , 1.6 , 2.2 , 2.5 , 2.6 , 3.2 , 3.5 , 3.9 , 4.2 , 6 ] plt . hist ( values , bins = 3 ) #Okre\u015bla ile ma by\u0107 podzia\u0142\u00f3w na wykresie plt . show () clf() tworzy nowy czysty wykres tak by dane przedstawi\u0107 na osobnym wykresie. xlabel() Umo\u017cliwiaj\u0105 dodanie opisu osi x ylabel() Umo\u017cliwiaj\u0105 dodanie opisu osi y title() Dodanie tytu\u0142y dla wykresu yticks() Dodaje te warto\u015bci na wykresie na osi y ktore chcemy wyswietlic Mo\u017cemy przypisa\u0107 nazwy do tych warto\u015bci. Nale\u017cy pami\u0119ta\u0107 o tym, aby ta lista by\u0142a tej samej d\u0142ugo\u015bci co poprzednia. plt . yticks ([ 0 , 2 , 4 , 6 , 8 , 10 ], [ '0' , '2B' , '4B' , '6B' , '8B' , '10B' ]) Mo\u017cna dodawa\u0107 nowe dane do wykresu import matplotlib.pyplot as plt # Dane z lat 1950-2100, przyk\u0142adowe warto\u015bci dla pierwszych i ostatnich lat year = [ 1950 , 1951 , 1952 , ... , 2100 ] pop = [ 2.538 , 2.57 , 2.62 , ... , 10.85 ] # Dodanie dodatkowych danych z wcze\u015bniejszych lat year = [ 1800 , 1850 , 1900 ] + year pop = [ 1.0 , 1.262 , 1.650 ] + pop plt . plot ( year , pop ) plt . xlabel ( 'Year' ) plt . ylabel ( 'Population' ) plt . title ( 'World Population Projections' ) plt . yticks ([ 0 , 2 , 4 , 6 , 8 , 10 ], [ '0' , '2B' , '4B' , '6B' , '8B' , '10B' ]) plt . show () Zmiana rozmiaru punkt\u00f3w (Ich powi\u0119kszenie) plt . scatter ( gdp_cap , life_exp , s = np_pop ) Pozwala na zmian\u0119 rozmiaru punktow by staly si\u0119 one zale\u017cne od swojego rozmiaru Caly kod() # Import numpy as np import numpy as np # Store pop as a numpy array: np_pop np_pop = np . array ( pop ) # Double np_pop np_pop = np_pop * 2 # Update: set s argument to np_pop plt . scatter ( gdp_cap , life_exp , s = np_pop ) # Previous customizations plt . xscale ( 'log' ) plt . xlabel ( 'GDP per Capita [in USD]' ) plt . ylabel ( 'Life Expectancy [in years]' ) plt . title ( 'World Development in 2007' ) plt . xticks ([ 1000 , 10000 , 100000 ],[ '1k' , '10k' , '100k' ]) # Display the plot plt . show () Rezultat Argument c w funkcji scatter oznacza dostosowanie kolor\u00f3w. Mo\u017cna doda\u0107 opisy do poszczeg\u00f3lnych punkt\u00f3w na wykresie # Scatter plot plt . scatter ( x = gdp_cap , y = life_exp , s = np . array ( pop ) * 2 , c = col , alpha = 0.8 ) # Previous customizations plt . xscale ( 'log' ) plt . xlabel ( 'GDP per Capita [in USD]' ) plt . ylabel ( 'Life Expectancy [in years]' ) plt . title ( 'World Development in 2007' ) plt . xticks ([ 1000 , 10000 , 100000 ], [ '1k' , '10k' , '100k' ]) # Additional customizations plt . text ( 1550 , 71 , 'India' ) plt . text ( 5700 , 80 , 'China' ) # Add grid() call plt . grid ( True ) # Show the plot plt . show ()","title":"Histogramy"},{"location":"DataScience/DataScience/#sowniki","text":"Je\u015bli korzystamy z list to musimy korzysta\u0107 z indeks\u00f3w co jest ma\u0142o intuicyjne oraz ma\u0142o wygodne xD. Lepsze do tego jest wykorzystanie s\u0142ownik\u00f3w. Poni\u017cej przedstawiono por\u00f3wnanie wykorzystania s\u0142ownik\u00f3w i list pop = [ 30.55 , 2.77 , 39.21 ] countries = [ \"afghanistan\" , \"albania\" , \"algeria\" ] ind_alb = countries . index ( \"albania\" ) # Wynik dla ind_alb print ( ind_alb ) # Wynik: 1 # Dost\u0119p do populacji Albanii u\u017cywaj\u0105c uzyskanego indeksu print ( pop [ ind_alb ]) # Wynik: 2.77 S\u0142ownik pop = [ 30.55 , 2.77 , 39.21 ] countries = [ \"afghanistan\" , \"albania\" , \"algeria\" ] world = { \"afghanistan\" : 30.55 , \"albania\" : 2.77 , \"algeria\" : 39.21 } print ( world [ \"albania\" ]) # Wynik: 2.77 S\u0142ownik skonstruowany jest w spos\u00f3b klucz : warto\u015b\u0107 Pozwala to unikn\u0105\u0107 . Dost\u0119p do warto\u015bci obywa si\u0119 poprzez klucz. Kolejny przyk\u0142ad stworzenia s\u0142ownika (Przyk\u0142ad pochodzi z Data Campa) # Definition of countries and capital countries = [ 'spain' , 'france' , 'germany' , 'norway' ] capitals = [ 'madrid' , 'paris' , 'berlin' , 'oslo' ] # From string in countries and capitals, create dictionary europe europe = { 'spain' : 'madrid' , 'france' : 'paris' , 'germany' : 'berlin' , 'norway' : 'oslo' } # Print europe print ( europe ) # output: # {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo'} Aby wy\u015bwietli\u0107 same klucze, nale\u017cy u\u017cy\u0107 metody keys() # Definition of dictionary europe = { 'spain' : 'madrid' , 'france' : 'paris' , 'germany' : 'berlin' , 'norway' : 'oslo' } # Print out the keys in europe print ( europe . keys ()) # Print out value that belongs to key 'norway' print ( europe [ 'norway' ]) Klucze w s\u0142owniku s\u0105 obiektami, kt\u00f3re s\u0105 niezmienne. Klucze powinny by\u0107 unikalne. Mo\u017cemy zmienia\u0107 jedynie warto\u015bci tych kluczy. Mo\u017cna dodawa\u0107 nowe rekordy s\u0142ownika. wykonujemy to poprzez world [ 'sealand' ] = 0.000027 Aby sprawdzi\u0107, czy dodanie przebieg\u0142o poprawnie, mo\u017cemy sprawdzi\u0107, czy w s\u0142owniku znajduje si\u0119 ten rekord: \"sealand\" in world #True Mo\u017cna zmienia\u0107 warto\u015bci w s\u0142owniku world [ 'sealand' ] = 0.000029 Mo\u017cna usuwa\u0107 elementy w s\u0142owniku poprzez wykonanie komendy del del ( world [ 'sealand' ]) R\u00f3\u017cnice mi\u0119dzy list\u0105 a s\u0142ownikiem Lista: Mo\u017cliwo\u015b\u0107 wyboru, aktualizacji i usuwania element\u00f3w przy u\u017cyciu nawias\u00f3w kwadratowych [] . Indeksowana zakresem numer\u00f3w. Kolekcja warto\u015bci, gdzie kolejno\u015b\u0107 ma znaczenie, umo\u017cliwiaj\u0105ca wyb\u00f3r ca\u0142ych podzbior\u00f3w. S\u0142ownik: Mo\u017cliwo\u015b\u0107 wyboru, aktualizacji i usuwania element\u00f3w przy u\u017cyciu nawias\u00f3w kwadratowych [] . Indeksowany unikalnymi kluczami. Tabela wyszukiwania z unikalnymi kluczami. Istnieje mo\u017cliwo\u015b\u0107 stworzenia s\u0142ownika, kt\u00f3ry zawiera w sobie inne mniejsze s\u0142owniki. Poni\u017cej wida\u0107 przyklad z DataCampa # Dictionary of dictionaries europe = { 'spain' : { 'capital' : 'madrid' , 'population' : 46.77 }, 'france' : { 'capital' : 'paris' , 'population' : 66.03 }, 'germany' : { 'capital' : 'berlin' , 'population' : 80.62 }, 'norway' : { 'capital' : 'oslo' , 'population' : 5.084 } } # Print out the capital of France print ( europe [ 'france' ][ 'capital' ]) # Create sub-dictionary data data = { 'capital' : 'rome' , 'population' : 59.83 } # Add data to europe under key 'italy' europe [ 'italy' ] = data # Print europe print ( europe )","title":"S\u0142owniki"},{"location":"DataScience/DataScience/#pandas-podstawy","text":"tablice NumPy nie radz\u0105 sobie dobrze z r\u00f3\u017cnymi rodzajami danych. W pandasie przechowujemy dane tabelaryczne. Przechowywane s\u0105 w ramce danych DataFrame Aby utworzy\u0107 ramk\u0119 danych, mo\u017cna skorzysta\u0107 ze s\u0142ownika. dict = { \"country\" : [ \"Brazil\" , \"Russia\" , \"India\" , \"China\" , \"South Africa\" ], \"capital\" : [ \"Brasilia\" , \"Moscow\" , \"New Delhi\" , \"Beijing\" , \"Pretoria\" ], \"area\" : [ 8.516 , 17.10 , 3.286 , 9.597 , 1.221 ], \"population\" : [ 200.4 , 143.5 , 1252 , 1357 , 52.98 ] } import pandas as pd brics = pd . DataFrame ( dict ) Dodanie nowych indeks\u00f3w mo\u017cna zrobi\u0107 poprzez: brics . index = [ \"BR\" , \"RU\" , \"IN\" , \"CH\" , \"SA\" ] brics Importowanie danych z pliku csv odbywa si\u0119 przy u\u017cyciu komendy brics = pd . read_csv ( \"path/to/brics.csv\" ) brics Aby ustali\u0107 indeksy w ramce danych korzystamy z argumentu index_col. Kolejny przyk\u0142ad stworzenia s\u0142ownika, kt\u00f3ry sk\u0142ada si\u0119 w sobie z innych s\u0142ownik\u00f3w. # Pre-defined lists names = [ 'United States' , 'Australia' , 'Japan' , 'India' , 'Russia' , 'Morocco' , 'Egypt' ] dr = [ True , False , False , False , True , True , True ] cpc = [ 809 , 731 , 588 , 18 , 200 , 70 , 45 ] # Import pandas as pd import pandas as pd # Create dictionary my_dict with three key:value pairs: my_dict my_dict = { 'country' : names , 'drives_right' : dr , 'cars_per_cap' : cpc } # Build a DataFrame cars from my_dict: cars cars = pd . DataFrame ( my_dict ) # Print cars print ( cars ) #output: # country drives_right cars_per_cap # 0 United States True 809 # 1 Australia False 731 # 2 Japan False 588 # 3 India False 18 # 4 Russia True 200 # 5 Morocco True 70 # 6 Egypt True 45 Ustawienie w\u0142asnych indeks\u00f3w wykonuje si\u0119 poprzez u\u017cycie komendy. # Definition of row_labels row_labels = [ 'US' , 'AUS' , 'JPN' , 'IN' , 'RU' , 'MOR' , 'EG' ] # Specify row labels of cars cars . index = row_labels Dostep do danych Aby wy\u015bwietli\u0107 tylko jedn\u0105 kolumne mo\u017cna to zrobi\u0107 na dwa sposoby brigs [ \"country\" ] #LUB brigs . country Aby zachowa\u0107 dane tego samego typu jak w pocz\u0105tkowej ramce danych, nale\u017cy skorzysta\u0107 z podw\u00f3jnych nawias\u00f3w kwadratowych. W przeciwnym razie dane zostan\u0105 zapisane w serii. brigs [[ \"country\" ]] Mo\u017cna wybra\u0107 typ ramki danych dwie kolumny lub wi\u0119cej. brigs [[ \"country\" , \"capital\" ]] /TO DO Doczyta\u0107 o tym wi\u0119cej Aby uzyska\u0107 dost\u0119p do wybranych danych, nale\u017cy skorzysta\u0107 z indeks\u00f3w. Indeksy numerowane s\u0105 od 0. brigs [ 1 : 4 ] Dost\u0119p do okre\u015blonego rzedu, wierszu otrzymujemy poprzez u\u017cycie komendy loc . Pojedynczy nawias kwadratowy gdy dane s\u0105 typu Serii. brigs . loc [ \"RU\" ] Podw\u00f3jny nawias kwadratowy powoduje ze dane s\u0105 w typu ramki danych. brigs . loc [[ \"RU\" ]] Typ Series u\u017cywany gdy chcesz u\u017cywa\u0107 danych jako operacja typowe dla sekwencji, czyli takie jak obliczanie statystyk, funkcje agreguj\u0105ce. Typ DataFrame podw\u00f3jne nawiasy u\u017cywane s\u0105 gdy chcemy u\u017cy\u0107 filtrowania, do\u0142\u0105czania kolumn czy tabel. Mo\u017cna uzyska\u0107 dost\u0119p do wielu wierszy. brigs . loc [[ \"RU\" , \"IN\" , \"CH\" ]] Mo\u017cna uzyska\u0107 dost\u0119p r\u00f3wnie\u017c wybrane wiersze jak i kolumny. brigs . loc [[ \"RU\" , \"IN\" , \"CH\" ], [ \"country\" , \"capital\" ]] Aby wybra\u0107 tylko dwie kolumny z u\u017cyciem loc . Nale\u017cy skorzysta\u0107 z nast\u0119puj\u0105cej sk\u0142adni. brigs . loc [:, [ \"country\" , \"capital\" ]] Podsumowanie U\u017cycie nawias\u00f3w kwadratowych : Dost\u0119p do kolumn: brics[[\"country\", \"capital\"]] Dost\u0119p do wierszy poprzez wycinanie: brics[1:4] U\u017cycie loc (dost\u0119p oparty na etykietach) : Dost\u0119p do wierszy: brics.loc[[\"RU\", \"IN\", \"CH\"]] Dost\u0119p do kolumn: brics.loc[:, [\"country\", \"capital\"]] Dost\u0119p do wierszy i kolumn jednocze\u015bnie: brics.loc[[\"RU\", \"IN\", \"CH\"], [\"country\", \"capital\"]] Mo\u017cna uzyska\u0107 dost\u0119p przy u\u017cyciu indeksu. Poni\u017csze wyra\u017cenie: brigs . loc [[ \"RU\" , \"IN\" , \"CH\" ], [ \"country\" , \"capital\" ]] Mo\u017cna zast\u0105pi\u0107 indeksami z wykorzystaniem metody iloc . brigs . iloc [[ 1 , 2 , 3 ], [ 0 , 1 ]] Analogicznie brigs . loc [:, [ \"country\" , \"capital\" ]] brigs . iloc [:, [ 0 , 1 ]] ### Operatory logiczne < - Strictly less than <= - Less than or equal > - Strictly greater than >= - Greater than or equal == - Equal != - Not equal AND OR NOT Por\u00f3wnanie array w NumPy przy u\u017cyciu and , or , not wy\u015bwietla b\u0142\u0105d. bmi = array ([ 21.85171573 , 20.97505669 , 21.75028214 , 24.7473475 , 21.44127836 ]) bmi > 21 and bmi < 22 #Output #ValueError: The truth value of an array with more than one element is ambiguous. #Use a.any() or a.all() Nale\u017cy u\u017cy\u0107 odpowiadaj\u0105cych metod: logical_and () logical_or () logical_not () Poprawne u\u017cycie wygl\u0105da nast\u0119puj\u0105co: np . logical_and ( bmi > 21 , bmi < 22 ) #Output #array([True, False, True, False, True], dtype=bool) Wy\u015bwietlenie odpowiednich warto\u015bci spe\u0142niaj\u0105cych warunki. bmi [ np . logical_and ( bmi > 21 , bmi < 22 )] #Output #array([21.852, 21.75, 21.441]) ### Wyra\u017cenie warunkowe # Define variables room = \"bed\" area = 14.0 # if-elif-else construct for room if room == \"kit\" : print ( \"looking around in the kitchen.\" ) elif room == \"bed\" : print ( \"looking around in the bedroom.\" ) else : print ( \"looking around elsewhere.\" ) # if-elif-else construct for area if area > 15 : print ( \"big place!\" ) elif area > 10 : print ( \"medium size, nice!\" ) else : print ( \"pretty small.\" ) Funkcja elif dzia\u0142a wtedy gdy warunek pierwszy oznaczony jako if nie zosta\u0142 spe\u0142niony. Je\u015bli pierwszy warunek zosta\u0142 spe\u0142niony to operacja elif nie zostanie wykonana. Mo\u017ce by\u0107 wiele warunk\u00f3w elif . Je\u015bli pierwszy warunek if nie zostanie spe\u0142niony to przechodzi po kolei po kolejnych warunkach elif . ### Filtrowanie danych Je\u015bli w ramce danych b\u0119dzie kolumna, kt\u00f3rej b\u0119d\u0105 warto\u015bci logiczne True , False , to nie trzeba pisa\u0107 dodatkowego warunku. # Import cars data import pandas as pd cars = pd . read_csv ( 'cars.csv' , index_col = 0 ) print ( cars ) # cars_per_cap country drives_right # US 809 United States True # AUS 731 Australia False # JPN 588 Japan False # IN 18 India False # RU 200 Russia True # MOR 70 Morocco True # EG 45 Egypt True # Extract drives_right column as Series: dr dr = cars [ \"drives_right\" ] # Use dr to subset cars: sel sel = cars [ dr ] # Print sel print ( sel ) #Output # cars_per_cap country drives_right # US 809 United States True # RU 200 Russia True # MOR 70 Morocco True # EG 45 Egypt True Mo\u017cna zapisa\u0107 poni\u017csze komendy krocej dr = cars [ \"drives_right\" ] sel = cars [ dr ] sel = cars [ cars [ 'drives_right' ]] Gdy nale\u017cy spe\u0142ni\u0107 wiele warunk\u00f3w, warto skorzysta\u0107 ze wcze\u015bniejszych funkcji takich jak np.logical_and() , np.logical_or() lub np.logical_not() , # Import cars data import pandas as pd cars = pd . read_csv ( 'cars.csv' , index_col = 0 ) # Import numpy, you'll need this import numpy as np # Create medium: observations with cars_per_cap between 100 and 500 cpc = cars [ 'cars_per_cap' ] between = np . logical_and ( cpc > 100 , cpc < 500 ) medium = cars [ between ] # Print medium print ( medium )","title":"Pandas podstawy"},{"location":"DataScience/DataScience/#pelte-while-i-for","text":"P\u0119tla while za ka\u017cdym razem sprawdza warunek. P\u0119tla for wykonuje okre\u015blon\u0105 liczb\u0119 iteracji. # Initialize offset offset = - 6 # Code the while loop while offset != 0 : print ( \"correcting...\" ) if offset > 0 : offset -= 1 else : offset += 1 print ( offset ) P\u0119tla for fam = [ 1.73 , 1.68 , 1.71 , 1.89 ] for height in fam : print ( height ) #Output #1.73 #1.68 #1.71 #1.89 metoda enumerate pozwala na uzyskanie indeksu. fam = [ 1.73 , 1.68 , 1.71 , 1.89 ] for index , height in enumerate ( fam ): print ( \"index \" + str ( index ) + \": \" + str ( height )) #Output #index 0: 1.73 #index 1: 1.68 #index 2: 1.71 #index 3: 1.89 Wyst\u0119puje funkcja capitalize() , kt\u00f3ra wy\u015bwietla pojedyncze znaki ze s\u0142owa. for c in \"family\" : print ( c . capitalize ()) #Output #F #A #M #I #L #Y # house list of lists house = [[ \"hallway\" , 11.25 ], [ \"kitchen\" , 18.0 ], [ \"living room\" , 20.0 ], [ \"bedroom\" , 10.75 ], [ \"bathroom\" , 9.50 ]] # Build a for loop from scratch for name , area in house : print ( \"the \" + str ( name ) + \" is \" + str ( area ) + \" sqm\" ) #output: #the hallway is 11.25 sqm #the kitchen is 18.0 sqm #the living room is 20.0 sqm #the bedroom is 10.75 sqm #the bathroom is 9.5 sqm P\u0119tla w s\u0142owniku world = { \"afghanistan\" : 30.55 , \"albania\" : 2.77 , \"algeria\" : 39.21 } for key , value in world : print ( key + \" -- \" + str ( value )) #Output #ValueError: too many values to unpack (expected 2) Ten b\u0142\u0105d wynika z tego, \u017ce podczas iteracji po s\u0142owniku world bezpo\u015brednio, otrzymuje si\u0119 tylko klucze. Aby uzyska\u0107 pary klucz-warto\u015b\u0107, nale\u017cy u\u017cy\u0107 metody .items() : for key , value in world . items (): print ( key + \" -- \" + str ( value )) #Output #Algeria -- 39.21 #Afghanistan -- 30.55 #Albania -- 2.77 Trzeba pami\u0119ta\u0107, \u017ce kolejno\u015b\u0107 ma znaczenie. Pierwsza zmienna otrzymuje klucz, a druga warto\u015b\u0107. Iterowanie po dw\u00f3ch tablicach. import numpy as np np_height = np . array ([ 1.73 , 1.68 , 1.71 , 1.89 , 1.79 ]) np_weight = np . array ([ 65.4 , 59.2 , 63.6 , 88.4 , 68.7 ]) meas = np . array ([ np_height , np_weight ]) for val in meas : print ( val ) #Output #[1.73, 1.68, 1.71, 1.89, 1.79] #[65.4, 59.2, 63.6, 88.4, 68.7] W powy\u017cszym przypadku p\u0119tla for wypisuje cala tablice w ka\u017cdej iteracji. Wypisanie ka\u017cdego elementu tablicy wykonuje si\u0119 poprzez wykorzystanie funkcji nditer() . import numpy as np np_height = np . array ([ 1.73 , 1.68 , 1.71 , 1.89 , 1.79 ]) np_weight = np . array ([ 65.4 , 59.2 , 63.6 , 88.4 , 68.7 ]) meas = np . array ([ np_height , np_weight ]) for val in np . nditer ( meas ): print ( val ) #Output #1.73 #1.68 #1.71 #1.89 #1.79 #65.4 #... Kolejny przyk\u0142ad z Data Campa: np_height, tablic\u0119 NumPy zawieraj\u0105c\u0105 wysoko\u015b\u0107 zawodnik\u00f3w Major League Baseball, oraz np_baseball , dwuwymiarow\u0105 tablic\u0119 NumPy zawieraj\u0105c\u0105 zar\u00f3wno wysoko\u015b\u0107 (pierwsza kolumna), jak i wag\u0119 (druga kolumna) tych zawodnik\u00f3w. # Import numpy as np import numpy as np # For loop over np_height for x in np_height : print ( str ( x ) + \" inches\" ) # For loop over np_baseball for x in np . nditer ( np_baseball ) : print ( x )","title":"P\u0119lte while i for."},{"location":"DataScience/DataScience/#iterowanie-po-dataframe-za-pomoca-for","text":"DataFrame dzia\u0142aj\u0105 inaczej ni\u017c 2D NumPy. Nie wy\u015bwietla ka\u017cdego wiersza tylko wy\u015bwietli nazwy etykiet czyli nazwy kolumn. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for val in brics : print ( val ) W takim przypadku otrzymamy nazwy kolumn column, capital, area, population","title":"Iterowanie po DataFrame za pomoc\u0105 for"},{"location":"DataScience/DataScience/#iterrows","text":"Metoda iterrows() w bibliotece pandas w Pythonie s\u0142u\u017cy do iterowania po wierszach DataFrame. Dla ka\u017cdej iteracji zwraca par\u0119 (indeks, seria), gdzie \"indeks\" to etykieta wiersza, a \"seria\" to obiekt Series zawieraj\u0105cy dane danego wiersza. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for lab , row in brics . iterrows (): print ( lab ) print ( row ) Brazylia (BR): Kraj: Brazil Stolica: Brasilia Powierzchnia: 8.516 (jednostka nie podana, prawdopodobnie mln km\u00b2) Populacja: 200.4 (jednostka nie podana, prawdopodobnie mln) Rosja (RU): Kraj: Russia Stolica: Moscow Powierzchnia: 17.1 (jednostka nie podana, prawdopodobnie mln km\u00b2) Populacja: 143.5 (jednostka nie podana, prawdopodobnie mln) Mo\u017cna wy\u015bwietli\u0107 tylko stolice danego indeksu. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for lab , row in brics . iterrows (): print ( lab + \": \" + row [ \"capital\" ]) #Output #BR: Brasilia #RU: Moscow #IN: New Delhi #CH: Beijing #SA: Pretoria Mo\u017cna dodawa\u0107 now\u0105 kolumn\u0119 do DataFrame. import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) for lab , row in brics . iterrows (): brics . loc [ lab , \"name_length\" ] = len ( row [ \"country\" ]) print ( brics ) #Output #| Code | Country | Capital | Area | Population | Name Length | #|------|---------------|-----------|--------|------------|-------------| #| BR | Brazil | Brasilia | 8.516 | 200.40 | 6 | #| RU | Russia | Moscow | 17.100 | 143.50 | 6 | #| IN | India | New Delhi | 3.286 | 1252.00 | 5 | #| CH | China | Beijing | 9.597 | 1357.00 | 5 | #| SA | South Africa | Pretoria | 1.221 | 52.98 | 12 | Tutaj mo\u017ce nast\u0105pic spadek wydajno\u015bci. Nale\u017cy ca\u0142\u0105 kolumn\u0119 DataFrame import pandas as pd brics = pd . read_csv ( \"brics.csv\" , index_col = 0 ) brics [ \"name_length\" ] = brics [ \"country\" ] . apply ( len ) print ( brics ) #output #Code| Country | Capital | Area | Population | Name Length | #BR | Brazil | Brasilia | 8.516 | 200.40 | 6 #RU | Russia | Moscow | 17.100 | 143.50 | 6 #IN | India | New Delhi | 3.286 | 1252.00 | 5 #CH | China | Beijing | 9.597 | 1357.00 | 5 #SA | South Africa | Pretoria | 1.221 | 52.98 | 12","title":"iterrows()"},{"location":"DataScience/DataScience/#joining-data-with-pandas","text":"Informacje o danych z pliku wards = pd . read_csv ( \"Ward_Offices.csv\" ) print ( wards . head ()) print ( wards . shape ) #Output #ward alderman address zip #1 Proco \"Joe\" ... 2058 NORTH W... 60647 #2 Brian Hopkins 1400 NORTH ... 60622 #3 Pat Dowell 5046 SOUTH S... 60609 #4 William D. B... 435 EAST 35T... 60616 #5 Leslie A. Ha... 2325 EAST 71... 60649 #(50,4) Drugi plik census = pd . read_csv ( \"Ward_Census.csv\" ) print ( census . head ()) print ( census . shape ) #Output #ward pop_2000 pop_2010 change address zip # 1 52951 56149 6% 2765 WEST SA... 60647 # 2 54361 55805 3% WM WASTE MAN... 60622 # 3 40385 53039 31% 17 EAST 38TH... 60653 # 4 51953 54589 5% 31ST ST HARB... 60653 # 5 55302 51455 -7% JACKSON PARK... 60637 Marging tables Inner join Poni\u017cszy kod pobiera pierwsz\u0105 ramk\u0119 DataFrame i \u0142\u0105czy j\u0105 z drug\u0105 ramk\u0105 DataFrame. i \u0142\u0105czy j\u0105 po kolumnie ward. wards_census = wards . merge ( census , on = \"ward\" ) print ( wards_census . head ( 4 )) #Output #ward alderman address_x zip_x pop_2000 pop_2010 change address_y zip_y # 1 Proco \"Joe\" ... 2058 NORTH W... 60647 52951 56149 6% 2765 WEST SA... 60647 # 2 Brian Hopkins 1400 NORTH ... 60622 54361 55805 3% WM WASTE MAN... 60622 # 3 Pat Dowell 5046 SOUTH S... 60609 40385 53039 31% 17 EAST 38TH... 60653 # 4 William D. B... 435 EAST 35T... 60616 51953 54589 5% 31ST ST HARB... 60653 Warto pami\u0119ta\u0107 ze je\u015bli tabele maj\u0105 takie same nazwy kolumn to Pandas automatycznie doda przyrostki _x lub _y. print ( wards_census . columns ) #Index(['ward', 'alderman', 'address_x', 'zip_x', 'pop_2000', 'pop_2010', 'change', # 'address_y', 'zip_y'], # dtype='object') Mo\u017cemy to kontrolowa\u0107 dodaj\u0105c argument suffixes do kt\u00f3rego b\u0119da przypisane wartosci w krotce. W poni\u017cszy przypadku b\u0119dzie to oznaczalo \u017ce _ward zostanie przypisany do kolumn nale\u017c\u0105cych wcze\u015bniej do pierwszej tabeli a _cen zostanie przypisany do kolumn nale\u017c\u0105cych wcze\u015bniej do drugiej tabeli. wards_census = wards . merge ( census , on = 'ward' , suffixes = ( '_ward' , '_cen' )) print ( wards_census . head ()) print ( wards_census . shape ) #Output #ward alderman address_ward zip_ward pop_2000 pop_2010 change address_cen zip_cen # 1 Proco \"Joe\" ... 2058 NORTH W... 60647 52951 56149 6% 2765 WEST SA... 60647 # 2 Brian Hopkins 1400 NORTH ... 60622 54361 55805 3% WM WASTE MAN... 60622 # 3 Pat Dowell 5046 SOUTH S... 60609 40385 53039 31% 17 EAST 38TH... 60653 # 4 William D. B... 435 EAST 35T... 60616 51953 54589 5% 31ST ST HARB... 60653 # 5 Leslie A. Ha... 2325 EAST 71... 60649 55302 51455 -7% JACKSON PARK... 60637 Aby policzy\u0107 ile by\u0142o wyst\u0105pie\u0144 danego rekordu w danej tabeli u\u017cywamy metody value_counts() # Merge the taxi_owners and taxi_veh tables setting a suffix taxi_own_veh = taxi_owners . merge ( taxi_veh , on = 'vid' , suffixes = ( '_own' , '_veh' )) # Print the value_counts to find the most popular fuel_type print ( taxi_own_veh [ 'fuel_type' ] . value_counts ()) #Output #HYBRID 2792 #GASOLINE 611 #FLEX FUEL 89 #COMPRESSED NATURAL GAS 27 #Name: fuel_type, dtype: int64","title":"Joining Data with Pandas"},{"location":"DataScience/DataScience/#relacje-w-tabeli","text":"Relacja jeden do jeden W tej relacji ka\u017cdy wiersz w lewej tabeli jest powi\u0105zany z tylko jednym wierszem w prawej tabeli. Relacja jeden do wielu W tej relacji ka\u017cdy wiersz po lewej tabeli jest powiazany z jednym lub wi\u0119ksz\u0105 liczb\u0105 wierszy w prawej tabeli. Na przyk\u0142ad w jednym oddziale pracuje wiele firm. ward_licenses = wards . merge ( licenses , on = 'ward' , suffixes = ( '_ward' , '_lic' )) print ( ward_licenses . head ()) ward alderman address_ward zip_ward account aid business address_lic 1 Proco \"Joe\" ... 2058 NORTH W... 60647 12024 nan DIGILOG ELEC... 1038 N ASHLA... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 14446 743 EMPTY BOTTLE... 1035 N WESTE... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 14624 775 LITTLE MEL'S... 2205 N CALIF... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 14987 nan MR. BROWN'S ... 2301 W CHICA... 1 Proco \"Joe\" ... 2058 NORTH W... 60647 15642 814 Beat Kitchen 2000\u20132100 W ... Doklei\u0107 rzeczy z innej cz\u0119\u015bci merge_asof() dzia\u0142a podobnie jak merge_ordered() left join. Dopasowywuje kolumny najbli\u017cszej warto\u015bci, a nie r\u00f3wne warto\u015bci. Warto\u015b\u0107 ta jest nie wi\u0119ksza niz warto\u015b\u0107 C. Trzeba pami\u0119ta\u0107 aby kolumny by\u0142y posortowane. Zastosowanie argumentu direction=\u2019forward\u2019 spowoduj\u0119 \u017ce warto\u015bci przypisane b\u0119d\u0105 wi\u0119sz\u0105 lub r\u00f3wne danej wartosci. Natomiast direction=\u2019nearest\u2019 przypisz\u0119 warto\u015bc najbli\u017csz\u0105. Zastosowanie gdy dane godzinowe si\u0119 niezgadzaj\u0105. pd . merge_asof ( visa , ibm , on = [ 'date_time' ], suffixes = ( '_visa' , '_ibm' ), direction = 'forward' )","title":"Relacje w tabeli"},{"location":"DataScience/DataScience/#prawdopodobienstwo","text":"Aby wyci\u0105gn\u0105\u0107 jedn\u0105 przyk\u0142adow\u0105 dan\u0105 korzystamy z metody .sample() . Dzia\u0142a ona losowo print ( sales_counts ) #Output # name n_sales #0 Amir 178 #1 Brian 128 #2 Claire 75 #3 Damian 69 sales_counts . sample () #Output # name n_sales #1 Brian 128 # name n_sales #2 Claire 75 Je\u015bli u\u017cyli\u015bmy metody sample() dany rekordu nie ma ju\u017c we zbiorze. Je\u015bli wybiezrszemy to samo ziarno do generowania liczb losowych otrzymamy te same wyniki. np . random . seed ( 10 ) sales_counts . sample () #Output # name n_sales #1 Brian 128 Mo\u017cna tak\u017ce poda\u0107 ilo\u015b\u0107 zwracanych rekord\u00f3w. sales_counts . sample ( 2 ) #Output # name n_sales #1 Brian 128 #2 Claire 75 Mo\u017cna przywr\u00f3ci\u0107 star\u0105 wersj\u0119 tabeli, korzystaj\u0105c z parametru replace = True . Jest to losowanie ze zwracaniem. sales_counts . sample ( 5 , replace = True ) Zliczenie wyst\u0105pienie ka\u017cdej warto\u015bci w danej tabeli. amir_deals [ \"product\" ] . value_counts () Wizualizacja danych na histogramie rolls_10 [ 'number' ] . hist ( bins = np . linspace ( 1 , 7 , 7 )) plt . show ()","title":"Prawdopodobie\u0144stwo"},{"location":"DataScience/DataScience/#distributions-continous","text":"Aby obliczy\u0107 prawdopodobie\u0144stwo korzystamy z metody .cdf() from scipy.stats import uniform uniform . cdf ( 7 , 0 , 12 ) #0.5833333 cdf(7, 0, 12) Oblicza dystrybuant\u0119 rozk\u0142adu jednostajnego w punkcie 7, dla rozk\u0142adu zdefiniowanego od 0 do 12. Oblicza to prawdopodobie\u0144stwo \u017ce zmienna losowa na przedziale [0, 12] przyjmie warto\u015b\u0107 mniejsz\u0105 lub r\u00f3wn\u0105 7. Je\u015bli chcemy obliczy\u0107 prawdopodobie\u0144stwo \u017ce liczba b\u0119dize wi\u0119ksza od danej warto\u015bci to musimy odj\u0105\u0107 od jedno\u015bci. from scipy.stats import uniform 1 - uniform . cdf ( 7 , 0 , 12 ) Aby obliczy\u0107 przwdopodobie\u0144stwo wylosowania mi\u0119dzy dwoma przedzia\u0142ami korzystamy z odj\u0119cia wi\u0119kszej liczby od mniejszej. from scipy.stats import uniform uniform . cdf ( 7 , 0 , 12 ) - uniform . cdf ( 4 , 0 , 12 ) Je\u015bli chcemy wylosowa\u0107 10 liczb z przedzia\u0142u od 0 do 5. from scipy.stats import uniform uniform . rvs ( 0 , 5 , size = 10 ) #Output #array([1.89740094, 4.70673196, 0.33224683, 1.0137103 , 2.31641255, 3.49969897, 0.29688598, 0.92057234, 4.71086658, 1.56815855]) Mo\u017cliwe jest zasumulowanie w pythonie rzuceniem monet\u0105. binom . rvs ( 1 , 0.5 , size = 8 ) #Output #array([0, 1, 1, 0, 1, 0, 1, 1]) Powy\u017csza funkcja symuluje rzut monet\u0105 gdzie mo\u017clie s\u0105 dwie mo\u017cliwo\u015bci albo b\u0119dzie 0 albo 1. from scipy.stats import binom binom . rvs ( 3 , 0.5 , size = 10 ) #Output #array([0, 3, 2, 1, 3, 0, 2, 2, 0, 0]) Powy\u017cszy kod m\u00f3wi \u017ce chce rzuci\u0107 10 razy trzema monetami z prawdopodobie\u0144stwem sukcesu 50% . Je\u015bli chcemy zmieni\u0107 pradwopodobie\u0144stwo sukcesu(w poni\u017cszym przypadku je zmniejszy\u0107 do 25%) binom.rvs(3, 0.25, size=10) .pmf() u\u017cywana jest do obliczenia prawdopodobie\u0144stwa wyst\u0105pienia konkretnej liczby sukces\u00f3w w serii pr\u00f3b Bernulliego Prawdopodobie\u0144swo rzucenia 7 or\u0142\u00f3w na 10 monet mo\u017cna u\u017cy\u0107 metody .pmf(7, 10, 0.5) binom . pmf ( 7 , 10 , 0.5 ) #Output #0.1171875 Aby pozna\u0107 pradopodobie\u0144swo wyrzucenia 7 lub mniej or\u0142\u00f3w. binom . cdf ( 7 , 10 , 0.5 ) #Output #0.9453125 Prawdopodobie\u0144stwo wyrzucenia wi\u0119cej ni\u017c 7. Wyliczamy za pomoc\u0105 poni\u017cszego wyra\u017cenia. 1 - binom . cdf ( 7 , 10 , 0.5 ) #Output #0.0546875","title":"Distributions Continous"},{"location":"DataScience/DataScience/#normalna-dystrybuanta","text":"W\u0142a\u015bciwo\u015bci - Jest symetryczna - powierzchnia r\u00f3wna 1 - nigdy nie dotyka zera - s\u0142u\u017cy do okre\u015blenia \u015bredniej i/lub odchylenia standardowego - W rozk\u0142adzie normalnym 68% danych znajduje sie pomi\u0119dzy odchyleniami standardowymi - 95% wszystkich danych znajduj\u0119 si\u0119 w odleg\u0142o\u015bci 2 odchyle\u0144 standardowych od \u015brodka - 99.7% wszystkich danych znajduje si\u0119 w odleg\u0142o\u015bci 3 odchyle\u0144 standardowych od \u015bredniej Przyk\u0142ad: Wy\u015bwietlenie informacji ile kobiet ma wzrost mniejszy ni\u017c oblicza si\u0119: from scipy.stats import norm norm . cdf ( 154 , 161 , 7 ) Pierwsz\u0105 liczb\u0105 jest \u017c\u0105dana liczba kt\u00f3r\u0105 chcemy wiedzie\u0107 ile os\u00f3b ma mniejszy wzrost ni\u017c 154 cm, drugi parametr to \u015bredni wzrost, trzeci parametr to warto\u015b\u0107 odchylenia standardowego. \u017beby obliczy\u0107 ile os\u00f3b ma wzrost powy\u017cej 154 cm oblicza si\u0119 za pomoc\u0105 odj\u0119cia od jedno\u015bci: from scipy.stats import norm 1 - norm . cdf ( 154 , 161 , 7 ) \u017beby obliczy\u0107 ile procent kobiet jest w przedziale mi\u0119dzy 154 a 157 wyznacza si\u0119 po przez odj\u0119cie od wi\u0119kszego zbioru mniejszego czyli odj\u0119cie 154cm od 157cm. norm . cdf ( 157 , 161 , 7 ) - norm . cdf ( 154 , 161 , 7 ) Aby wyznaczy\u0107 wzrost mniejszy ni\u017c u 90% kobiet. Wyznacza si\u0119 za pomoc\u0105: norm . ppf ( 0.9 , 161 , 7 ) Aby wyznaczy\u0107 wzrost wi\u0119kszy dla 90% kobiet. Wyznacza si\u0119 za pomoc\u0105: norm . ppf (( 1 - 0.9 ), 161 , 7 ) Wygenerowanie losowych 10 wzrost\u00f3w wyznacza si\u0119 za pomoc\u0105 poni\u017cszego kodu: norm . rvs ( 161 , 7 , size = 10 ) Gdzie pierwszy parametr to \u015bredni wzrost, drugi parametr o odchylenie standardowe, a trzeci to liczba generowanych warto\u015bci. Centralne twierdzenie graniczne (ang. Central limit theorem) Rozk\u0142ad pr\u00f3bkowania b\u0119dzie si\u0119 zbli\u017ca\u0142 do rozk\u0142adu normalnego w miar\u0119 wzrostu liczby pr\u00f3b. Trzeba pami\u0119ta\u0107 \u017ce ma to zastosowanie wtedy i tylko wtedy gdy pr\u00f3bki s\u0105 podejmowane losowo i s\u0105 niezale\u017cne. sales_team = pd . Series ([ \"Amir\" , \"Brian\" , \"Claire\" , \"Damian\" ]) sales_team . sample ( 10 , replace = True ) #array(['Claire', 'Damian', 'Brian', 'Damian', 'Damian', 'Amir', 'Amir', 'Amir', 'Amir', 'Damian'], dtype=object) #10% wynik\u00f3w to Claire sales_team . sample ( 10 , replace = True ) #array(['Brian', 'Amir', 'Brian', 'Claire', 'Brian', 'Damian', 'Claire', 'Brian', 'Claire', 'Claire'], dtype=object) #40% wynik\u00f3w to Claire Warto\u015b\u0107 prawdopodobienstwa wylosowania Claire wynosi 25%. Ma to prze\u0142o\u017cenie na wykres. Rozk\u0142ad Poissona Proces w kt\u00f3rym zdarzenia zachodz\u0105 z okre\u015blon\u0105 cz\u0119stotliwo\u015bci\u0105, ale ca\u0142kowicie losowo. Rozk\u0142ad Poissona opisuje prawdopodobie\u0144stwo wyst\u0105pienia pewnej liczby zdarze\u0144 w ustalonym okresie. Na przyk\u0142ad: Liczba zwierz\u0105t adoptowanych co tydzie\u0144 ze schroniska Rozk\u0142ad Poissona opisuje liczba lambda Liczba lambda opisuje \u015bredni\u0105 liczb\u0119 zdarzen w danym okresie. Warto\u015b\u0107 ta jest jednocze\u015bnie warto\u015bci\u0105 oczekiwan\u0105 (ang. value of the distribution) Rozk\u0142ad Poissona Prawdopodobie\u0144stwo, \u017ce liczba adopcji b\u0119dzie r\u00f3wna 5 przy \u015bredniej tygodniowej \u015bredniej liczbie adopcji wynosz\u0105cej 8. from scipy.stats import poisson poisson . pmf ( 5 , 8 ) #Output #0.09160366 Aby obliczyc prawdopodobienstwo \u017ce liczba adopcji b\u0119dzie wi\u0119ksza ni\u017c 5 przy \u015bredniej wynosz\u0105cej 8. Oblicza si\u0119 za pomoc\u0105 ponizszego wzoru: 1 - poisson . cdf ( 5 , 8 ) Gdy \u015brednia liczba adopcji ulegnie zwi\u0119kszeniu to prawdopodobinstwo adopcji w takiej samej wartosci co poprzednio ulegnie zwi\u0119kszeniu. Mo\u017cna tak\u017ce wylosowa\u0107 okre\u015blon\u0105 liczb\u0119 warto\u015bci uwzgl\u0119dniaj\u0105c rozk\u0142ad Poissona from scipy.stats import poisson poisson . rvs ( 8 , size = 10 ) Powy\u017cszy przyk\u0142ad przedstawia przypadek gdy wybieramy 10 przykladowych rekord\u00f3w z rozk\u0142adu Poissona gdzie \u015brednia wynosi 8. Rozk\u0142ad wyk\u0142adniczy Reprezentuje prawdopodobienstwo up\u0142ywu okre\u015blonego czasu pomi\u0119dzy zdarzeniami Poissona. Na przk\u0142ad: Prawdopodobie\u0144stwo uplywu wi\u0119cej ni\u017c jednego dnia pomiedzy adopcjami. Rozk\u0142ad wyk\u0142adniczy wykorzystuj\u0119 wartosc lambda ktora okre\u015bla szybko\u015b\u0107. W przeciwie\u0144stwie o rozk\u0142adu Poissona jest ci\u0105g\u0142y, poniewa\u017c reprezentuje czas. Oczekiwany czas miedzy \u017cadaniami wyznacza si\u0119 jako 1/(lambda). Umieszcza si\u0119 go w wyra\u017ceniu kt\u00f3ry s\u0142u\u017cy do jego liczenia. Czas oczekiwania mniejszy ni\u017c minuta wyznacza sie po przez wykorzystanie ponizszego wzoru: from scipy.stats import expon expon . cdf ( 1 , scale = 2 ) Gdzie: Pierwszy argument to warto\u015b\u0107 dla ktorej chcemy policzy\u0107 prawdopodobienstwo a druga to czas mi\u0119dzy \u017c\u0105daniami. Prawdopodobie\u0144stwo oczekiwania wynoszace wi\u0119cej niz 4 minuty wyznacza si\u0119 za pomoc\u0105: from scipy.stats import expon 1 - expon . cdf ( 4 , scale = 2 ) Prawdopodobienstwo wynosz\u0105ce mi\u0119dzy jedn\u0105 minuta a czterema minutami wyznacza si\u0119 za pomoc\u0105: from scipy.stats import expon expon . cdf ( 4 , scale = 2 ) - expon . cdf ( 1 , scale = 2 ) Rozk\u0142ad t-Studenta Rozk\u0142ad t-Studenta charakteryzuje si\u0119 obserwacjami kt\u00f3re s\u0105 oddalone od \u015bredniej. Rozk\u0142ad t ma parametr, kt\u00f3ry wp\u0142ywa na grubo\u015b\u0107 ogon\u00f3w rozk\u0142adu. Ni\u017csze stopnie swobody powoduj\u0105 grubsze ogony i wi\u0119ksze odchylenie standardowe. Wraz ze wzrostem liczby stopni swobody rozk\u0142ad bardziej przypomina rozk\u0142ad normalny. Rozk\u0142ad logaryticzno-normalny Zmienne kt\u00f3re posiadaj\u0105 rozklad logarytmiczno-normalny maj\u0105 logarytm o rozk\u0142adzie normalnym.","title":"Normalna dystrybuanta"},{"location":"DataScience/DataScience/#korelacja-miara-pearsona","text":"Korelacja to badanie zale\u017cno\u015bci mi\u0119dzy dwiema zmiennymi. Je warto\u015b\u0107 jest le\u017cy pomi\u0119dzy-1 do 1. Bada si\u0142\u0119 relacji. Minus lub plus oznaczaj\u0105 kierunek zale\u017cno\u015bci. Dodatnia warto\u015b\u0107 korelacji oznacza \u017ce jak warto\u015bci osi x rosn\u0105 to warto\u015bci na drugiej osi y te\u017c rosn\u0105. Ujemna warto\u015b\u0107 korelacji oznacza jak warto\u015bci na osi x rosn\u0105 to warto\u015bci na osi y malej\u0105. Wykres przyk\u0142adowej korelacji: //TO DO Wyja\u015bni\u0107 jak to zasz\u0142o co to jest lmplot import seaborn as sns sns . lmplot ( x = \"sleep_total\" , y = \"sleep_rem\" , data = msleep , ci = None ) plt . show () Wyznaczenie wsp\u00f3\u0142czynnika korelacji msleep [ 'sleep_total' ] . corr ( msleep [ 'sleep_rem' ]) #Output #0.751755 Warto\u015bci wsp\u00f3\u0142czynnika korelacji si\u0119 nie znmieniaj\u0105. msleep [ 'sleep_rem' ] . corr ( msleep [ 'sleep_total' ]) #Output #0.751755 Logarytmiczna korelacja //TO DO doda\u0107 screeny z 1:38 z filmiku Correlation caveats. Liniowa korelacja daje s\u0142aby wynik. PAMI\u0118TAJ zawsze tw\u00f3rz wykres by lepiej mo\u017cna by\u0142o zobaczy\u0107. msleep [ 'bodywt' ] . corr ( msleep [ 'awake' ]) #Output #0.31 msleep [ 'log_bodywt' ] = np . log ( msleep [ 'bodywt' ]) sns . lmplot ( x = 'log_bodywt' , y = 'awake' , data = msleep , ci = None ) plt . show () msleep [ 'log_bodywt' ] . corr ( msleep [ 'awake' ]) #Output #0.57 Inne przyk\u0142ady: - korelacja kwadratowa, - korelacja odwrotnie proporcjonalna 1/x . Korelacja nie zawiera zwi\u0105zku przyczynowo-skutkowego. Oznacza to \u017ce warto\u015b\u0107 osi x nie powoduj\u0105 zmian warto\u015bci na osi y.","title":"Korelacja (Miara Pearsona)"},{"location":"DataScience/DataScience/#seaborn","text":"Stworzony by u\u0142atwi\u0107 tworzenie najpopularniejszych wykres\u00f3w, dzia\u0142a wyj\u0105tkowo dobrze ze strukturami danych, zbudowany na bazie Matplotlib. Jednak\u017ce Matplotlib nie jest elastyczny. Alias sns skr\u00f3t wzi\u0119to od S amuel N orman S eaborn. Aktora \"The West Wing\" Je\u015bli chcemy wykorzysta\u0107 Seaborn trzeba importowa\u0107 r\u00f3wnie\u017c matplotlib gdy\u017c na nim zosta\u0142 zbudowany. import seaborn as sns import matplotlib.pyplot as plt height = [ 62 , 64 , 69 , 75 , 66 , 68 , 65 , 71 , 76 , 73 ] weight = [ 120 , 136 , 148 , 175 , 137 , 165 , 154 , 172 , 200 , 187 ] sns . scatterplot ( x = height , y = weight ) plt . show () import seaborn as sns import matplotlib.pyplot as plt gender = [ \"Female\" , \"Female\" , \"Female\" , \"Female\" , \"Male\" , \"Male\" , \"Male\" , \"Male\" , \"Male\" , \"Male\" ] sns . countplot ( x = gender ) plt . show () Nale\u017cy pami\u0119ta\u0107 aby DataFrame by\u0142 uporz\u0105dkowany. Nie uporz\u0105dkowana ramka danych nie b\u0119dzie dzia\u0142a\u0107 prawid\u0142owo. import pandas as pd import matplotlib.pyplot as plt import seaborn as sns df = pd . read_csv ( \"masculinity.csv\" ) sns . countplot ( x = \"how_masculine\" , data = df ) plt . show () Mo\u017cna rozr\u00f3nia\u0107 kolory punkt\u00f3w ze wzgl\u0119du na dan\u0105 kategori\u0119. Przed dodaniem kodu kt\u00f3ry odpowiada za kolor import matplotlib.pyplot as plt import seaborn as sns sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips ) plt . show () Po dodaniu parametru hue kt\u00f3ry odpowiada za kolor. Automatycznie dodaje legend\u0119 do naszego wykresu. import matplotlib.pyplot as plt import seaborn as sns sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" ) plt . show () Po dodaniu parametru hue_order , kt\u00f3ra pobiera list\u0119 warto\u015bci i odpowiednio ustawia kolejno\u015b\u0107 warto\u015bci na wykresie. import matplotlib.pyplot as plt import seaborn as sns sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" , hue_order = [ \"Yes\" , \"No\" ]) plt . show () Mo\u017cna do u\u017cywania kolor\u00f3w wykorzystywa\u0107 palety kolor\u00f3w. import matplotlib.pyplot as plt import seaborn as sns hue_colors = { \"Yes\" : \"black\" , \"No\" : \"red\" } sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" , palette = hue_colors ) plt . show () Mo\u017cna tak\u017ce u\u017cywa\u0107 skr\u00f3t\u00f3w a tak\u017ce kod\u00f3w HTML import matplotlib.pyplot as plt import seaborn as sns hue_colors = { \"Yes\" : \"#808080\" , \"No\" : \"#00FF00\" } sns . scatterplot ( x = \"total_bill\" , y = \"tip\" , data = tips , hue = \"smoker\" , palette = hue_colors ) plt . show () Mo\u017cna wykorzystywa\u0107 odcie\u0144 do rozr\u00f3\u017cnienia kolor\u00f3w. import matplotlib.pyplot as plt import seaborn as sns sns . countplot ( x = \"smoker\" , data = tips , hue = \"sex\" ) plt . show () relplot() umo\u017cliwia korzystanie z wykres\u00f3w punktowych jak i liniowego. Pozwala na tworzenie wielu wykres\u00f3w na przy u\u017cyciu jednego schematu. R\u00f3\u017cnice mi\u0119dzy satterplot() i relplot(): import seaborn as sns import matplotlib.pyplot as plt sns . scatterplot ( x = 'total_bill' , y = 'tip' , data = tips ) plt . show () import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' ) plt . show () Podsumowywuj\u0105c r\u00f3\u017cnice mi\u0119dzy to to \u017ce w relplot wybieramy sobie rodzaj jaki to ma by\u0107 wykres. Do wyboru typu wykresu s\u0142u\u017cy kind . import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'smoker' ) plt . show () Parametr col NIE oznacza koloru lecz przedstawienie wykres\u00f3w jeden obok drugiego(kolumnowo) danych kt\u00f3re znajduj\u0105 si\u0119 w kolumnie smoker . Aby przedstawi\u0107 wykresy jeden pod drugim wykorzystuje si\u0119 parametr row . Mo\u017cna tak\u017ce wykorzystywa\u0107 oba te parametry. Istnieje mo\u017cliwo\u015b\u0107 przedstawienia wykres\u00f3w z wykorzystaniem zawijania (ang. wrap) Zawijanie kolumn import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'day' , col_wrap = 2 ) plt . show () Mo\u017cna tak\u017ce zastosowa\u0107 uporz\u0105dkowanie wykres\u00f3w z wykorzystaniem parametru col_order . import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'day' , col_wrap = 2 , col_order = [ \"Thur\" , \"Fri\" , \"Sat\" , \"Sun\" ]) plt . show () Mo\u017cna tak\u017ce wy\u015bwietli\u0107 z podzia\u0142em na kolumny i wiersze import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , col = 'smoker' , row = 'time' ) plt . show () Rozmiar punktu Do lepszej wizualizacji danych lepiej jest wykorzystywa\u0107 parametr size . import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , size = 'size' ) plt . show () Mo\u017cna tak\u017ce wykorzysta\u0107 parametr hue kt\u00f3ry rozr\u00f3\u017cnia kolorami dane punkty. import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , size = 'size' , hue = 'size' ) plt . show () Innym przyk\u0142adem jest wykorzystanie prametru style kt\u00f3ry przedstawia na wykresie r\u00f3\u017cne rodzaje punkt\u00f3w. import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , hue = 'smoker' , style = 'smoker' ) plt . show () Ustawienie przezroczysto\u015bci punkt\u00f3w. To zastosowanie jest polecane gdy na wykresie jest wiele nak\u0142adaj\u0105cych si\u0119 na siebie punkt\u00f3w. import seaborn as sns import matplotlib.pyplot as plt sns . relplot ( x = 'total_bill' , y = 'tip' , data = tips , kind = 'scatter' , alpha = 0.4 ) plt . show ()","title":"Seaborn"},{"location":"DataScience/DataScience/#liniowe-wykresy-relacyjne","text":"W bibliotece seaborna wyst\u0119puj\u0105 dwa typy wykres\u00f3w relacyjnych: wykresy punktowe Wykres ten zak\u0142ada \u017ce ka\u017cdy punkt jest niezale\u017cn\u0105 obserwacj\u0105 wykresy liniowe Opiera sie na \u015bledzeniu tego samego w czasie Wykorzystanie wykresu punktowego do wizualizacji \u015bredniej godzinnej warto\u015bci wyst\u0119powania dwutlenku azotu nie jest odpowiednie. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_mean , kind = 'scatter' ) plt . show () Wynika to z faktu \u017ce chcemy zwizualizowa\u0107 zmienno\u015b\u0107 w czasie. Dlatego lepszym wyborem jest wykorzystanie wykresu liniowego. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_mean , kind = 'line' ) plt . show () Wykorzystuj\u0105c dane, kt\u00f3re uwzgl\u0119dniaj\u0105 dodatkowo miejsce lokalizacji pomiaru (wsch\u00f3d, zach\u00f3d, p\u00f3\u0142noc, po\u0142udnie) w danym mie\u015bcie. Przedstawiamy wykres kt\u00f3ry tworzy r\u00f3\u017cny kolor li\u0144 i ich kszta\u0142t\u00f3w dla danego regionu. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_loc_mean , kind = 'line' , style = 'location' , hue = 'location' ) plt . show () Dodanie parametru markers i ustawienie go na True Spowoduje wy\u015bwietlenie znacznika punktu dla ka\u017cdego punktu danych. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df_loc_mean , kind = 'line' , style = 'location' , hue = 'location' , markers = True ) plt . show () Je\u015bli nie chcemy aby style lin r\u00f3\u017cni\u0142y si\u0119 od podgrupy to wtedy nale\u017cy ustawi\u0107 parametr dashes na False Do wizualizacji danych, kt\u00f3rych jest wiele na ka\u017cd\u0105 godzin\u0119 zastosowanie wykresu punktowego scatter prowadzi do stworzenia wykresu kt\u00f3ry jest nie czytelny a punkty zachodz\u0105 na siebie. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'scatter' ) plt . show () W takich wypadkach nale\u017cy zastosowa\u0107 wykres liniowy. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'line' ) plt . show () Wykres liniowy zawiera wiele obserwacji na ka\u017cd\u0105 warto\u015b\u0107 x , kt\u00f3re zostan\u0105 zagregowane w jedn\u0105 sumaryczn\u0119 miar\u0119. Domy\u015blnie wy\u015bwietlana jest \u015brednia. Biblioteka seaborn automatycznie oblicza przedzia\u0142 ufno\u015bci dla ka\u017cdej \u015bredniej. Jest nim zacieniowany obszar. Zacieniowany obszar zawiera 95% danych. Mo\u017cna rozszerzy\u0107 ten obszar wykorzystuj\u0105c parametr ci i ustawiaj\u0105c go na sd . W tedy na wykresie zostan\u0105 przedstawione wszystkie dane. Przedzia\u0142 ufno\u015bci zostanie zwi\u0119kszony. import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'line' , ci = 'sd' ) plt . show () Mo\u017cna go nie umieszcza\u0107 na wykresie. Wtedy do parametru ci przypisujemy warto\u015b\u0107 None . import matplotlib.pyplot as plt import seaborn as sns sns . relplot ( x = 'hour' , y = 'NO_2_mean' , data = air_df , kind = 'line' , ci = 'None' ) plt . show ()","title":"Liniowe Wykresy relacyjne"},{"location":"DataScience/DataScience/#wykresy-kategoryczne","text":"Zalicza si\u0119 do nich wykresy zliczeniowe i s\u0142upkowe. S\u0142u\u017c\u0105 do por\u00f3wnania mi\u0119dzy r\u00f3\u017cnymi grupami. Wykres zliczaj\u0105cy wy\u015bwietla liczb\u0119 obserwacji w ka\u017cdej kategorii.","title":"Wykresy kategoryczne"},{"location":"DataScience/DataScience/#wykresy-zliczeniowe","text":"Do tworzenia r\u00f3\u017cych typ\u00f3w wykres\u00f3w kategorycznych wykorzystuje si\u0119 funkcj\u0119 catplot . Podobnie jak relplot() wykorzystuje parametry col= oraz row= Przyk\u0142ad zastosowania funkcji countplot() import matplotlib.pyplot as plt import seaborn as sns sns . countplot ( x = \"how_masculine\" , data = masculinity_data ) plt . show () Zamiast wykorzystywa\u0107 funkcj\u0119 countplot() wykorzystamy funkcj\u0119 catplot() . R\u00f3\u017cni\u0105 si\u0119 parametrem kind import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"how_masculine\" , data = masculinity_data , kind = \"count\" ) plt . show () Mo\u017cna tak\u017ce uporz\u0105dkowa\u0107 wykresy wed\u0142ug w\u0142asnego uznania. Robi si\u0119 to przy pomocy tablicy zawieraj\u0105cej dane rekordy oraz dodaniem do funkcji import matplotlib.pyplot as plt import seaborn as sns category_order = [ \"No answer\" , \"Not at all\" , \"Not very\" , \"Somewhat\" , \"Very\" ] sns . catplot ( x = \"how_masculine\" , data = masculinity_data , kind = \"count\" , order = category_order ) plt . show ()","title":"Wykresy zliczeniowe"},{"location":"DataScience/DataScience/#wykresy-supkowe","text":"Wykresy s\u0142upkowe pokazuj\u0105 \u015bredni\u0105 zmniennej ilo\u015bciowej dla ka\u017cdej chcianej kategorii. Podobnie jak w przypadku wykres\u00f3w zliczeniowych wykorzystuj\u0119 si\u0119 funkcj\u0119 catplot() . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"day\" , y = \"total_bill\" , data = tips , kind = \"bar\" ) plt . show () Seaborn automatycznie pokazuje przedzia\u0142y ufno\u015bci dla tych \u015brednich. Zawieraj\u0105 one 95% danych. Przedzia\u0142y te przekazuj\u0105 nam informacj\u0119 o poziomie niepewno\u015bci jaki jest do tych szacunk\u00f3w. Mo\u017cna nie pokazywa\u0107 tego przedzia\u0142u ufno\u015bci. Wykorzystujemy do tego parametr ci kt\u00f3re ustawiamy na None import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"day\" , y = \"total_bill\" , data = tips , kind = \"bar\" , ci = None ) plt . show () Mo\u017cna zmieni\u0107 orientacj\u0119. Ustawiamy wtedy zmienna kategoryczn\u0105 na zmienn\u0105 y . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( y = \"total_bill\" , x = \"day\" , data = tips , kind = \"bar\" , ci = None ) plt . show () W praktyce zmienn\u0105 kategoryczn\u0105 ( w tym przypadku day ) umieszczamy na osi x","title":"Wykresy s\u0142upkowe"},{"location":"DataScience/DataScience/#wykresy-pudekowe","text":"Przedstawia rozk\u0142ad danych ilo\u015bciowych. Pude\u0142ko przedstawia dane znajduj\u0105ce si\u0119 pomi\u0119dzy pierwszym a trzecim kwartylem. Linia po \u015brodku przedstawia median\u0119. S\u0142u\u017c\u0105 do por\u00f3wnywania rozk\u0142adu zmniennej ilo\u015bciowej do zmniennej kategorycznej . Tworzenie wykresu pude\u0142kowego import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" ) plt . show () Mo\u017cna tak\u017ce wykorzystywa\u0107 boxplot() . Praktyczniej lepiej jest korzysta\u0107 z funkcji catplot ze wzgl\u0119du na mo\u017cliwo\u015b\u0107 wykorzystywania parametr\u00f3w col , row . Mo\u017cna tak\u017ce zmienia\u0107 kolejno\u015b\u0107 boxplot import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" , order = [ \"Dinner\" , \"Lunch\" ]) plt . show () Wykresy pude\u0142kowe mog\u0105 zawiera\u0107 punkty odstaj\u0105ce (ang. outliers) Mo\u017cna je pomin\u0105\u0107 i wog\u00f3le ich nie bra\u0107 pod uwag\u0119. Mo\u017cna to osi\u0105gn\u0105\u0107 po przez zastosowanie parametru sym i przypisaniu do niego warto\u015bci \"\" . import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" , sym = \"\" ) plt . show () Rozst\u0119p mi\u0119dzykwartylowy (IQR) to miejsce pomi\u0119dzy pierwszym a trzecim kwartylem. Punkty odstaj\u0105ce pojawiaj\u0105 sie po przekroczeniu 1,5 warto\u015bci rozst\u0119pu mi\u0119dzykwartylowego. Istnieje mo\u017cliwo\u015b\u0107 zwi\u0119kszenia \"w\u0105s\u00f3w\" przy wykorzystaniu parametru whis . Mo\u017cna modyfikowa\u0107 d\u0142ugo\u015b\u0107 w\u0105s\u00f3w po przez rozszerzenie przedzia\u0142u otrzymujemy to po przez 2.0 * IQR (whis=2.0) . Mo\u017cna to tak\u017ce zrobi\u0107 modyfikuj\u0105c przedzia\u0142 whis=[5, 96] . import matplotlib.pyplot as plt import seaborn as sns g = sns . catplot ( x = \"time\" , y = \"total_bill\" , data = tips , kind = \"box\" , whis = [ 0 , 100 ]) plt . show ()","title":"Wykresy pude\u0142kowe"},{"location":"DataScience/DataScience/#point-plots","text":"Przedstawiaj\u0105 \u015bredni\u0105 oraz przedzia\u0142 ufno\u015bci wynosz\u0105cy 95%. Jest podobny do wykresu liniowego lecz r\u00f3\u017cni si\u0119 tym \u017ce punktowy wykres jest zale\u017cny od zmniennej x , kt\u00f3ra jest zmienn\u0105 kategoryczn\u0105 . Wykres liniowy jest zale\u017cny o warto\u015bci x kt\u00f3re s\u0105 zmiennymi ilo\u015bciowymi . Wykres punktowy pozwala na czytelniejsze por\u00f3wnanie wysoko\u015bci podgrup na jednym wykresie w por\u00f3wnaniu do boxplot . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"age\" , y = \"masculinity_important\" , data = masculinity_data , hue = \"feel_masculine\" , kind = \"point\" ) plt . show () Mo\u017cna storzy\u0107 wykres, gdzie punkty oznaczaj\u0105ce \u015brednie nie maj\u0105 po\u0142\u0105cze\u0144 mi\u0119dzy kolejnumi punktami. import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"age\" , y = \"masculinity_important\" , data = masculinity_data , hue = \"feel_masculine\" , kind = \"point\" , join = False ) plt . show () Istnieje mo\u017cliwo\u015b\u0107 aby punkt na wykresie by\u0142 median\u0105. Wykorzystuje sie do tego parametr estimator z biblioteki numpy . import matplotlib.pyplot as plt import seaborn as sns from numpy import median sns . catplot ( x = \"age\" , y = \"masculinity_important\" , data = masculinity_data , kind = \"point\" , estimator = median ) plt . show () Lepiej jest stosowa\u0107 median\u0119 ze wzgl\u0119du na to \u017ce jest bardziej odporna na punkty odstaj\u0105ce . Mo\u017cna doda\u0107 poziome linie na zako\u0144czeniu przedzia\u0142u ufno\u015bci. Wykorzystuj\u0119 si\u0119 do tego parametr capsize . import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"smoker\" , y = \"total_bill\" , data = tips , kind = \"point\" , capsize = 0.2 ) plt . show () Isnieje mo\u017cliwo\u015b\u0107 wy\u0142\u0105czenia przedzia\u0142u ufno\u015bci. import matplotlib.pyplot as plt import seaborn as sns sns . catplot ( x = \"smoker\" , y = \"total_bill\" , data = tips , kind = \"point\" , ci = None ) plt . show ()","title":"Point plots"},{"location":"DataScience/DataScience/#modyfikacja-wygladu-wykresu","text":"W seaborn wyst\u0119puj\u0105 pi\u0119\u0107 r\u00f3\u017cnych rodzai styl\u00f3w t\u0142a background kt\u00f3rych chcemy wy\u015bwietli\u0107: white, dark, whitegrid,darkgrid, ticks . Domy\u015blnym kolorem t\u0142a jest bia\u0142y. whitegrid umo\u017cliwia dodanie szarych poziomych linii na wykresie. ticks dodaje ma\u0142e kreski na osiach, dark dodaje szare tlo wykresu darkgrid dodaje szare t\u0142o na wykresie oraz dodaje poziome linie na wykresie, Wykorzystuje si\u0119 do tego metod\u0119 sns.set_style() Mo\u017cliwe jest wykorzystanie sns.set_palette() kt\u00f3ry zmienia kolory, //TO DO Doda\u0107 screena z 2:49 (screen z kolorami) z filmiku Changing plot style and color Wyst\u0119puj\u0105 tak\u017ce palety sekwencyjne , kt\u00f3re s\u0105 domy\u015blne. Istnieje mo\u017cliwo\u015b\u0107 tworzenia w\u0142asnych palet kolor\u00f3w. Robi si\u0119 to po przez stworzenie tablicy z nazwami kolor\u00f3w lub podanie szesnastkowych kod\u00f3w kolor\u00f3w. Aby u\u017cy\u0107 je w wykresie nalezy u\u017cyc nazej tablicy jako parametru naszej metody. Zmiana skali wykresu: Wykonuje si\u0119 to po przez u\u017cycie metody sns.set_context() Istnieje mo\u017cliwo\u015b\u0107 zmiany skali \"paper\", \"notebook\", \"talk\", \"poster\"","title":"Modyfikacja wygl\u0105du wykresu"},{"location":"DataScience/DataScience/#dodanie-tytuu-i-nazw-zmiennych","text":"Istnieje zmiany wizualizacji nazw na osiach. Biblioteka Seaborna dostarcza dwa r\u00f3\u017cne typy obiekt\u00f3w FacetGrids , AxesSubplots Aby sprawdzi\u0107 z jakim typem obiektu mamy doczynienia nale\u017cy u\u017cy\u0107 funkcji type() FacetGrids sk\u0142ada si\u0119 z jednego lub wi\u0119kszej liczby AxesSubplots kt\u00f3ry obs\u0142uguje w\u0105tki podrz\u0119dne, czyli mo\u017cliwe jest stworzenie wiele rodzai wykres\u00f3w. FacetGrid - relplot(), catplot() AxesSubplot - scatterplot(), countplot() Aby doda\u0107 tytu\u0142 do wykresu nale\u017cy u\u017cy\u0107 metody g.fig.suptitle(\"New Title\") Mo\u017cna zmieni\u0107 rozmiar wielko\u015bci tytu\u0142\u00f3w. Aby doda\u0107 tytu\u0142 do wykresu nale\u017cy u\u017cy\u0107 metody fig.suptitle(\"New Title\", y=1.03) Ustawienie tytu\u0142u dla ca\u0142ego wykresu w FacetGrid dodaje si\u0119 przy u\u017cyciu metody g.fig.suptitle(\"New Title\", y=1.03) Ustawienie tytu\u0142u dla ca\u0142ego wykresu w AxesSubplot g.set_title(\"New Title\", y=1.03\") g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box) g . fig . suptitle ( \"New Title\" , y = 1.03 ) g = sns . boxplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data ) g . set_title ( \"New Title\" , y = 1.03 ) Dodanie dw\u00f3ch wykres\u00f3w ko\u0142o siebie z podzia\u0142em na grupy. Do podzia\u0142u s\u0142uzy parametr col . g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" , col = \"Group\" ) Aby doda\u0107 podtytu\u0142 dla ka\u017cdego mniejszego wykresu wykorzystuje si\u0119 metod\u0119 set_titles(\"This is {col_name}\") Ponadto je\u015bli ma byc to nazwa warto\u015b\u015bci z kolumny to trzeba wykorzysta\u0107 col_name g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" , col = \"Group\" ) g . fig . suptitle ( \"New Title\" , y = 1.03 ) g . set_titles ( \"This is {col_name} \" ) Do ustawienia nazw osi wykorzystuj\u0119 si\u0119 metod\u0119 set() g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" ) g . set ( xlabel = \"New X label\" , ylabel = \"New Y label\" ) plt . show () Aby obr\u00f3ci\u0107 nazwy zmiennych kategorycznych wykorzystujemy metod\u0119 xticks z parametrem rotation . g = sns . catplot ( x = \"Region\" , y = \"Birthrate\" , data = gdp_data , kind = \"box\" ) plt . xticks ( rotation = 90 ) plt . show ()","title":"Dodanie tytu\u0142u i nazw zmiennych"},{"location":"DataScience/DataScience/#introdution-to-function-in-python","text":"","title":"Introdution to function in Python"},{"location":"DataScience/DataScience/#definiowanie-funkcji-bez-przyjmowania-zadnej-wartosci-oraz-bez-zwracania-zadnej-wartosci","text":"def square (): new_value = 4 ** 2 print ( new_value ) square ()","title":"Definiowanie funkcji bez przyjmowania \u017cadnej warto\u015bci oraz bez zwracania \u017cadnej warto\u015bci."},{"location":"DataScience/DataScience/#definiowanie-funkcji-z-przyjmowaniem-wartosci-ale-bez-zwracania-wartosci","text":"def square ( value ): new_value = value ** 2 print ( new_value ) square ( 4 )","title":"Definiowanie funkcji z przyjmowaniem warto\u015bci ale bez zwracania warto\u015bci."},{"location":"DataScience/DataScience/#definiowanie-funkcji-z-przyjmowaniem-wartosci-oraz-zwracajaca-wartosc","text":"def square ( value ): new_value = value ** 2 return new_value num = square ( 4 ) print ( num ) Opisywanie funkcji przed cia\u0142em funkcji nale\u017cy napisa\u0107 w komentarzu co ta funkcja robi. def square ( value ): \"\"\"Returns the square of a value.\"\"\" new_value = value ** 2 return new_value Funkcje przyjmuj\u0105ce wiele warto\u015bci: def raise_to_power ( value1 , value2 ): \"\"\"Raise value1 to power of value2.\"\"\" new_value = value1 ** value2 return new_value result = raise_to_power ( 2 , 3 ) print ( result ) Zwracanie wielu zmiennych z funkcji odbywa si\u0119 przy u\u017cyciu krotki. even_nums = ( 2 , 4 , 6 ) a , b , c = even_nums Mo\u017cna uzyska\u0107 dost\u0119p do krotki tak jak do listy. even_nums = ( 2 , 4 , 6 ) print ( even_nums [ 1 ]) second_num = even_nums [ 1 ] print ( second_num ) def raise_both ( value1 , value2 ): \"\"\"Raise value1 to the power of value2 and vice versa.\"\"\" new_value1 = value1 ** value2 new_value2 = value2 ** value1 new_tuple = ( new_value1 , new_value2 ) return new_tuple result = raise_both ( 2 , 3 ) print ( result )","title":"Definiowanie funkcji z przyjmowaniem warto\u015bci oraz zwracaj\u0105ca warto\u015b\u0107."},{"location":"DataScience/DataScience/#globalne-i-lokalne","text":"Wyst\u0119puj\u0105 trzy rodzaje zmiennych: Globalne zmienne s\u0105 zdefiniowane w g\u0142\u00f3wnym ciele skryptu, Lokalne zmienne s\u0105 zdefiniowane wewn\u0105trz funkcji, wbudowane zmienne jak print, type. Do wszystkich zmiennych mo\u017cna przypisywa\u0107 nowe warto\u015bci. def func1 (): num = 3 print ( num ) def func2 (): global num double_num = num * 2 num = 6 print ( double_num ) W powy\u017cszych funkcjach u\u017cywamy zmiennej lokalnej z jednej funkcji, kt\u00f3ra jest u\u017cywana jako r\u00f3wnie\u017c lokalna w drugiej funkcji jako zmiennea lokalna. Python w poszukiwaniu warto\u015bci zmiennej przeszukuj\u0119 najpierw funkcj\u0119 wewnetrzn\u0105, nast\u0119pnie funkcja otaczaj\u0105c\u0105(jesli taka jest) a na ko\u0144cu przeszukuje zmienne globalne.","title":"Globalne i lokalne"},{"location":"DataScience/DataScience/#zagniezdzanie-funkcji-jednej-w-druga","text":"Je\u015bli w jednej funkcji mamy duzo rzeczy, kt\u00f3re si\u0119 zagnie\u017cdzaj\u0105 to warto wtedy wykorzysta\u0107 funkcj\u0119 zagnie\u017cdzon\u0105. def mod2plus5 ( x1 , x2 , x3 ): \"\"\"Return the remainder plus 5 of tree values\"\"\" new_x1 = x1 % 2 + 5 new_x2 = x2 % 2 + 5 new_x3 = x3 % 2 + 5 return ( new_x1 , new_x2 , new_x3 ) Powy\u017csz\u0105 funkcj\u0119 mo\u017cemy zast\u0105pi\u0107 poni\u017csz\u0105 funkcj\u0105: def mod2plus5 ( x1 , x2 , x3 ): \"\"\"Returns the remainder plus 5 of three values.\"\"\" def inner ( x ): \"\"\"Returns the remainder plus 5 of value.\"\"\" return x % 2 + 5 return ( inner ( x1 ), inner ( x2 ), inner ( x3 )) print ( mod2plus5 ( 1 , 2 , 3 )) def raise_val ( n ): \"\"\"Return the inner function.\"\"\" def inner ( x ): \"\"\"Raise x to the power of n.\"\"\" raised = x ** n return raised return inner square = raise_val ( 2 ) cube = raise_val ( 3 ) print ( square ( 2 ), cube ( 4 )) #Output #4 64 Je\u015bli chcemy zmieni\u0107 warto\u015b\u0107 zmiennej w nie tylko w jednej funkcji wewn\u0119trznej ale tak\u017ce w ca\u0142ym zakresie zar\u00f3wno w danej funkcji jak i jej otoczeniu poprzedzamy nazw\u0119 zmiennej nonlocal . def outer (): \"\"\"Prints the value of n.\"\"\" n = 1 def inner (): nonlocal n n = 2 print ( n ) inner () print ( n ) outer () Warto\u015b\u0107 zmiennej wyszukuj\u0119 si\u0119 najpierw we funkcji lokalnej, nast\u0119pnie w funkcji otaczaj\u0105cej, po\u017cniej w zmiennych globalnych a na ko\u0144cu w zmiennych wbudowanych. Jest to metoda LEGB od pierwszych liter: L ocal scope, E nclosing functions G lobal B uilt-in","title":"Zagnie\u017cdzanie funkcji jednej w drug\u0105."},{"location":"DataScience/DataScience/#ustawienie-domyslnego-parametru-w-funkcji","text":"Definiuj\u0105c argumenty funkcji mo\u017cna odg\u00f3rnie przypisa\u0107 jak\u0105 warto\u015b\u0107 ma mie\u0107 domy\u015blnie argument. Mo\u017cna go zmieni\u0107 w wywo\u0142aniu funkcji. def power ( number , pow = 1 ): \"\"\"Raise number to the power of pow.\"\"\" new_value = number ** pow return new_value power ( 9 , 2 ) #81 power ( 9 , 1 ) #9 power ( 9 ) #9 Mo\u017cna tak\u017ce u\u017cywa\u0107 listy agrument\u00f3w (*args) jako argument funkcji. def add_all ( * args ): \"\"\"Sum all values in *args together.\"\"\" # Initialize sum sum_all = 0 # Accumulate the sum for num in args : sum_all += num return sum_all add_all ( 1 ) #1 add_all ( 1 , 2 ) #3 add_all ( 5 , 10 , 15 , 20 ) #50 Mo\u017cna tak\u017ce wykorzystywa\u0107 s\u0142owniki jako argumenty funkcji u\u017cywaj\u0105c do tego argument *kwargs * S\u0142owniki to struktura danych kt\u00f3ra przechowuje warto\u015bci jako klucz-warto\u015b\u0107** def print_all ( ** kwargs ): \"\"\"Print out key-value pairs in **kwargs.\"\"\" #Print out the key-value pairs for key , value in kwargs . items (): print ( key + \": \" + value ) print_all ( name = \"dumbledore\" , job = \"headmaster\" ) #Output #job: headmaster #name: dumbledore","title":"Ustawienie domy\u015blnego parametru w funkcji"},{"location":"DataScience/DataScience/#funkcje-lambda","text":"Jest to szybszy spos\u00f3b pisania funkcji. U\u017cywa si\u0119 do tego s\u0142owa kluczowego lambda. Jest to szybki spos\u00f3b pisania funkcji. Konsktrukcja Zapisujemy nasz\u0105 funkcj\u0119 i przypisujemy do niej po s\u0142owie kluczowym lambda dwie nazwy argument\u00f3w, po nich stawiamy dwukropek ( : ). Po nich stwiamy wyra\u017cenie okre\u015blaj\u0105ce co funkcja ma zwr\u00f3ci\u0107. raise_to_power = lambda x , y : x ** y raise_to_power ( 2 , 3 ) #Output #8 Nazywamy to wtedy funkcjami anonimowymi Sprawdzmy funkcj\u0119 map, kt\u00f3ra przyjmuje dwa : funkcj\u0119 oraz sekwencj\u0119 taka jak lista. // TO DO jak to dzia\u0142a nums = [ 48 , 6 , 9 , 21 , 1 ] square_all = map ( lambda num : num ** 2 , nums ) print ( square_all ) #Output #<map object at 0x103e065c0> Jest to w rzeczwisto\u015bci obiekt mapy. print ( list ( square_all )) #Output #[2304, 36, 81, 441, 1] //TO Do //Dodac opisy z dw\u00f3ch ostatnich lekcji z kursu Introduction to Functions in Python z rozdzia\u0142u: Lambda functions and error-handling z lekcji Filter(), Reduce(). Funkacja mo\u017ce zwraca\u0107 b\u0142\u0105d. Aby wy\u0142apyra\u0107 wyj\u0105tek nale\u017cy u\u017cy\u0107 kombinacji try & except . def sqrt ( x ): \"\"\"Return the square root of a number.\"\"\" try : return x ** 0.5 except : print ( \"x must be an int or float\" ) Mo\u017cna tak\u017ce zrobi\u0107 tak \u017ceby wy\u0142apywa\u0142a tylko jeden rodzaj b\u0142\u0119du. def sqrt ( x ): \"\"\"Return the square root of a number.\"\"\" try : return x ** 0.5 except TypeError : print ( \"x must be an int or float\" ) Je\u015bli nie chcemy aby funkcja dzia\u0142a\u0142a dla liczb ujemnych nalezy u\u017cy\u0107 if i dodatkowo u\u017cy\u0107 s\u0142owa kluczowego raise co spowoduje przypisanie do wyj\u0105tku def sqrt ( x ): \"\"\"Return the square root of a number.\"\"\" if x < 0 : raise ValueError ( 'x must be non-negative' ) try : return x ** 0.5 except TypeError : print ( \"x must be an int or float\" )","title":"Funkcje Lambda"},{"location":"DataScience/DataScience/#introduction-to-iterators","text":"","title":"Introduction to iterators"},{"location":"DataScience/DataScience/#playing-with-iterators","text":"enumerate() - funkcja kt\u00f3ra przyjmuje dowolny argument iterowalny i zwraca obiekt wyliczeniowy, kt\u00f3ry sk\u0142ada si\u0119 z indeksu oraz elementu. avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] e = enumerate ( avengers ) print ( type ( e )) #Output #<class 'enumerate'> Gdy chcemy zwr\u00f3ci\u0107 liste element\u00f3w w postaci listy krotek [(index_elementu, element), (index_drugiego_elementu, drugi_element)] to zwr\u00f3cimy list\u0119 krotek. e_list = list ( e ) print ( e_list ) #Output #[(0, 'hawkeye'), (1, 'iron man'), (2, 'thor'), (3, 'quicksilver')] Domy\u015blnym indeksem iteracji jest 0, ale mo\u017cna to zmieni\u0107 poprzez przypisanie do parametru start odpowiedniej warto\u015bci, avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] for index , value in enumerate ( avengers ): print ( index , value ) #Output # 0 hawkeye # 1 iron man # 2 thor # 3 quicksilver for index , value in enumerate ( avengers , start = 10 ): print ( index , value ) #Output # 10 hawkeye # 11 iron man # 12 thor # 13 quicksilver Funkcja zip(), kt\u00f3ry dwie listy umieszcza je w li\u015bcie krotek i zwraca list\u0119 krotek gdzie ka\u017cda krotka sk\u0142ada si\u0119 z po jednym elemencie z pierwszej i drugiej listy. avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] names = [ 'barton' , 'stark' , 'odinson' , 'maximoff' ] z = zip ( avengers , names ) print ( type ( z )) #Outout #<class 'zip'> z_list = list ( z ) print ( z_list ) #Output #[('hawkeye', 'barton'), ('iron man', 'stark'), ('thor', 'odinson'), ('quicksilver', 'maximoff')] Zamiast tworzy\u0107 liste mo\u017cemy stworzy\u0107 p\u0119tle avengers = [ 'hawkeye' , 'iron man' , 'thor' , 'quicksilver' ] names = [ 'barton' , 'stark' , 'odinson' , 'maximoff' ] for z1 , z2 in zip ( avengers , names ): print ( z1 , z2 ) #Output # hawkeye barton # iron man stark # thor odinson # quicksilver maximoff Mo\u017cna tak\u017ce u\u017cy\u0107 operatora splat do wydrukowania wszystkich element\u00f3w names = [ 'barton' , 'stark' , 'odinson' , 'maximoff' ] z = zip ( avengers , names ): print ( * z )","title":"Playing with iterators"},{"location":"DataScience/DataScience/#using-iterators-to-load-large-files-into-memory","text":"Je\u015bli danych jest bardzo du\u017co mo\u017cna je \u0142adowa\u0107 fragmentami przy wykorzystaniu funkcji read_csv przy u\u017cyciu parametru chunksize, kt\u00f3rego warto\u015b\u0107 ustawiamy na tyle fragment\u00f3w ile chcemy za\u0142adowa\u0107. Je\u015bli mamy plik CSV z kolumn\u0105 \"x\" zawieraj\u0105c\u0105 liczb\u0119 i chcemy obliczy\u0107 sum\u0119 wszystkich liczb w tej kolumnie, Ale plik jest za du\u017cy by przechowa\u0107 go w pami\u0119ci. Wykorzystanie chunksize spowoduje \u017ce ka\u017cdy gragment b\u0119dzie ramka danych (Data Frame). Do listy result zapisywane s\u0105 polejne rekordy. import pandas as pd result = [] for chunk in pd . read_csv ( 'data.csv' , chunksize = 1000 ): result . append ( sum ( chunk [ 'x' ])) total = sum ( result ) print ( total ) #Output # 4252532 Nie musimy tworzy\u0107 osobnej listy wystarczy \u017ce na pocz\u0105tku zainicjalizujemy jak\u0105\u015b zmienn\u0105 na 0. import pandas as pd total = 0 for chunk in pd . read_csv ( 'data_csv' , chunksize = 1000 ): total += sum ( chunk [ 'x' ]) print ( total ) #Output # 4252532","title":"Using iterators to load large files into memory"},{"location":"DataScience/DataScience/#list-comprehensions-and-generators","text":"W tym rozdziale zajmiemy si\u0119 zast\u0105pieniem zape\u0142nieniem listy przy u\u017cyciu p\u0119tli for, gdy\u017c s\u0105 nieefektywne obliczeniowo. Mo\u017cna to zrobi\u0107 w jednym wierszu kodu. nums = [ 12 , 8 , 21 , 3 , 16 ] new_nums = [] for num in nums : new_nums . append ( num + 1 ) print ( new_nums ) #Output #[13, 9, 22, 4, 17] Zamiast tego mo\u017cna sko\u017cysta\u0107 z wyra\u017ce\u0144 listowych. Sk\u0142adnia: w nawiasach kwadratowych wpisujemy wartosci kt\u00f3re chcesz utworzy\u0107 inaczej zwane wyra\u017ceniami wyj\u015bciowymi, po kt\u00f3rym nast\u0119puje wykonanie p\u0119tli for, kt\u00f3ra si\u0119 po\u017cniej do niej odwo\u0142uje. nums = [ 12 , 8 , 21 , 3 , 16 ] new_nums = [ num + 1 for num in nums ] print ( new_nums ) #Output #[13, 9, 22, 4, 17] Mo\u017cna stworzy\u0107 wyra\u017cenie listowe przy u\u017cyciu obiektu zakresu. result = [ num for num in range ( 11 )] print ( result ) #Output #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Mo\u017cna wykorzystywa\u0107 wyra\u017ce\u0144 listowych do zast\u0119powania dw\u00f3ch p\u0119tli. pairs_1 = [] for num1 in range ( 0 , 2 ): for num2 in range ( 6 , 8 ): pairs_1 . append (( num1 , num2 )) print ( pairs_1 ) #Output #[(0, 6), (0, 7), (1, 6), (1, 7)] Powy\u017cszy kod mo\u017cna zast\u0105pi\u0107 wyra\u017ceniem listowym pairs_2 = [( num1 , num2 ) for num1 in range ( 0 , 2 ) for num2 in range ( 6 , 8 )] print ( pairs_2 ) #Output #[(0, 6), (0, 7), (1, 6), (1, 7)] Istnieje mo\u017cliwo\u015b\u0107 dodania wyra\u017cenia warunkowego - if . [ num ** 2 for num in range ( 10 ) if num % 2 == 0 ] #Output # [0, 4, 16, 36, 64] List\u0119 mo\u017cna uzale\u017cni\u0107 od wyra\u017cenia wyj\u015bciowego. [ num ** 2 if num % 2 == 0 else 0 for num in range ( 10 )] #Output # [0, 0, 4, 0, 16, 0, 36, 0, 64, 0] Mo\u017cemy tak\u017ce pisa\u0107 wyra\u017cenia listowe tworz\u0105ce s\u0142owniki z element\u00f3w iteracyjnych. R\u00f3\u017cnic\u0105 jest to \u017ce u\u017cywamy nawias\u00f3w klamrowych zamist kwadratowych. pos_neg = { num : - num for num in range ( 9 )} print ( pos_neg ) #Output #{0: 0, 1: -1, 2: -2, 3: -3, 4: -4, 5: -5, 6: -6, 7: -7, 8: -8} print ( type ( pos_neg )) #Output #<class 'dict'> Generatory jest obiektem kt\u00f3ry nie tworzy listy ale mo\u017cna po nim iterowa\u0107 result = ( num for num in range ( 6 )) for num in result : print ( num ) #Output # 0 # 1 # 2 # 3 # 4 # 5 Mo\u017cna przekaza\u0107 generator do listy aby utworzyc list\u0119. result = ( num for num in range ( 6 )) print ( list ( result )) Mo\u017cna iterowa\u0107 generator jeden po drugim result = ( num for num in range ( 6 )) print ( next ( result )) # 0 print ( next ( result )) # 1 W tym wypadku warto\u015b\u0107 jest wyci\u0105gana tylko wtedy gdy jest potrzebna. Nazywa si\u0119 ocen\u0105 leniw\u0105, kt\u00f3rej warto\u015b\u0107 wyra\u017cenia jest op\u00f3\u017cniona. Mo\u017ce to bardzo pom\u00f3c podczas pracy z bardzo duzymi sekwencjami danych poniewa\u017c umo\u017cliwia generowanie elementy sekwencji w locie. Na generatorach mo\u017cna wykonywa\u0107 te same operacje co na listach. Funkcje generatora, kt\u00f3re po wywo\u0142aniu tworz\u0105 obiekty generatora. S\u0105 pisane ze sk\u0142adni\u0105 dowolnie innej funkcji zdefiniowanj przez u\u017cytkownika lecz zamiast zwracania warto\u015bci za pomoc\u0105 slowa kluczowego return zwracaj\u0105 sekwencje warto\u015bci przy u\u017cyciu s\u0142owa kluczowego yield. def num_sequence ( n ): \"\"\"Generate values from 0 to n.\"\"\" i = 0 while i < n : yield i i += 1","title":"List comprehensions and generators"},{"location":"DataScience/DataScience/#exploratory-data-analysis-in-python","text":"","title":"Exploratory Data Analysis in Python"},{"location":"DataScience/DataScience/#getting-to-know-a-dataset","text":"Aby wczyta\u0107 plik u\u017cywamy metody read_csv dost\u0119pnej w bibliotece Pandas. Wczytanie pierwszych rekord\u00f3w (domy\u015blnie 5) odbywa si\u0119 przez wykorzystanie metody head() books = pd . read_csv ( \"book.csv\" ) books . head () name author rating year genre 10-Day Green Smoothie Cleanse JJ Smith 4.73 2016 Non Fiction 11/22/63: A Novel Stephen King 4.62 2011 Fiction 12 Rules for Life Jordan B. Peterson 4.69 2018 Non Fiction 1984 (Signet Classics) George Orwell 4.73 2017 Fiction 5,000 Awesome Facts National Geographic Kids 4.81 2019 Childrens \u017beby wy\u015bwietli\u0107 informacj\u0119 o danych wykorzystujemy metod\u0119 info() . Jakiego s\u0105 typu, ile ich jest, czy s\u0105 warto\u015bci null, jakie s\u0105 nazwy kolumn i ile jest rekord\u00f3w w ka\u017cdej kolumnie books . info () #<class 'pandas.core.frame.DataFrame'> #RangeIndex: 350 entries, 0 to 349 #Data columns (total 5 columns): # # Column Non-Null Count Dtype # -- ------ -------------- ----- # 0 name 350 non-null object # 1 author 350 non-null object # 2 rating 350 non-null float64 # 3 year 350 non-null int64 # 4 genre 350 non-null object # dtypes: float64(1), int64(1), object(3) # memory usage: 13.8+ KB Aby zliczy\u0107 ile jest rekord\u00f3w w danej kolumnie u\u017cywamy metody value_counts . books . value_counts ( \"genre\" ) #genre #Non Fiction 179 #Fiction 131 #Childrens 40 #dtype: int64 Aby wy\u015bwietli\u0107 informacje dotycz\u0105ce opisu danych liczbowych wykorzystujemy metod\u0119 describe() . books . describe () # rating year #count 350.000000 350.000000 #mean 4.608571 2013.508571 #std 0.226941 3.284711 #min 3.300000 2009.000000 #25% 4.500000 2010.000000 #50% 4.600000 2013.000000 #75% 4.800000 2016.000000 #max 4.900000 2019.000000 Do wizualizacji danych mo\u017cna wykorzyta\u0107 histogram. import seaborn as sns import matplotlib.pyplot as plt sns . histplot ( data = books , x = 'rating' ) plt . show () Aby wy\u015bwietli\u0107 dane w nieco uporz\u0105dkowany spos\u00f3b mo\u017ce pos\u0142u\u017cy\u0107 parametr binwidth . Porz\u0105dkuje on dane tak by wy\u015bwietla\u0142y si\u0119 co zadany przedzia\u0142. sns . histplot ( data = books , x = 'rating' , binwidth = .1 ) Aby sprawdzi\u0107 jakiego typu s\u0105 dane w kolumnach u\u017cywamy metody info() lub dtypes . Aby zmieni\u0107 warto\u015bci w kolumnie wykorzystujemy metod\u0119 astype() Dost\u0119pne s\u0105 nast\u0119puj\u0105ce modywfikacje: - String str - Integer int - Float float - Dictionary dict - List list - Boolean bool books [ \"year\" ] = books [ \"year\" ] . astype ( int ) books . dtypes Aby sprawdzi\u0107 czy znajduj\u0105 si\u0119 wybrane dane kategoryczne wykorzystujemy metod\u0119 isin() . Zwraca ona warto\u015b\u0107 logiczn\u0105. Je\u015bli dana kategoryczna znajduj\u0119 si\u0119 w danej kolumnie to zwraca True je\u015bli jej nie ma to zwraca False . books [ \"genre\" ] . isin ([ \"Fiction\" , \"Non Fiction\" ]) Mo\u017cna wy\u015bwietli\u0107 negacj\u0119 poprzez poprzedzenie powy\u017cszego wyra\u017cenia tyld\u0105 ~ . books [ \"genre\" ] . isin ([ \"Fiction\" , \"Non Fiction\" ]) Wy\u015bwietlenie tylko tych rekord\u00f3w kt\u00f3re spe\u0142niaj\u0105 za\u0142o\u017cenie. books [ books [ \"genre\" ] . isin ([ \"Fiction\" , \"Non Fiction\" ])] . head () Wy\u015bwietlenie tylko tych rekord\u00f3w kt\u00f3ey maj\u0105 ten sam typ co dana kolumna. books . select_dtypes ( \"number\" ) . head () Wy\u015bwietlenie warto\u015bci minimalnej przy u\u017cyciu metody min() books [ \"year\" ] . min () # Output # 2009 Wy\u015bwietlenie warto\u015bci maksymalnej przy u\u017cyciu metody max() books [ \"year\" ] . max () # Output # 2019 Dane mo\u017cna grupowa\u0107 po zmiennych kategorycznych wyst\u0119puj\u0105cych w danej kolumnie przy u\u017cyciu metody groupby() . books . groupby ( \"genre\" ) . mean () Agregacja danych Wykorzystuje si\u0119 do tego metod\u0119 agg() w kt\u00f3rej umieszczamy funkcje greguj\u0105ce takie jak: sum sum() count count() minimum min() maximum max() variance var() Standard deviation std() books . agg ([ \"mean\" , \"std\" ]) Mo\u017cna agregowa\u0107 wybrane kolumny przy u\u017cyciu jednych funkcji agreguj\u0105cych oraz inne kolumny przy wykorzystaniu innych funkcji agreguj\u0105cych. books . agg ({ \"rating\" : [ \"mean\" , \"std\" ], \"year\" : [ \"median\" ]}) Mo\u017cna jednocze\u015bnie grupowa\u0107 oraz agregowa\u0107 dane. books . groupby ( \"genre\" ) . agg ( mean_rating = ( \"rating\" , \"mean\" ), std_rating = ( \"rating\" , \"std\" ), median_year = ( \"year\" , \"median\" ) ) Mo\u017cna przedstawi\u0107 wizualizacje danych kategorycznych przy wykorzystaniu wykresu kolumnowego: sns . barplot ( data = books , x = 'genre' , y = \"rating\" ) plt . show ()","title":"Getting to Know a Dataset"},{"location":"DataScience/DataScience/#addressing-missing-data","text":"Aby zsumowa\u0107 ilo\u015b\u0107 brakuj\u0105cych danych u\u017cywamy metod\u0119 sum() print ( salaries . isna () . sum ()) Aby usun\u0105\u0107 brakuj\u0105ce wiersze wykorzystuje si\u0119 metod\u0119 dropna W poni\u017cszym usuwamy dane w kolumnach w kt\u00f3rych liczba brakuj\u0105cych danych nie przekracza 5%. threshold = len ( salaries ) * 0.05 print ( threshold ) cols_to_drop = salaries . columns [ salaries . isna () . sum () <= threshold ] print ( col_to_drop ) salaries . dropna ( subset = cols_to_drop , inplace = True ) Parametr subset okre\u015ble z jakich kolumn maj\u0105 by\u0107 usuwane wiersze/ Parametr inplace=True powoduje \u017ce zmiany zostan\u0105 dokonane bezpo\u015brednio na obiekcie salaries , bez konieczno\u015bci przypisywania wyniku do nowej zmiennej. cols_with_missing_values = salaries . columns [ salaries . isna () . sum () > 0 ] print ( cols_with_missing_values ) for col in cols_with_missing_values [: - 1 ]: salaries [ col ] . fillna ( salaries [ col ] . mode ()[ 0 ]) Powy\u017csza p\u0119tla iteruje przez ka\u017cd\u0105 kolumn\u0119 z wy\u0142\u0105czeniem ostatniej kolumny. salaries[col].fillna(salaries[col].mode()[0]) . metoda fillna uzupe\u0142nia brakuj\u0105ce warto\u015bci w kolumnie col warto\u015bci\u0105 mody mode()[0] . Indeks [0] oznacza \u017ce to jest pierwsza najcz\u0119\u015bciej wyst\u0119puj\u0105ca warto\u015b\u0107. (najcz\u0119\u015bciej wyst\u0119puj\u0105ca warto\u015b\u0107 dla danej kolumny) Poni\u017cszy kod grupuje wed\u0142ug warto\u015bci w kolumnie Experience a nast\u0119pni\u0119 kolumna Salary_USD brana jest do dalszych analiz i wyliczane jest mediana, a na ko\u0144cu zapisujemy to do s\u0142ownika. salaries_dict = salaries . groupby ( \"Experience\" )[ \"Salary_USD\" ] . median () . to_dict () print ( salaries_dict ) Mo\u017cna tak\u017ce brakuj\u0105ce dane uzupe\u0142nia\u0107 po przez mapowanie przy wykorzystaniu s\u0142ownika. salaries [ \"Salary_USD\" ] = salaries [ \"Salary_USD\" ] . fillna ( salaries [ \"Experience\" ] . map ( salaries_dict )) Metoda nunique() Zlicza ile jest unikalnych stanowisk. print ( salaries [ \"Designation\" ] . nunique ()) Metoda str.contains przeszukuje kolumn\u0119 pod k\u0105tem okre\u015blonego ci\u0105gu. salaries [ \"Designation\" ] . str . contains ( \"Scientist\" ) Aby wyszuka\u0107 dane z wybranej kolumny kt\u00f3re zaczynaj\u0105 si\u0119 od frazy wykorzystujemy znak ^ . salaries [ \"Designation\" ] . str . contains ( \"^Data\" ) job_categories = [ \"Data Science\" , \"Data Analytics\" , \"Data Engineering\" , \"Machine Learning\" , \"Managerial\" , \"Consultant\" ] data_science = \"Data Scientist|NLP\" data_analyst = \"Analyst|Analytics\" data_engineer = \"Data Engineer|ETL|Architect|Infrastructure\" ml_engineer = \"Machine Learning|ML|Big Data|AI\" manager = \"Manager|Head|Director|Lead|Principal|Staff\" consultant = \"Consultant|Freelance\" conditions = [ ( salaries [ \"Designation\" ] . str . contains ( data_science )), ( salaries [ \"Designation\" ] . str . contains ( data_analyst )), ( salaries [ \"Designation\" ] . str . contains ( data_engineer )), ( salaries [ \"Designation\" ] . str . contains ( ml_engineer )), ( salaries [ \"Designation\" ] . str . contains ( manager )), ( salaries [ \"Designation\" ] . str . contains ( consultant )) ] salaries [ \"Job_Category\" ] = np . select ( conditions , job_categories , default = \"Other\" ) print ( salaries [[ \"Designation\" , \"Job_Category\" ]] . head ()) # Designation Job_Category # 0 Data Scientist Data Science # 1 Machine Learning Scientist Machine Learning # 2 Big Data Engineer Data Engineering # 3 Product Data Analyst Data Analytics # 4 Machine Learning Engineer Machine Learning sns . countplot ( data = salaries , x = \"Job_Category\" ) plt . show () Dane kt\u00f3re s\u0105 obiektami mo\u017cna przekonwertowa\u0107 na dowolny typ. Najpierw trzeba usun\u0105\u0107 przecinki jako seperatory tysi\u0119cy, nast\u0119pnie float kt\u00f3ry zmieni typ danych. Stworzenie nowej kolumny do konwersji danych. Aby zast\u0105pi\u0107 jaki\u015b znak jakim\u015b innym wykorzystujemy metod\u0119 str.replace() pd . Series . str . replace ( \"znak do usuni\u0119cia\" , \"znak kt\u00f3ry s\u0142u\u017cy do zast\u0105pienia\" ) Na przyk\u0142ad: Zast\u0119pujemy przecinek i niczym go niezast\u0119pujemy. salaries [ \"Salary_In_Rupees\" ] = salaries [ \"Salary_In_Rupees\" ] . str . replace ( \",\" , \"\" ) Aby przekonwertowa\u0107 dane u\u017cywamy metody astype() salaries [ \"Salary_In_Rupees\" ] = salaries [ \"Salary_In_Rupees\" ] . astype ( float ) Wiedz\u0105c \u017ce Rupee to 0,012 dolara ameryka\u0144skiego salaries [ \"Salary_In_Rupees\" ] = salaries [ \"Salary_In_Rupees\" ] * 0.012 Aby po grupowac dane po warto\u015bciach w kolumne Company_Size tak by zawiera\u0142y \u015brednie zarobki w dolarach u\u017cywamy poni\u017cszego przyk\u0142adu: salaries . groupby ( \"Company_Size\" )[ \"Salary_USD\" ] . mean () Zamiast tworzy\u0107 now\u0105 tabel\u0119 jak w przypadku powy\u017cszym lepiej jest stworzy\u0107 kolumn\u0119 kt\u00f3ra b\u0119dzie wylicza\u0142a odchylenie standardowe od wynagrodze\u0144 na podstawie do\u015bwiadczenia. salaries [ \"std_dev\" ] = salaries . groupby ( \"Experience\" )[ \"Salary_USD\" ] . transform ( lambda x : x . std ()) Aby zliczyc ile jest poszczeg\u00f3lnych przypadk\u00f3w korzystamy z metody value_counts() print ( salaries [[ \"Experience\" , \"std_dev\" ]] . value_counts ()) Aby stworzy\u0107 kolumn\u0119 w kt\u00f3rej b\u0119d\u0105 przechowywane mediany wynagrodze\u0144 na podstawie wielko\u015bci firmy. Robimy to przy wykorzystaniu poni\u017cszego wyra\u017cenia. salaries [ \"median_by_comp_size\" ] = salaries . groupby ( \"Company_Size\" )[ \"Salary_USD\" ] . transform ( lambda x : x . median ()) Punkty Odstaj\u0105ce g\u00f3rne pojawiaj\u0105 si\u0119 dla warto\u015bci wiekszej ni\u017c 1,5 odst\u0119pu mi\u0119dzy kwartylnego ( IQR ) ponad trzeci kwartyl. IQR = 75th - 25th percentile Upper Outliers > 75th percentile + (1.5 * IQR) Punkty odstaj\u0105ce dolene pojawiaj\u0105 sie dla warto\u015bci mniejszej ni\u017c 1.5 odst\u0119pu mi\u0119dzy kwartylnego ( IQR ) poni\u017cej pierwszego kwartylu. IQR = 75th - 25th percentile Lower Outliers < 25th percentile - (1.5 * IQR) seventy_fifth = salaries [ \"Salary_USD\" ] . quantile ( 0.75 ) twenty_fifth = salaries [ \"Salary_USD\" ] . quantile ( 0.25 ) salaries_iqr = seventy_fifth - twenty_fifth print ( salaries_iqr ) Aby obliczyc skrajne warto\u015bci po kt\u00f3rych przekroczeniu pojawiaj\u0105 si\u0119 punkty odstaj\u0105ce. Korzystamy z powy\u017cszych oblicze\u0144. upper = seventy_fifth + ( 1.5 * salaries_iqr ) lower = twenty_fifth - ( 1.5 * salaries_iqr ) print ( upper , lower ) Aby wy\u015bwietli\u0107 dane dla kt\u00f3rych warto\u015bci s\u0105 odstaj\u0105ce korzystamy z poni\u017cszego kodu: salaries [( salaries [ \"Salary_USD\" ] < lower ) | ( salaries [ \"Salary_USD\" ] > upper )][[ \"Experience\" , \"Employee_Location\" , \"Salary_USD\" ]] Mo\u017cemy odfiltrowa\u0107 punkty odstaj\u0105ce no_outliers = salaries [( salaries [ \"Salary_USD\" ] > lower ) & ( salaries [ \"Salary_USD\" ] < upper > )] print ( no_outliers [ \"Salary_USD\" ] . describe ())","title":"Addressing missing data"},{"location":"DataScience/DataScience/#relationships-in-data","text":"","title":"Relationships in Data"},{"location":"DataScience/DataScience/#data-miesiace-dzien","text":"W wi\u0119kszo\u015bci przypadk\u00f3w podczas importu danych dane dotycz\u0105ce dat i godzin s\u0105 typami object . divorce = pd . read_csv ( \"divorce.csv\" ) divorce . head () divorce . dtypes Mo\u017cna naprawic tak by odrazu dane by\u0142y czytane jako daty u\u017cywaj\u0105c parametru parse_dates divorce = pd . read_csv ( \"divorce.csv\" , parse_dates = [ \"marriage_date\" ]) divorce . dtypes Mo\u017cna tak\u017ce zmieni\u0107 typ danych po zaimportowaniu danych. divorce [ \"marriage_date\" ] = pd . to_datetime ( divorce [ \"marriage_date\" ]) divorce . dtypes Je\u015bli data jest przechowywana w trzech r\u00f3znych kolumnach takich jak miesi\u0105c dzie\u0144 rok to mozna to zapisa\u0107 we wsp\u00f3lnej kolumnie. divorce [ \"marriage_date\" ] = pd . to_datetime ( divorce [[ \"month\" , \"day\" , \"year\" ]]) Mo\u017cna wy\u0142uska\u0107 same miesi\u0105ce z daty przy wykorzystaniu parametru dt.month divorce [ \"marriage_month\" ] = divorce [ \"marriage_date\" ] . dt . month divorce . head () Mo\u017cna stworzy\u0107 wykres zale\u017cno\u015bci miedzy d\u0142ugo\u015bci\u0105 ma\u0142\u017ce\u0144stwa a miesi\u0105cem gdy wzi\u0119to \u015blub. sns . lineplot ( data = divorce , x = \"marriage_month\" , y = \"marriage_duration\" ) plt . show () Korelacja opisuje kierunek zale\u017cno\u015bci mi\u0119dzy dwiema zmiennymi oraz jej warto\u015b\u0107(si\u0142\u0119) divorce . corr () Heatmapa Okre\u015bla szybka wizualizacje interpretacji korelacji. //TO DO Wyja\u015bnij co znaczy parametr annot sns . heatmap ( divorce . corr (), annot = True ) plt . show () Powy\u017csza korelacja jest liniowa. Mo\u017cliwe s\u0105 korelacja super-liniowe (O(n log n)) lub kwadratowe. Dlatego nale\u017cy wzbogaca\u0107 nasze wykresy korelacji wykresami punktowymi. Poni\u017cej przedstawiono wykres korelacji zarobk\u00f3w miesi\u0119cznych kobiet i m\u0119\u017cczyzn w chwili rozwodu sns . scatterplot ( data = divorce , x = \"income_man\" , y = \"income_woman\" ) plt . show () // TO DO Doda\u0107 wykres punktowy Po tej wizualizacji wida\u0107 \u017ce zwi\u0105zek istnieje, ale nie jest szczeg\u00f3lnie silny tak jak to sugerowa\u0142a nasza mapa popularno\u015bci. Aby zobaczy\u0107 wykres wszystkich relacji mi\u0119dzy zmiennymi numerycznymi umozliwia metoda pairplot sns . pairplot ( data = divorce ) plt . show () Mo\u017cna tak\u017ce ograniczy\u0107 liczb\u0119 wy\u015bwietlonych relacji, ustawiaj\u0105c parametr vars . sns . pairplot ( data = divorce , vars = [ \"income_man\" , \"income_woman\" , \"marriage_duration\" ]) plt . show ()","title":"Data Miesi\u0105ce dzie\u0144"},{"location":"DataScience/DataScience/#zwiazki-miedzy-zmiennymi-kategorycznymi","text":"divorce [ \"education_man\" ] . value_counts () Nale\u017cy dokonac wizualizacji by zobaczy\u0107 powi\u0105zania miedzy liczb\u0105 ma\u0142ze\u0144stwa a d\u0142ugo\u015bci\u0105 ma\u0142\u017ce\u0144stwa. sns . histplot ( data = divorce , x = \"marriage_duration\" , binwidth = 1 ) plt . show () Aby przedstawi\u0107 zwi\u0105zek (liczb\u0119) mi\u0119dzy d\u0142ugo\u015bci\u0105 ma\u0142\u017ce\u0144stwa w odniesieniu do poziomu wykszta\u0142cenia m\u0119\u017cczyzny. sns . histplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" , binwidth = 1 ) plt . show () Zwi\u0105zek mi\u0119dzy d\u0142ugo\u015bci\u0105 trwania ma\u0142\u017ce\u0144stwa a poziomem wykszta\u0142cenia nie jest do ko\u0144ca jasny. Wykresy te rozwi\u0105zuj\u0105 wykresy Kernel Density Estimate ( KDE ) dost\u0119pne w bibliotece Seaborn. sns . kdeplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" ) plt . show () // TO DO W por\u00f3wnaniu do histogram\u00f3w \u015brodowisko KDE uwa\u017ca si\u0119 za bardziej zrozumia\u0142e, zw\u0142aszcza gdy pokazuje wiele dystrybucji. Nalezy zauwa\u017cy\u0107, \u017ce lokalizacja szczytowego czasu trwania ma\u0142\u017ce\u0144stwa dla ka\u017cdego poziomu m\u0119skiego jest bardziej widoczna niz na histogramie. Mo\u017cna wy\u0142\u0105czy\u0107 algorytm wyg\u0142adzenia bo to on psuje poprawny odbi\u00f3r wykresu. Algorytm ten mo\u017ce powodowa\u0107 \u017ce d\u0142ugo\u015b\u0107 niekt\u00f3rych ma\u0142\u017ce\u0144stw mo\u017ce by\u0107 kr\u00f3tsza od zera. Mo\u017cna to zmieni\u0107 i pomin\u0105\u0107 algorytm wyg\u0142adaaj\u0105cy po przez zastosowanie parametru cut . Parametr cut przekazuje informacj\u0119 jak daleko poza minimalne i maksymalne dane powinna si\u0119ga\u0107 krzywa podczas stosowania wyg\u0142adzenia. sns . kdeplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" , cut = 0 ) plt . show () //TO DO DOdac ten wykres Wykres ten przedstawia tylko te ma\u0142\u017ce\u0144stwa trwaj\u0105ce conajmniej jeden rok. Je\u017celi interesuje nas funkcja rozk\u0142adu kumulatywnego mo\u017cna ustawi\u0107 parametr cumulative sns . kdeplot ( data = divorce , x = \"marriage_duration\" , hue = \"education_man\" , cut = 0 , cumulative = True ) plt . show () Wykres ten przedstawia prawdopodobi\u0144stwo \u017ce czas trwania ma\u0142\u017ce\u0144stwa b\u0119dzie kr\u00f3tszy ni\u017c dany okres. Mo\u017cemy stworzy\u0107 przybli\u017cony wiek zawarcia ma\u0142\u017ce\u0144stwa kobiet i m\u0119\u017cczyzn. divorce [ \"man_age_marriage\" ] = divorce [ \"marriage_year\" ] - divorce [ \"dob_man\" ] . dt . year divorce [ \"woman_age_marriage\" ] = divorce [ \"marriage_year\" ] - divorce [ \"dob_woman\" ] . dt . year Przedstawiono wykres punktowy na wykresie punktowym. sns . scatterplot ( data = divorce , x = \"woman_age_marriage\" , y = \"man_age_marriage) plt . show () Przedstawiaj\u0105c dane na wykresie punktowym koloruj\u0105ce punkty po poziomie wykszta\u0142cenia przedstawia wykres poni\u017cszy: sns . scatterplot ( data = divorce , x = \"woman_age_marriage\" , y = \"man_age_marriage\" , hue = \"education_man\" ) plt . show () Mo\u017cna okre\u015bli\u0107 jaka cz\u0119\u015bci\u0105 ca\u0142o\u015bci jest dana kategorii. Pozwala to okre\u015bli\u0107 czy dany zbi\u00f3r jest reprezentacyjny dla ca\u0142ej populacji. planes [ \"Destination\" ] . value_counts ( normalize = True ) Inn\u0105 metod\u0105 na zwerfikowanie cz\u0119sto\u015b\u0107 kombinacji klas s\u0105 tabele krzy\u017cowa. W naszym przypadku to cz\u0119stotliwo\u015b\u0107 tras lot\u00f3w. Nast\u0119pnie wybieramy kolumn\u0119, kt\u00f3ra ma by\u0107 u\u017cywana jako indeks dla tabeli pd . crosstab ( planes [ \"Source\" ], planes [ \"Destination\" ]) Mo\u017cna zastosowa\u0107 dodatkowo funkcje agreguj\u0105ce. W poni\u017cszym przypadku jest to mediana cen dla danego kierunku pd . crosstab ( planes [ \"Source\" ], planes [ \"Destination\" ], values = planes [ \"Price\" ], aggfunc = \"median\" ) Je\u015bli mam dane dotycz\u0105ce liczb\u0119 przystank\u00f3w wyra\u017cona jako \"1 przystanek\"(1 stop), \"2 przystanki\"(2 stops), \"3 przystanki\"(3 stops) print ( planes [ \"Total_Stops\" ] . value_counts ()) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . str . replace ( \" stops\" , \"\" ) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . str . replace ( \" stop\" , \"\" ) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . str . replace ( \" non-stop\" , \"0\" ) planes [ \"Total_Stops\" ] = planes [ \"Total_Stops\" ] . astype ( int ) Aby zobaczy\u0107 jak ceny si\u0119 zmieniaj\u0105 w ciagu miesi\u0119cy oraz jak to wygl\u0105da w tygodniu. planes [ \"month\" ] = planes [ \"Date_of_Journey\" ] . dt . month planes [ \"weekday\" ] = planes [ \"Date_of_Journey\" ] . dt . weekday print ( planes [[ \"month\" , \"weekday\" , \"Date_of_Journey\" ]] . head ()) Mo\u017cna tak\u017ce wyodr\u0119bni\u0107 godzin\u0119 odlotu i przylotu planes [ \"Dep_Hour\" ] = planes [ \"Dep_Time\" ] . dt . hour planes [ \"Arrival_Hour\" ] = planes [ \"Arrival_Time\" ] . dt . hour Mo\u017cna tak\u017ce grupowa\u0107 dane liczbowe i oznacza\u0107 je jako klasy. Czyli stworzenie nowej kolumny kt\u00f3ra b\u0119dzie zawiera\u0142a opis dla danej liczby przypisuj\u0105c jej warto\u015b\u0107 kategoryczn\u0105. twenty_fifth = planes [ \"Price\" ] . quantile ( 0.25 ) median = planes [ \"Price\" ] . median () seventy_fifth = planes [ \"Price\" ] . quantile ( 0.75 ) maximum = planes [ \"Price\" ] . max () Nast\u0119pnie tworzymy list\u0119 kategorii, a nast\u0119pnie tworzymy zbi\u00f3r zakres\u00f3w dla kt\u00f3rych przypisana zostanie odpowiednia warto\u015b\u0107 kategorii. labels = [ \"Economy\" , \"Premium Economy\" , \"Business Class\" , \"First Class\" ] bins = [ 0 , twenty_fifth , median , seventy_fifth , maximum ] Do przypisania nowej kategorii z wcze\u015bniej utworzonej listy slu\u017cy metoda cut planes [ \"Price_Category\" ] = pd . cut ( planes [ \"Price\" ], labels = labels , bins = bins ) Mo\u017cemy teraz stworzyc wykres kategorii lot\u00f3w w odniesieniu do lin lotniczych. sns . countplot ( data = planes , x = \"Airline\" , hue = \"Price_Category\" ) plt . show ()","title":"Zwi\u0105zki mi\u0119dzy zmiennymi kategorycznymi"},{"location":"DataScience/DataScience/#working-with-categorical-data-in-python","text":"Zmienna jest zmienn\u0105 kategoryczn\u0105 o ile zawiera sko\u0144czon\u0105 liczb\u0119 odr\u0119bnych grup lub kategorii. W badaniach naukowych zwana r\u00f3wnie\u017c danymi jako\u015bciowymi. Dane kategoryczne mo\u017cna podzieli\u0107 na trzy typy: porz\u0105dkowe i nominalne. Je\u015bli zmnienna kategoryczna ma naturaln\u0105 kolejno\u015b\u0107 rang naprzyk\u0142ad stopnie wojskowe to mo\u017cna j\u0105 uzna\u0107 za zmien\u0105 kategoryczn\u0105 porz\u0105dkow\u0105. Zmienna kategoryczna nominalna to takie dane kt\u00f3rych nie mo\u017cna umie\u015bci\u0107 w porz\u0105dku naturalnym np. ulubione kolory Je\u015bli kolumny ramki danych po wykorzystaniu metody .info() prezentuj\u0105 dane w kolumnie jako object to najprawdopodobniej oznacza \u017ce mamy doczynienia ze zmienn\u0105 kategoryczn\u0105. Aby otrzyma\u0107 jeszcze wi\u0119cej informacji na temat danych w danej kolumnie mo\u017cemy u\u017cy\u0107 do tego parametru describe() adult[\"Marital Status\"].describe() . #count 32561 #unique 7 #top Married-civ-spouse #freq 14976 #Name: Marital Status, dtype: object Dzi\u0119ki temu dostajemy informacje o licznie element\u00f3w w danej kolumnie a tak\u017ce ile unikalnych warto\u015bci znajduje sie w kolumnie, najpopulaniejsz\u0105 kategori\u0119 i liczb\u0119 jej wyst\u0105pie\u0144. Innym sposobem jest wykorzystanie metody value_counts() , kt\u00f3ra zwraca warto\u015bci kategoryczne oraz ich liczb\u0119. # Married-civ-spouse 14976 # Never-married 10683 # Divorced 4443 # Separated 1025 # Widowed 993 # Married-spouse-absent 418 # Married-AF-spouse 23 # Name: Marital Status, dtype: int64 Mo\u017cna tak\u017ce zwr\u00f3ci\u0107 ile procent danej kategorii jest w danej kolumnie przy u\u017cyciu metody i odpowiedniego parametru value_counts(normalize=True) # Married-civ-spouse 0.459937 # Never-married 0.328092 # Divorced 0.136452 # Separated 0.031479 # Widowed 0.030497 # Married-spouse-absent 0.012837 # Married-AF-spouse 0.000706 # Name: Marital Status, dtype: float64 Wy\u015bwietlenie typu ka\u017cdej kolumny odbywa sie po przez wykorzystanie metody dtypes Aby wy\u015bwitlic typ danej serii czyli danej kolumny u\u017cywamy metody dtype . O oznacza \u017ce to obiekty. adult [ \"Marital Status\" ] . dtype #dtype('O') adult [ \"Marital Status\" ] = adult [ \"Marital Status\" ] . astype ( \"category\" ) adult [ \"Marital Status\" ] . dtype # S\u0105 dwa sposoby tworzenia serii kategoeycznych, gdy dane nie s\u0105 jeszcze w formacie DataFrame. Wykorzystuje sie do tego parametr dtype my_data = [ \"A\" , \"A\" , \"C\" , \"B\" , \"C\" , \"A\" ] my_series1 = pd . Series ( my_data , dtype = \"category\" ) print ( my_series1 ) Innym sposobem jest wykorzystanie metody Categorical my_data = [ \"A\" , \"B\" , \"C\" , \"B\" , \"C\" , \"A\" ] my_series2 = pd . Categorical ( my_data , categories = [ \"C\" , \"B\" , \"A\" ], ordered = True ) my_series2 #[A, A, C, B, C, A] #Categories (3, object): [C < B < A] Przechowywanie serii pand z typem categorical jest przydatne z powodu oszcz\u0119dno\u015bci ogromnej liczby pami\u0119ci. adult = pd . read_csv ( \"data/adult.csv\" ) adult [ \"Marital Status\" ] . nbytes #260488 adult [ \"Marital Status\" ] = adult [ \"Marital Status\" ] . astype ( \"category\" ) adult [ \"Marital Status\" ] . nbytes #32617 Mo\u017cna przed wczytaniem zrobic s\u0142ownik gdzie kluczem b\u0119dzie kolumna a warto\u015bcia typ zmiennej. adult_dtypes = { \"Marital Status\" : \"category\" } adult = pd . read_csv ( \"data/adult.csv\" , dtype = adult_dtypes ) adult [ \"Marital Status\" ] . dtype # CategoricalDtype(categories=[' Divorced','Married-AF-spouse',..., ' Widowed'], ordered=False) .str umo\u017cliwia wykonywanie operacji na danych tekstowych w kolumnach typu Series .apply() pozwala na zastosowanie funkcji dla ka\u017cdego elementu. U\u017cywanie funkcji NumPy w seriach kategorycznych zwykle powoduje b\u0142\u0119dy. Trzeba sprawdz\u0107 zawsze czy mamy doczynienia ze zmien\u0105 kategoryczn\u0105. Check - sprawdzenie used_cars [ \"color\" ] = used_cars [ \"color\" ] . astype ( \"category\" ) used_cars [ \"color\" ] = used_cars [ \"color\" ] . str . upper () print ( used_cars [ \"color\" ] . dtype ) # object convert - przekszta\u0142cenie used_cars [ \"color\" ] = used_cars [ \"color\" ] . astype ( \"category\" ) print ( used_cars [ \"color\" ] . dtype ) # category Trzeba sprawdza\u0107 czy zmiany zadzia\u0142a\u0142y zgodnie z zamierzeniami used_cars [ \"color\" ] = used_cars [ \"color\" ] . astype ( \"category\" ) used_cars [ \"color\" ] . cat . set_categories ([ \"black\" , \"silver\" , \"blue\" ], inplace = True ) used_cars [ \"color\" ] . value_counts ( dropna = False ) Przyk\u0142ad \u017ce nie mo\u017cna wykorzysta\u0107 funkcji NumPy: used_cars [ \"number_of_photos\" ] = used_cars [ \"number_of_photos\" ] . astype ( \"category\" ) used_cars [ \"number_of_photos\" ] . sum () Mo\u017cna jednak przekonwertowa\u0107 szereg na liczb\u0119 ca\u0142kowit\u0105 i zastosowa\u0107 sumowanie. used_cars [ \"number_of_photos\" ] . astype ( int ) . sum () # .str converts the column to an array used_cars [ \"color\" ] . str . contains ( \"red\" ) # 0 False # 1 False Kodowania etykiet to technika kodowania warto\u015bci kategorycznych jako liczb ca\u0142kowitych. Kody zaczynaj\u0105 si\u0119 od 0 i ko\u0144cz\u0105 na n - 1 , gdzie n to liczba kategorii. Kod -1 skazywany jest dla brakuj\u0105cej warto\u015bci. Kodowanie etykiet s\u0142u\u017cy do oszcz\u0119dzania pami\u0119ci i upraszczania odpowiedzi.","title":"Working with Categorical Data in Python"},{"location":"DataScience/DataScience/#tworzenie-kodow","text":"used_cars [ \"manufacturer_name\" ] = used_cars [ \"manufacturer_name\" ] . astype ( \"category\" ) used_cars [ \"manufacturer_name\" ] = used_cars [ \"manufacturer_name\" ] . cat . codes print ( used_cars [[ 'manufacturer_name' , 'manufacturer_code' ]]) # manufacturer_name manufacturer_code # 0 Subaru 45 # 38526 Chrysler 8 Przy kodowaniu etykiet nale\u017cy stworzy\u0107 mapy. Mo\u017cna to zrobi\u0107 tworzy\u0107 obiekt dla kod\u00f3w i obiekt dla kategorii. codes = used_cars [ \"manufacturer_name\" ] . cat . codes categories = used_cars [ \"manufacturer_name\" ] name_map = dict ( zip ( codes , categories )) U\u017cywanie s\u0142ownika: used_cars [ \"manufacturer_code\" ] = used_cars [ \"manufacturer_name\" ] . cat . codes used_cars [ \"manufacturer_code\" ] . map ( name_map ) Etykietowanie wszystkich s\u0142\u00f3w kt\u00f3re zawieraj\u0105 s\u0142owo \"van\" . Etykietowanie zero jedynkowe gdy w s\u0142owie zawarte jest \"van\" . # Codes from previous lesson: used_cars [ \"body_type\" ] . str . contains ( \"van\" , regex = False ) used_cars [ \"van_code\" ] = np . where ( used_cars [ \"body_type\" ] . str . contains ( \"van\" , regex = False ), 1 , 0 ) used_cars [ \"van_code\" ] . value_counts () // TO DO uzupelni\u0107 dane o ten rozdzial przed data storytelling","title":"Tworzenie kod\u00f3w"},{"location":"DataScience/DataScience/#data-comunication-concept","text":"","title":"Data Comunication Concept"},{"location":"DataScience/DataScience/#storytelling-with-data","text":"W analizie wazna jest komunikacja w tym szczegolnie przep\u0142yw informacji. Z\u0142a komunikacja mo\u017ce doprowadzic do katastrofy podobnej do Challengera gdzie \u015bmierci uleglo 7 astronaut\u00f3w. Technicy przekazali informacj\u0119 o uszczelce ale nie zosta\u0142a ona zg\u0142oszona dalej. Dobra analiza: - wyja\u015bniono rzeczy techniczne nawet dla os\u00f3b nie technicznych, - u\u0142o\u017cenie tak histori\u0119 by wplyn\u0105c na podejmowanie decyzji, - nie k\u0142amiemy - ci\u0105g przyczynowo-skutkowy Wiadomo\u015bci przekazywane przez prezentera powinny by\u0107 proste , a przede wszystkim wiarygodne . Kazda prezentacja powinna zawiera\u0107 odpowiednie zaprezentowanie danych. Dobra analiza powinna przekonac interesariuszy,kt\u00f3rzy s\u0105 przeciwni do zmian, ktore nale\u017ca\u0142o by zmieni\u0107. Dobra analiza powinna zainteresowa\u0107 interesariuszy ktorzy nie s\u0105 specjalistami technicznymi a szczeg\u00f3lnie nie s\u0105 dobrze obeznani z matematyk\u0105 lub statystyk\u0105. Opowiadanie o danych ( data storytelling ) Mechanizm, kt\u00f3ry udostepnia spostrze\u017cenia po przez narracj\u0119 i zrozumiala wizualizacj\u0119. Dzi\u0119ki temu mozliwe jest - nap\u0119dzanie ludzkiej wyobra\u017ani - zapadni\u0119cie w pami\u0119\u0107 lepiej ni\u017c metryki - nadaj\u0105 kontekst danym - uwaga s\u0142uchaczy jest poddtrzymywana i przykuwana, - u\u0142atwiaja podejmowanie decyzji - pozwalaj\u0105 na nap\u0119dzenie zmian i podejmowanie dzia\u0142a\u0144 Aby dobrze przedstawi\u0107 analiz\u0119 to taka: - przedstawienie najwa\u017cniejszej tre\u015bci w trzy minuty , - za pomoc\u0105 jednego zdania przedstawic to co nas popycha i nas motywuje do dzia\u0142ania, //TO Do daoda\u0107 rysunek z pierwszego filmiku (Fundamentals of storytelling - 2:57) Prezentacja wynik\u00f3w analizy powinna opiera\u0107 sie na trzech filarach: danych, narracji i elementow wizualnych. Opowiadanie o danych powinno - wysiagn\u0105\u0107 jasne wnioski z naszej analizy - wyjasni\u0107 temat - zwi\u0119z\u0142y, kt\u00f3ry poda konkretne fakty Efektywna historia zawiera: - wnioski z naszych modeli oraz analiz, kt\u00f3re odnosz\u0105 si\u0119 do sytuacji, - dok\u0142adne i wiarygodne danych, - praktyczne spostrze\u017cenia, - dobra narracja kt\u00f3ra powoduje ze analiza jest atrakcyjna i \u0142atwa w zrozumieniu, - tylko najwa\u017cnejsze informacje, - wziecie pod uwag\u0119 docelowych odbiorc\u00f3w, ktore pomaga w wyja\u015bnieniu fakt\u00f3w, - nale\u017cy nie wprowadza\u0107 w b\u0142\u0105d wykres\u00f3w, proste i czytelne. W prezentowaniu analizy nalezy zwrocic uwag\u0119 na naszych odbiorc\u00f3w czy s\u0105 techniczni czy nie, Nale\u017cy zaprzesta\u0107 mowieniu o metodach dojscia do celu. Dla odbiorc\u00f3w wazniejszy jest wynik oraz metody wdro\u017cenia zmian w \u017cycie. Historie powinny by\u0107 proste do zrozumienia i zaanga\u017cowac publicznosc nietechniczn\u0105. Warunki mog\u0105 u\u0142atwia\u0107 procesy decyzyjne i nap\u0119dza do zmian. Na poczatku trzeba zwr\u00f3ci\u0107 uwage na odbiorcow tak by nasza tres\u0107 byla zrozumiala dla nich. Odbiorcy powinni zrozumie\u0107 wplyw i ograniczenia prognoz na temat naszego modelu, Powinni\u015bmy by\u0107 otwarci i \u015bwiadomi na pytania od odbiorc\u00f3w Powinni\u015bmy zrozumie\u0107 co odbiorcy chc\u0105. Aby \u0142atwo zrozumie\u0107 jak powinnismy prezentowa\u0107 nasze analizy powinni\u015bmy zastosowa\u0107 technik\u0119 ADEPT: - A nalogy - por\u00f3wnywanie nowo omawianych rzeczy do rzeczy juz znanych. Czyli np. t\u0142umaczenie dzia\u0142ania sieci neuronowych na przyk\u0142adzie nauki dziecka. Akronimy czyli skr\u00f3ty powinny by\u0107 u\u017cywane ostro\u017cnie. Pomagaj\u0105 one w komunikacji o ile wszyscy odbiorcy je rozumiej\u0105, a w przeciwnym razie szkodz\u0105. Dobra praktyka jest wyja\u015bnienie akronimy w pierwszym u\u017cyciu. Powinni\u015bmy ogranicza\u0107 \u017cargon. Tlumaczy\u0107 technologie na prostsze i znane terminy. Dodawanie s\u0142ownika w dokumentacji, kt\u00f3ry tlumaczy te skr\u00f3ty. - D iagram - pomagaj\u0105 zwizualizowa\u0107 proces, gdzie ilustracyjna moc jest zawsze skuteczniejsza - E xample - P lain English - T echnical definition Prezentowanie analizy powinno opiera\u0107 si\u0119 na wp\u0142ywie a nie na procesie. Powinnismy wiedzie\u0107 ze nie wszystkie szczego\u0142y techniczne mozna usun\u0105\u0107 z naszej prezentacji ale jednak trzeba je dobrze i jasno wyja\u015bnic naszym odbiorcom. Pyta\u0107 si\u0119 odbiorcow czy rozumiej\u0105 temat i czy s\u0105 pytania. Trzeba by\u0107 przygotowany na wyja\u015bnianie pojec przy wykorzystaniu roznych strategii.","title":"Storytelling with Data"},{"location":"DataScience/DataScience/#narracja","text":"Skupmy si\u0119 na narracji, po znalezieniu odpowiednich spostrze\u017ce\u0144 w naszych danych powinnismy znale\u017c\u0107 sensowny sposob ich przedstawienia. Narracja ta powinna zawiera\u0107: - tylko kluczowe punkty, - wprowadza zmiany, Dbra narracja porz\u0105dkuje informacje, tak aby zaanga\u017cowa\u0107 odbiorc\u00f3w i sprawi\u0107 by zainteresowali sie wynikami lub informacjami. Rozpoczynaj\u0105c swoj\u0105 prezentacj\u0119 powinni\u015bmy przedstawi\u0107 szczeg\u00f3\u0142owe informacje na temat motywacji, co si\u0119 zmieni\u0142o. Trzeba zwraca\u0107 uwag\u0119 na to na czym skupia si\u0119 analiza. Po przedswieniu dowod\u00f3w na czynniki, kt\u00f3re przyczyni\u0142y si\u0119 do powstania problemu. Powinnismy podawa\u0107 tylko istotne informacje, a nie szczeg\u00f3\u0142owe dane, ktore przeci\u0105\u017caj\u0105 odbiorc\u00f3w. Mo\u017cna pokusi\u0107 sie o g\u0142ebsze wyja\u015bnienie przyczyny problemu. Powinnismy zawrze\u0107 centralny wniosek analizy, kt\u00f3ry zapewnia jasny wgl\u0105d na to co mo\u017ce si\u0119 sta\u0107, je\u015bli nic si\u0119 nie zmieni. Na ko\u0144cu powinni\u015bmy przedstawi\u0107 potencjalne rozwi\u0105zania i mozliwosci po przez zelecenia co do sposobu post\u0119powania. Powinni\u015bmy by\u0107 proaktywni i prowadzi\u0107 publiczno\u015b\u0107 przez zrozumienie.","title":"Narracja"},{"location":"DataScience/DataScience/#selecting-the-right-data","text":"W celu odpowiedniego przekazania informacji nale\u017cy ustali\u0107 do jakich os\u00f3b b\u0119dziemy kierowa\u0107 swoja wypowied\u017a, wybrane ustalenia jak i statystyki, wizualizacje, format naszych wynik\u00f3w. Nale\u017cy zwr\u00f3ci\u0107 uwag\u0119 na wybor odpowiednich danych, czy to takie dane ktore zawieraj\u0105 wystarczaj\u0105co kontekstowych spostrze\u0144 w naszej historii, by poprze\u0107 nasz g\u0142owny punkt bez prze\u0142adowania naszego sprawozdania informacjami. Zale\u017cy nam na tym aby uwzgl\u0119dni\u0107 minimaln\u0105 liczb\u0119 wynik\u00f3w. Nalezy pami\u0119ta\u0107 \u017ce jak we\u017amiemy zasmiecone dane to nasza analiza r\u00f3wnie\u017c b\u0119dzie za\u015bmiecona. Nasze wyniki musz\u0105 wyro\u017cnia\u0107 inny widok danych dla ka\u017cdej grupy odbiorc\u00f3w. Trzeba dostosowa\u0107 nasz sposob prezentowania dla ka\u017cdego z nich. Odbiorcy sa r\u00f3\u017cni w r\u00f3\u017cny sposob zainteresowani wynikami projektu. okre\u015blenie osob pomaga dobra\u0107 odpowiednie dopasowanie, tak aby przekazac kluczowe spostrze\u017cenia. Po znalezieniu naszej historii musimy zdefiniowa\u0107 osoby w naszych celach. Pozwoli to na dobranie ustalenia naszego przekazu. Dobra przezentacja zagadnienia jest skierowana do ro\u017cnego rodzaju sceptyk\u00f3w. Majac na celu lepszy przekaz analizy powinni\u015bmy: - najpierw przekona\u0107 do racji samego siebie, - nast\u0119pnie przyjaciela, - a na ko\u0144cu sceptyka.","title":"Selecting the right data"},{"location":"DataScience/DataScience/#roznice-w-danych","text":"Ro\u017cnic\u0119 miedzy zbiorami mo\u017cemy przedstawi\u0107 jako: - warto\u015b\u0107 bezwgl\u0119dna np. liczb\u0119 bezwgl\u0119dn\u0105 w konkretnych liczbach, - warto\u015b\u0107 wzgl\u0119dna w procentach. Bezwzgl\u0119dna zmiana dla ma\u0142ej liczby mo\u017ce byc niewielka, nawet je\u015bli wzgledna zmiana jest du\u017ca. Z drugiej strony wzgledne zmiany na malych liczbach mog\u0105 wydawa\u0107 si\u0119 wi\u0119ksze ni\u017c s\u0105 w rzeczywisto\u015bci. Ma\u0142a zmiana bezwgledna mo\u017ce skutkowa\u0107 du\u017c\u0105 zmian\u0105 procentow\u0105. //TO DO doda\u0107 wykresy z 1:40 z filmiku Showing relevant statistics Pierszy wykres przedstawia sprzeda\u017c w liczbach (warto\u015bci bezwzgledna) a drugi przedstawia proporcje zmian wyra\u017con\u0105 w procentach.","title":"R\u00f3\u017cnice w danych"},{"location":"DataScience/DataScience/#ratio","text":"Jest to por\u00f3wnanie dw\u00f3ch zmiennych wyra\u017conej jako iloraz. // TO DO przedstawi\u0107 wykres z 2:08 W przypadku czekolady i chips\u00f3w mo\u017cemy pos\u0142u\u017cy\u0107 si\u0119 przychodem podzielonym przez liczb\u0119 klient\u00f3w. Ratio pomaga znormalizowa\u0107 warto\u015bci co pomaga por\u00f3wna\u0107 rozk\u0142ad danych z pierwotnie r\u00f3\u017cnych skal.","title":"Ratio"},{"location":"DataScience/DataScience/#agregacja","text":"Niekiedy nale\u017cy podsumowa\u0107 dane liczbowe w agregacje, czyli takiej liczbie ktora daje wyobrazenie o ca\u0142o\u015bci lub przez wybranie wartosci reprezentatywnej. Mo\u017ce to byc \u0142\u0105czna sprzeda\u017c lub czas trwania kampanii. Innym przyk\u0142adem jest \u015brednia, mediana. \u015arednia mo\u017ce wprowadza\u0107 w b\u0142\u0105d, szczeg\u00f3lnie gdy wyst\u0119puja wartosci odstaj\u0105ce.","title":"Agregacja"},{"location":"DataScience/DataScience/#wizualizacja","text":"Wizualizacja jest przeznaczona dla konkretnej grupy odbiorc\u00f3w i znajomo\u015bci przez nich poj\u0119\u0107. Na przyk\u0142ad wykres gesto\u015bci by\u0142by odpowiedni dla os\u00f3b technicznych, natomioast histogram odpowiedni dla os\u00f3b nietechnicznych. Zasada Pareto m\u00f3wi o tym \u017ce wi\u0119kszo\u015b\u0107 wyj\u015b\u0107 pochodzi z mniejszo\u015bci wej\u015b\u0107. Dane, kt\u00f3re s\u0105 mniej istotne powinni\u015bmy zagregowa\u0107, to ogranicza ha\u0142as. Analiza powinna by\u0107 uproszczona do poziomu wiedzy naszej publiczno\u015bci. Nale\u017cy nam na szybkim spostrzezeniu przez odbiorc\u00f3w. Zamiast pokazywa\u0107 wiele szczeg\u00f3\u0142\u00f3w powinni\u015bmy pokaza\u0107 najprostsze i najistotniejsze dane. Nale\u017cy skutecznie zaprezentowa\u0107 wizualizacj\u0119 naszym odbiorcom. Metoda McCandless Najpierw naszemu wykresowi nada\u0107 nag\u0142\u00f3wek i za pomoc\u0105 jego odnosi\u0107 sie do s\u0142uchaczy i w dalszej cz\u0119\u015bci prezentacji. Nag\u0142\u00f3wek powinnym by\u0107 kr\u00f3tki, jasny i oczywisty. To on wspiera nasz\u0105 histori\u0119 i wyja\u015bnia wizualizacj\u0119. Dodac opis osi x i y gdy\u017c pomaga to w \u0142atwiejszej interpretacji wykresu. Nale\u017cy opiera\u0107 si\u0119 na solidnych danych i by\u0107 gotowym na pytania. Uwaga powinna si\u0119 skupi\u0107 na naszym wykresie i naszej historii. O ka\u017cdym wykresie powinni\u015bmy wyja\u015bniac nasze spostrzerzenia co do naszej wizualizacji. Powinni\u015bmy wyja\u015bnia\u0107 co widz\u0105, a nie zak\u0142ada\u0107, \u017ce pytania pojawi\u0105 si\u0119 p\u00f3\u017aniej lub sami je zrozumiej\u0105. Na ko\u0144cu powinnismy odniesc si\u0119 do wykresu i jego spostrze\u017ce\u0144 i jakie ma to zastosowanie na przysz\u0142o\u015b\u0107 i jakie kroki nale\u017cy podj\u0105\u0107.","title":"Wizualizacja"},{"location":"DataScience/DataScience/#choosing-the-appropriate-format","text":"//TO Do Doda\u0107 wykres z 0:19","title":"Choosing the appropriate format"},{"location":"DataScience/DataScience/#prezentacja","text":"Na koncu ka\u017cdej analizy nalezy zaprezentowac nasz\u0105 analiz\u0119 Dobra komunikacja zawiera: - kluczowe informacje, - wci\u0105gaj\u0105cy/interesuj\u0105cy, - \u0142atwe do zrozumienia. Ka\u017cda analiza wymaga pisemnego i ustnego raportu, lecz trzeba pami\u0119ta\u0107 od sytuacji projektu. Podczas przygotowania prezentacji ko\u0144cowej powinni\u015bmy wzi\u0105c pod uwag\u0119: - publiczno\u015b\u0107, - zawarto\u015b\u0107, - specjalne wymagania, - kana\u0142 komunikacji Wszystkie te elementy pomagaj\u0105 okre\u015bli\u0107 najlepszy format do komunikowania naszych wynik\u00f3w. Poni\u017cej rozwini\u0119to powy\u017csze punkty na kt\u00f3rych nale\u017cy si\u0119 skupi\u0107: - komu prezentujemy nasz\u0105 prezentacj\u0119, - dlaczego publiczno\u015b\u0107 ma wiedzie\u0107 o ustaleniach: - metodologi\u0119, - odpowiedzialno\u015b\u0107, - jak wykorzysta\u0107 nasze odkrycia - podj\u0119cie decyzji, - rozpoczecia nowego projektu, - jakich informacji potrzebuj\u0105 - wyniki naszych analiz - wp\u0142yw na nasze dotychczasowe ustalenia. Dowiedzie\u0107 si\u0119 czy odbiorcy: - maj\u0105 jakies szczego\u0142owe wymagania, - maj\u0105 wystarczaj\u0105co du\u017co czasu na zapoznanie si\u0119 z raportem czy lepsze kr\u00f3tkie spotkanie, - czy werfikuj\u0105 otrzymane informacje, - jak\u0105 form\u0119 komunikacji preferuj\u0105 zwr\u00f3ci\u0107 uwag\u0119 na strefy czasowe. - forma dokumentu czy word, notatnik Jupyter, czy blog W jaki spos\u00f3b zostanie on dostarczony czy b\u0119dzie on bezo\u015brednio prezentowany interesariuszom by odpowiedziec na komentarze. W ko\u0144cu jak du\u017ca ma by\u0107 publiczno\u015b\u0107. Dostosowywujemy prezentacje do ludzi inaczej prezentujemy dla 6 osob a inaczej dla 200 osob. Wyb\u00f3r formy komunikacji (pisemna czy ustna) nie zale\u017cy tylko od odbiorc\u00f3w, ale zar\u00f3wno od zalet i wad r\u00f3\u017cnych format\u00f3w. Komunikacja ustna pozwala na budowanie relacji z publicznosci\u0105 oraz natychmiastowa informacj\u0119 zwrotn\u0105. Lepszy przekaz gdy\u017c mowa cia\u0142a i g\u0142os daj\u0105 du\u017co do znaczenia. Wad\u0105 tego ustnej prezentacji jest: -brak trwa\u0142ego zapisu spotkania - nie nadaje si\u0119 do d\u0142ugich wiadomo\u015bci. Im d\u0142uzsza prezentacja tym wieksza szansa na to ze publiczno\u015b\u0107 straci koncentracj\u0119. Komunikacja pisemna pozwala na: - udostepnienie zapisu komunikacji, przez co wiadomo\u015b\u0107 mo\u017ce by\u0107 analizowana w d\u0142uzszej perspektywie, - \u0142atwiej udostepni\u0107 to du\u017cej grupie odbiorc\u00f3w, - mniej podatny na reakcje emocjonalne, - udost\u0119pnienie kodu dowolnemu interesariuszowi technicznemu. Wad\u0105 jest: - brak reakcji publiczno\u015bci co utrudnia adaptacj\u0119. - odpowied\u017a nie jest natychmiastowa, ale pojawi si\u0119 p\u00f3\u017aniej w formie komentarzy Dla osob kierowniczych liczy si\u0119 naszymi wnioskami i chc\u0119 szybkich odpowiedzi na swoje pytania. Ceni czas wi\u0119c trzeba szybko i merytorycznie podej\u015b\u0107 do tematu. Po spotkaniu nalezy spo\u017c\u0105dzi\u0107 raport kt\u00f3ry b\u0119dzie zawiera\u0142 wa\u017cne decyzje oparte na naszych wnioskach i przeka\u017ce je inwestorom. Nalezy sporzadzi\u0107 je w pisemny raport, bior\u0105c pod uwag\u0119 pytania i opinie, kt\u00f3re od niej otrzymali\u015bmy.","title":"Prezentacja"},{"location":"DataScience/DataScience/#types-of-reports","text":"W tym rozdziale dowiesz si\u0119 jak tworzy\u0107 pisemny raport. W raporcie powino znale\u017a\u0107: - na czym koncentruje sie nasz projekt, - analiza recencji produkt\u00f3w, - przedstawienie naszych ustale\u0144, - krytyczna analiza wniosk\u00f3w czyli co nale\u017cy zmienic na co zwr\u00f3cic uwag\u0119, - szacunki dok\u0142adno\u015bci naszej analizy, - standardy nadane przez firm\u0119, - wyniki analizy powinny by\u0107 klarowne i \u0142atwe do werfikacji, gdy\u017c to one b\u0119d\u0105 nap\u0119dzac zmian\u0119, Istnieja r\u00f3\u017cbne typy raport\u00f3w: - Ratorty informacyjne, ktorych zadaniem jest podawanie faktycznej informacji. S\u0105 kr\u00f3tkie i nie maj\u0105 \u015bcis\u0142ej struktury. Ich zadaniem jest informowanie o faktach bez dodawania jakichkolwiek analiz. Raporty analityczne , kt\u00f3rych zadaniem jest dostarczenie analizy i demonstracja zaleznosci lub rekomendacji. Mog\u0105 r\u00f3\u017cni\u0107 si\u0119 wielko\u015bci\u0105 ale maja scis\u0142\u0105 struktur\u0119. Celem ich jest podejmowanie decyzji na podstawie danych. Sprawozdanie ko\u0144cowe obejmuj\u0105 szczeg\u00f3\u0142ow\u0105 analiz\u0119 danych, ustalenia i wyniki, a tak\u017ce wizualizacje. Zwykle s\u0105 d\u0142ugie i s\u0105 przeznaczone dla odbiorc\u00f3w, ktorzy potrzebuj\u0105 szczeg\u00f3\u0142\u00f3w technicznych. Raporty podsumowywuj\u0105ce zawieraj\u0105 kluczowe ustalenia i zalecenia a takze wizualizacje. Zwykle s\u0105 kr\u00f3tkie i maj\u0105 mniej ni\u017c pi\u0119\u0107 stron. Wynika to z faktu \u017ce sa podsumowaniem raportu ko\u0144cowego i mog\u0105 zawiera\u0107 odnosniki do dokumentu g\u0142\u00f3wnego. S\u0105 przeznaczone dla decydent\u00f3w, ktorym nie potrzebne s\u0105 szczeg\u00f3\u0142y techniczne. W przypadku raport\u00f3w analitycznych, koncowych jaki i podsumowywuj\u0105cych posiadaj\u0105 nastepuj\u0105c\u0105 strukture: - wprowadzenie - podsumowanie cel raportu, - dlaczego przeprowadzono ta analiz\u0119 przedstawi\u0107 motywacj\u0119, - podsumowanie pyta\u0144 analitycznych- np. Jakie czynniki wp\u0142ywaja na z\u0142e wrazenia u\u017cytkownik\u00f3w, - tre\u015b\u0107 raportu - opis najistotniejszych danych s\u0142owno-muzycznie albo za pomoc\u0105 tabeli - metody, kt\u00f3re pos\u0142uzyly do zebrania i analizy danych oraz do zbudowania modelu. - W analizie uwzgl\u0119dniamy wybrane dane do analizy, gdzie modelujemy je za pomoc\u0105 wizualizacji, np. za pomoca wykresu - wyniki, w ktorych opisujemy i wyja\u015bniamy wyniki naszej analizy - podsumowanie - ponownie sformu\u0142owanie pytania analitycznego, - podsumowanie najwa\u017cniejszych wynik\u00f3w analizy, - podajemy tu nasze zalecenia dotycz\u0105cych kolejnych krok\u00f3w Powy\u017csza struktura doprego raportu/sprawozdania jest dobra dla umieszczenia ich w czasopismach naukowych. W kotekscie biznesowy odbiorcy s\u0105 inni i nalezy sie dopasowa\u0107 do nich. Odpowiednia metoda to podej\u015bcie 1-3-25. Tworzy sie wtedy streszczenie wykonawcze - 1 strona bardzo kr\u00f3tka analiza tylko najwa\u017cniejsze informacje - maksymalnie 3 strony streszczenia ca\u0142ej analizy - maksymalnie 25 stron szczeg\u00f3\u0142ow Zawsze trzeba pamieta\u0107 o naszych interesariuszach, gdyz kazdy z nich jest zainteresowany r\u00f3\u017cnymi cz\u0119\u015bciami naszego raportu dlatego nale\u017cy odpowiednio dopasowa\u0107. Gdy\u017c moga by\u0107 ludzie kt\u00f3rzy maj\u0105 ma\u0142o czasu np kierownicy, dyrktorzy. Czytaj\u0105 oni wst\u0119p i zako\u0144czenie a nastepnie przegladnie tres\u0107 w poszukiwaniu poszczegolnych punkt\u00f3w. Wniosek powinien zawiera\u0107 wskaz\u00f3wki co do naszej analizy a przede wszystkim zawiera\u0107 nasza rekomendacj\u0119. Interesariusze techniczni s\u0105 g\u0142\u00f3wnie zainteresowani tresci\u0105 raportu. Chc\u0105 zrozumie\u0107 nasze metody tyechniczne i analizy.","title":"Types of reports"},{"location":"DataScience/DataScience/#reproducibility-and-references","text":"Podstawow\u0105 cz\u0119\u015bcia przekazywania naszych ustale\u0144 jest fakt \u017ce nasz raport jest jasny i powtarzalny. Powtarzalno\u015b\u0107 czyli reprodukcja to dla przykladu jak mamy przepis to id\u0105c zawsze tymi samymi krokami osiagniemy ten sam cel. Wynik za ka\u017cdym razem powinien byc ten sam i nie zmienny o ile pracujemy na tych samych danych. D\u0105zymy do uzyskania podobnych wynikow przy wykorzystanu tego samego og\u00f3lnego podej\u015bcia. Jest to kluczowe dla Data Scientisty gdyz zapobiega powielaniu si\u0119 wysi\u0142kom wykonywania tej samej czynnosci. Umozliwia to kontynuacje dotychczasowej pracy i skoncentrowanie sie na nowych wyzwaniach. Wa\u017cne jest w spos\u00f3b w jaki uzyskano wyniki. Dobre praktyki w pracy nad danymi. 1) Powinnismy zatrzyma\u0107 wszystkie skrypty kt\u00f3re pozwoli\u0142y nam uzyska\u0107 wynik. Dodawac komentarze, przekazywa\u0107 informacje o wykorzystanych pakietach. Wykorzystywanie systemu kontroli wersji, kt\u00f3ry \u015bledzi wszystkie zmiany i wersje w naszych skryptach. 2) Nale\u017cy unika\u0107 recznych manipulacji danych po przez r\u0119czne zmiany bezpo\u015brednio w edytorze. Powinnismy zapisac wszystkie wersje naszego pliku. Powinnismy ratowa\u0107 surowe dane wraz ze skryptem z krokami po\u015brednimi. Dzieki temu b\u0119dzie mo\u017cliwe przedstawienie historii i utworzenia wok\u00f3\u0142 niej narracji. 3) Wyra\u017any widok gwarantuje co si\u0119 dzieje z danymi, a zatem mo\u017ce dostosowywa\u0107 i rozwi\u0105zywa\u0107 problemy. Kontrola wersji jest wa\u017cna gdy w uczeniu maszynowym wyst\u0119puje element losowo\u015bci. Wykorzystanie r\u00f3\u017cnego ziarna w losowo\u015bci mo\u017ce spowodowa\u0107 otrzymanie ro\u017cnych wynik\u00f3w. Je\u015bli wykorzystamy ro\u017cn\u0105 liczb\u0119 r\u00f3\u017cnych ziaren i otrzymamy ten sam wynik to wynik zale\u017cny jest od modelu a nie od losowo\u015bci. 4) Przewidywalnosc algorytmu to stopie\u0144 w jaki cz\u0142owiek moze zrozumie\u0107 model, przyczyn\u0119 decyzji. Przewidywalno\u015b\u0107 jest istotna by wyt\u0142umaczy\u0107 odbiorcom ze nasze wnioski mog\u0105 zostac oddtworzone. 5) Powinnismy poprawnie cytowa\u0107 prace innych ludzi w naszej analizie. Najpopularniejszm stylem jest APA ktory wykorzystuje cytaty w tek\u015bcie. Umieszcza on nazwisko autora i dat\u0119 publikacji. Do wykorzystania odniesie\u0144 mozna wykrzysta\u0107 EndNote , Mendeley , RefWorks , W biznesie wystarczy do\u0142\u0105czyc hiper\u0142\u0105cze do \u017ar\u00f3d\u0142a. Nale\u017cy kierowa\u0107 si\u0119 \u017ce informacje s\u0105 \u0142atwe do zdobycia.","title":"Reproducibility and references"},{"location":"DataScience/DataScience/#write-precise-and-clear-reports","text":"Raport powinien byc nie tylko powtarzalny ale przedewszystkim jasny i zrozumia\u0142y. Raport powinien by\u0107: - jasny - precyzyjny - nie wprowadza\u0107 w b\u0142\u0105d i zamieszanie, - \u0142atwe do zrozumienia przes\u0142anie Powinni\u015bmy unika\u0107 pustych frazes\u00f3w nie daja one znaczenia oraz informacji. Nale\u017cy unika\u0107 sformu\u0142owa\u0144: - warto zauwa\u017cy\u0107 \u017ce, - fakt, \u017ce - nale\u017cy podkre\u015bli\u0107, \u017ce - jak powszechnie wiadomo, - jest to oczywiste. Puste frazesy rozpraszaja i nalezy ich unika\u0107. Trzeba by\u0107 bezpo\u015bredni i rzeczowym. W skr\u00f3cie je\u015bli tekst nic nie dodaje informacji nale\u017cy go usun\u0105\u0107. Pisanie techniczne jest zwiez\u0142e i bezpo\u015brednie. Powinni\u015bmy pisa\u0107 konkretne rzeczowniki i unika\u0107 nadu\u017cywania zaimk\u00f3w to, tamto itp, bo powoduj\u0105 one \u017ce nie wiadomo do czego sie one odnosz\u0105. \u015aledzenie co oznaczaj\u0105 zaimki obci\u0105\u017ca swiadomo\u015b\u0107 poznawcz\u0105 co odwraca uwag\u0119 czytelnik\u00f3w od rzeczywistego problemu. G\u0142os aktywny czyli koncentrujemy si\u0119 na aktorze a nie nad faktami. Wykorzystuje si\u0119 go w biznesie. G\u0142os bierny krytykowany jest za zbyt duszny i trudniejszy do odczytania. Wykorzystuje si\u0119 w j\u0119zyku akademickim. Przy podkresleniu argumentu \u0142atwo jest u\u017cy\u0107 zbednych przymiotnik\u00f3w i przys\u0142\u00f3wk\u00f3w. Nale\u017cy d\u0105\u017cy\u0107 do ich ograniczenia a nawet do ich eliminacji. Nale\u017cy unika\u0107 d\u0142ugich zda\u0144 pozwoli to na unikniecie b\u0142edow jezykowych jak i lepsze zrozumienie tematu. Nalezy unika\u0107 przecinka w formu\u0142owaniu wniosk\u00f3w. Powini\u015bmy wprowadzi\u0107 takie s\u0142owa jak: poniewa\u017c, bo.","title":"Write precise and clear reports"},{"location":"DataScience/DataScience/#case-study-report-on-credit-risk","text":"","title":"Case study: report on credit risk"},{"location":"DataScience/DataScience/#story","text":"Napoczatku tworzymy historie i skupiamy si\u0119 na tle. np. W ci\u0105gu 5 lat nastapi\u0142 wzrost odsetka klient\u00f3w zalegaj\u0105cych ze sp\u0142at\u0105. Bank postanowi\u0142 zainteresowa\u0107 si\u0119 przewidywaniem, kt\u00f3rzy klienci maj\u0105 wysokie prawdopodobe\u0144stwo niewyp\u0142acalno\u015bci. Po przeanalizowaniu danych widac \u017ce osoby z d\u0142u\u017cszym okresem bezrobocia cze\u015bciej splacaj\u0105 zobowi\u0105zania. Ponadto m\u0142odsi ludzie o ni\u017cszych dochodach cz\u0119\u015bciej sp\u0142acaj\u0105 zobowiazania. Po przetrenowaniu modelu jeste\u015bmy wstanie powiedzie\u0107, ktore osoby s\u0105 sk\u0142onne do niewyp\u0142acalno\u015bci z dok\u0142adno\u015bci\u0105 do 95%. Nast\u0119pnym krokiem powinno by\u0107 przeprowadzenie pr\u00f3by na kontrolowanej populacji.","title":"Story"},{"location":"DataScience/DataScience/#tech-or-noc-tech","text":"Mamy wyniki terez trzeba przet\u0142umaczy\u0107 wyniki techniczne dla interesariuszy nietechnicznych.","title":"Tech or noc-tech"},{"location":"DataScience/DataScience/#the-right-data","text":"Kto jkest naszym odbiorc\u0105 czyli dla kogo raportujemy: dla dyrektora, kt\u00f3ra decyduje za wdro\u017ceniem automatycznego systemu odrzucania po\u017cyczek, przy wykorzystaniu naszego modelu. Zglaszamy wiec zaleznosc mi\u0119dzy wiekiem czy dochodem a kredytem. Dodatkowo prognozujemy odsetek niewywi\u0105zuj\u0105cych si\u0119 klientow w ci\u0105gu najbli\u017cszych miesi\u0119cy. W tym zakresie pokazujemy \u015bredni wiek i doch\u00f3d klientow niewywi\u0105zuj\u0105cych sie z platnosciami w porownaniu z klientami wyp\u0142acalnymi. Przedstawiamy liczb\u0119 klient\u00f3w zalegaj\u0105cych ze splata w czasie (to jest procent zmiany).","title":"The right data"},{"location":"DataScience/DataScience/#wizualizacja_1","text":"Do\u0142\u0105czamy wykres pudelkowy pokazujacy wiek lub doch\u00f3d tych co s\u0105 wyp\u0142acalni lub nie. Przedstawiamy wykres liniowy przedstawiaj\u0105cy procentow\u0105 zmian\u0119 liczby klientow zalegaj\u0105cych ze splat\u0105 w ci\u0105gu nast\u0119pnych miesi\u0119cy.","title":"Wizualizacja"},{"location":"DataScience/DataScience/#prezentacja_1","text":"Podsumowywuj\u0105c: who? - raportujemy dla dyrektora dzialu finansowego, why? - bo ma wazn\u0105 decyzj\u0119 do podj\u0119cia, content Jest zainteresowana naszymi klucowymi ustaleniami i rekomendacjami channel - przes\u0142anie e-mailem ustale\u0144 przed spotkaniem Powy\u017csze prowadza nas do stworzenia pisemnego raportu. Dla osob nie-technicznych wybieramy raport podsumowujacy, dla technicznych raport ko\u0144cowy. Ma to by\u0107 raport informacyjny czy analityczny? Przedstawiamy nie tylko fakty ale tak\u017ce analizy tak wi\u0119c odpowiednim wyborem b\u0119dzie raport analityczny. Jaka jest struktura tego raportu: najpierw podsumowujemy cel naszego raportu, dodajemy kontekstowe informacje o celu naszego projektu, podajemy pytania analityczne W rozwini\u0119ciu opisujemy dane ale zawieramy tylko kluczowe ustalenia w sekcji wynik\u00f3w. W podsumowaniu ponownie przedstawiamy pytania \u0142aczac je z naszymi ustaleniami i dodajemy nasze rekomendacje.","title":"Prezentacja"},{"location":"DataScience/DataScience/#planning-an-oral-presentation","text":"Warto zaplanowa\u0107 co ma byc w prezentacji niz robic to na o\u015blep. Dobra prezentacja uwzglednia: - zamiar - rozmiar publiczno\u015bci, - wiadomo\u015b\u0107, kt\u00f3r\u0105 chcemy przekaza\u0107,","title":"Planning an oral presentation"},{"location":"DataScience/DataScience/#zamiar","text":"Typy prezentacji: - informacyjna - instrukta\u017cowa wyjasnia w jaki spos\u00f3b zbudowano model analizy - przekonywuj\u0105ca","title":"Zamiar"},{"location":"DataScience/DataScience/#publicznosc","text":"Kto jest odbiorc\u0105? Jak du\u017ca jest publiczno\u015b\u0107?","title":"Publiczno\u015b\u0107"},{"location":"DataScience/DataScience/#widomosc","text":"Nasza publiczno\u015b\u0107 zapomni 90% prezentacji tydzie\u0144 po jej obejrzeniu. Trzeba zrobi\u0107 tak by zapamietali jedn\u0105 rzecz z prezentacji.","title":"Widomo\u015b\u0107"},{"location":"DataScience/DataScience/#otwartosc","text":"Przyciagn\u0105\u0107 nasz\u0105 publiczno\u015b\u0107 i przedstawi\u0107 jedn\u0105 rzecz, ktor\u0105 chcemy aby odbiorcy zapami\u0119tali. Ma to by\u0107 jedno zdanie. Podsumowanie, kt\u00f3re podsumuje prezentacj\u0119 i wzmacnia g\u0142\u00f3wny przekaz.","title":"Otwarto\u015b\u0107"},{"location":"DataScience/DataScience/#struktura","text":"Zaczynamy od wst\u0119pu. Powinni\u015bmy przekaza\u0107 pewne podstawowe informacje. Powinny one przykuwa\u0107 uwag\u0119 naszych s\u0142uchaczy i dawa\u0107 im wglad w nasza prezentacje. Mo\u017cemy zag\u0142\u0119bi\u0107 si\u0119 w metody, analizy oraz w wyniki modeli. Wyciagni\u0119cie wniosk\u00f3w, dodania wezwania do dzialania lub rekomendacji dalszych krok\u00f3w. Sluchacze sa uwa\u017cni na pocz\u0105tku i na ko\u0144cu naszego wyst\u0105pienia.","title":"Struktura"},{"location":"DataScience/DataScience/#zarys","text":"Przedstawienie wykres\u00f3w i wizualizacji, kt\u00f3re chcemy u\u017cy\u0107. Trzeba zaplanowa\u0107, kt\u00f3re sekcje b\u0119d\u0105 nam potrzebne i ich kolejno\u015b\u0107. Powinno by\u0107 maksymalnie 5 sekcji. Wi\u0119ksza ich liczba utrudnia utrzymanie uwagii odbiorc\u00f3w.: Te sekcje to: - pow\u00f3d analizy, - analiza eksploracyjna, - analiza nastroj\u00f3w, - wnioski, - dzia\u0142ania nast\u0119pcze.","title":"Zarys"},{"location":"DataScience/DataScience/#building-presentation-slides","text":"Slajdy powinny wspierac histori\u0119, kt\u00f3r\u0105 przekazujemy. Powinni\u015bmy pami\u0119ta\u0107 o naszych zdolnosciach uwagi odbiorc\u00f3w. Slajdy nie powinny by\u0107 zawalone tre\u015bci\u0105. Nie powinni\u015bmy przejmowa\u0107 sie czasem sp\u0119dzonym na poszczegolnym slajdzie. Za to powinnismy mie\u0107 jedn\u0105 wiadomo\u015b\u0107 na slajd. Sprawi to ze sprawy b\u0119d\u0105 kr\u00f3tkie i p\u0142ynne. Odbiorcy moga przyswoi\u0107 tylko pewn\u0105 ilo\u015b\u0107 informacji naraz. Pr\u00f3ba wytlumaczenia wielu informacji jednocze\u015bnie zwi\u0119kszy obci\u0105\u017cenie poznawcze, zaciemniaj\u0105 nasz przekaz i spowoduje \u017ce nasi sluchacze przeocz\u0105 niekt\u00f3re kluczowe punkty. Formatowanie moze doprowadzi\u0107 do zaciemnienia przekazu. Jedna z technik jest kolor. Wszystko co prezentujesz powinno przekazywa\u0107 znaczenie. Powi\u015bmy zwracac uwag\u0119 na to aby nasza prezetacja byla tak\u017ce dobrze odbierana przez osoby z niepe\u0142nosprawnosciami, np wykres zielony z czerwonym. Czcionki r\u00f3wnie\u017c wplywaja na czytelno\u015b\u0107. Badania nie okre\u015blaj\u0105 jednoznacznie kt\u00f3ry kroj czcionki jest \u0142atwiejszy do odczytania czy to bedzie szeryfowa czy bezszeryfowa. Praktyk\u0105 jest aby tekst bezszeryfowy by\u0142 odpowiedni dla tekstu, ktory b\u0119dzie czytany na ekranie . Szeryfowa jest dobra gdy tekst b\u0119dzie drukowany . Slajd powinien by\u0107 o tym o czym m\u00f3wimy. Nale\u017cy stara\u0107 si\u0119 by tekst byl kr\u00f3tki ale za to du\u017cy. Formatowanie tekstu jest wa\u017cne ale nie mo\u017cna przesadza\u0107 bo to odwr\u00f3ci uwag\u0119 naszych odbiorc\u00f3w. Slajdy nie powinny zawiera\u0107 du\u017cej ilosci tekstu. Ludzie maja tendencj\u0119 do czytania slajdu a nie do s\u0142uchania. Zamiast d\u0142ugiego tekstu powinni\u015bmy napisa\u0107 g\u0142owne punkty wspieraj\u0105ce nasze przes\u0142anie. Slajdy sa tylko wsparciem. Slajdy nie s\u0105 zbudowane do konsumcji bez prezentera. Nie powinno byc copy paste slajdu z prezentacji do raportu. Nagl\u00f3wek slajdu pozwala na przekonanie odbiorc\u00f3w na zwr\u00f3cenie uwagi. Nagl\u00f3wek powinien podkresla\u0107 g\u0142\u00f3wny punkt slajdu. Powinien by\u0107 zwi\u0119z\u0142y, konkretny i widoczny dzi\u0119ki wi\u0119kszej czcionce. Warstwy to pot\u0119\u017cne narz\u0119dzie, kt\u00f3ry dzieli slajd na mniejsze punkty. Powinnismy miec czysty slajd o lepszej strukturze. U\u0142atwi to skupienie si\u0119 na ka\u017cdej cze\u015bci z osobna. Ka\u017cdy pukt powinien by\u0107 wyja\u015bniany osobno. Na ko\u0144cu wy\u015bwietlamy wszystko razem. Takie podej\u015bcie pozwala na skupienie uwagi odbiorc\u00f3w. Gdy uzywamy zdyt du\u017cej ilo\u015bci tekstu powinni\u015bmy zast\u0105pi\u0107 go wykresem. Warstwowanie mo\u017cemy zastosowa\u0107 tak\u017ce dla wykres\u00f3w. Wy\u015bwietlajac kazdy z nich osobno a na ko\u0144cu \u0142aczyc je. Na slajdzie powinno znajdowa\u0107 sie maksymalnie dwa slajdy.","title":"Building presentation slides"},{"location":"DataScience/DataScience/#delivering-the-presentation","text":"Slajdy powinny wspiera\u0107 historie kt\u00f3r\u0105 chcemy przkaza\u0107. W celu dobrego przygotowania si\u0119 do prezentacji nale\u017cy napisac scenariusz. Uzywa\u0107 go jako przewodnik i spostrze\u017cenia. Powinnismy przewidywa\u0107 pytania od odbiorc\u00f3w i zastanawia\u0107 si\u0119 nad odpowiedziami na nie. Nie kt\u00f3re rzeczy nie brzmi\u0105 tak dobrze w mowie jak to by\u0142ow formie pisemnej. Powinni\u015bmy \u0142\u0105czy\u0107 w mowie kolejne slajdy mi\u0119dzy sob\u0105. Dodatkowo powinni\u015bmy prze\u0107wiczyc odpowiadania na pytania, kt\u00f3re przewidywali\u015bmy. Kilkukrotne prze\u0107wiczenie naszej prezentacji to skuteczny spos\u00f3b na zapoznanie si\u0119 z naszymi tre\u015bciami. Podczas prezentacji powinnismy zwraca\u0107 nasz\u0105 \u015bwiadomo\u015b\u0107 na nasze emocje. Mowa cia\u0142a ma ogromne znaczenie. Odbiorcy potrafi\u0105 utrzyma\u0107 uwag\u0119 od 5 do 20 minut. Trzeba robi\u0107 wszystko by anga\u017cowa\u0107 odbiorc\u00f3w w nasz\u0105 prezentacj\u0119. Mo\u017cemy to zrobi\u0107 po przez kontakt wzrokowy, interaktywno\u015b\u0107, zadaj\u0105c im pytania. Trzeba budowa\u0107 relacj\u0119 z publiczno\u015bci\u0105 trzeba okazywa\u0107 empati\u0119 oraz trzeba by\u0107 przewodnikiem. Powinni\u015bmy unika\u0107 s\u0142\u00f3w \"jak wiesz\" czy \"oczywiscie\". U\u017cywanie takich s\u0142\u00f3w spowoduje, \u017ce odbiorcy nie b\u0119d\u0105 chcieli zadawa\u0107 pyta\u0144. Trzeba robi\u0107 przerwy. Natomiast je\u015bli sprawa jest pilna mo\u017cemy m\u00f3wi\u0107 troch\u0119 szybciej. Po przekazaniu idei nalezy zatrzymac sie na moment i da\u0107 widzom czas do namys\u0142u. Powinni\u015bmy by\u0107 otwarci na pytania wtrakcie lub na ko\u0144cu prezentacji. W przedstawianiu prezentacji powinni\u015bmy: - rozmawia\u0107 z publiczno\u015bci\u0105, - mniej znaczy wi\u0119cej, - przekaz powinien by\u0107 sp\u00f3jny i trwa\u0142y, - byc gotowi na pytania.","title":"Delivering the presentation"},{"location":"DataScience/DataScience/#bedy-w-prezentacji","text":"W celu przygotowania dobrej prezentacji powinni\u015bmy zaplanowa\u0107 to co zamierzamy zaprezentowa\u0107: - unika\u0107 d\u0142ugich prezentacji, - publiczno\u015b\u0107 ma pewien zakres uwagi, - po\u015bwi\u0119ca\u0107 czas na pytania odbiorc\u00f3w, - podawa\u0107 cel prezentacji na pocz\u0105tku, - m\u00f3wcy powinni utzymywa\u0107 uwag\u0119 naszych odbiorc\u00f3w, - Wnioski powinny by\u0107 w ca\u0142ej prezentacji a nie tylko na ko\u0144cu, - unika\u0107 monologu, - angazowa\u0107 odbiorc\u00f3w, - powinni\u015bmy okresla\u0107 nasze kluczowe za\u0142o\u017cenia, - zadawanie pyta\u0144 w trakcie prezentacji, - trzyma\u0107 si\u0119 tematu, - u\u017cywa\u0107 ruchu r\u0105k, - u\u017cywa\u0107 r\u00f3\u017cnych tonacji g\u0142osu by podkresla\u0107 przekaz, - r\u00f3\u017cnicowa\u0107 szybkosc m\u00f3wienia, - przedstawia\u0107 nowe pomy\u015b\u0142y i nowe rozwi\u0105zania, - zaanga\u017cowanie w prezentacj\u0119.","title":"B\u0142\u0119dy w prezentacji"},{"location":"DataScience/DataScience/#import-data","text":"","title":"Import Data"},{"location":"DataScience/DataScience/#reading-file","text":"filename = 'huck_finn.txt' file = open ( filename , mode = 'r' ) #'r' is to read text = file . read () file . close () Powy\u017cszy kod s\u0142u\u017cy do odczytu pliku. Argument r gwarantuje \u017ce plik sluzy tylko do odczytu. text = file.read() - zapis jako jeden ci\u0105g znak\u00f3w.","title":"Reading file"},{"location":"DataScience/DataScience/#zapis-do-pliku","text":"filename = 'huck_finn.txt' file = open ( filename , mode = 'w' ) file . close () Mo\u017cna unikn\u0105\u0107 koniecznosci zamykania po\u0142\u0105czenia z plikiem wykorzystuj\u0105c operator with with open ( 'huck_finn.txt' , 'r' ) as file : text = file . read () Dzi\u0119ki wykorzystaniu with mozliwe jest tworzenie kontekstu, kt\u00f3ry umo\u017cliwa wykonywanie polece\u0144 przy otwartym pliku. Po wyjsciu z tego plik nie jest u\u017cywany. Nazywa si\u0119 to menadzerem kontekstu.","title":"Zapis do pliku"},{"location":"DataScience/DataScience/#import-of-flat-files","text":"Pliki p\u0142askie(flat files) to pliki tekstowe zawierajace rekordy bez relacji strukturalnych (czy nie jak w bazach danych). Czyli nie mo\u017cemy powiazac kolumny r\u00f3\u017cnych tabel. Warto\u015bci w plikach p\u0142askich oddziela si\u0119 znakami lub ciagami znak\u00f3w takimi jak przecinki, tabulatory.","title":"Import of flat files"},{"location":"DataScience/DataScience/#importing-flat-files-using-numpy","text":"Tablice NumPy sa standardem do przechowywania danych liczbowych. S\u0105 szybkie i s\u0105 czyste. Wykorzytywane sa do pakietu scikit-learn, kt\u00f3ry jest popularny do uczenia maszynowego. NumPy posiada wiele wbudowanych funkcji, kt\u00f3re u\u0142atwiaj\u0105 i usprawniaj\u0105 importowanie danych: loadtxt() , genfromtxt() import numpy as np filename = 'MNIST.txt' data = np . loadtxt ( filename , delimiter = ',' ) data Domy\u015blnym ogranicznikiem jest spacja wi\u0119c trzeba okre\u015bli\u0107 ogranicznik jawnie. Je\u015bli chcemy pomin\u0105c dany wiersz to u\u017cywamy parametru skiprows . Je\u015bli chcemy wybrane kolumny to u\u017cywamy usecols import numpy as np filename = 'MNIST.txt' data = np . loadtxt ( filename , delimiter = ',' , skiprows = 1 , usecols = [ 0 , 2 ]) print ( data ) Mo\u017cna importowa\u0107 wy\u0142\u0105cznie dane okre\u015blonego typu. data = np . loadtxt ( filename , delimiter = ',' , dtype = str ) loadtxt ma wad\u0119 gdy importujemy dane r\u00f3\u017anego typu.","title":"Importing flat files using NumPy"},{"location":"DataScience/DataScience/#importing-flat-files-using-pandas","text":"Czym si\u0119 r\u00f3\u017cni\u0105 macierze od ramek danych? Macierze maj\u0105 wiersze i kolumny. Ramki danych posiadaj\u0105 obserwacje i zmienne. Importowanie plik\u00f3w w Pandas import pandas as pd filename = 'winequality-red.csv' data = pd . read_csv ( filename ) data . head () data.head() wy\u015bwietli pierwsze pi\u0119\u0107 wierszy. Mo\u017cna konwertowa\u0107 ramk\u0119 danych do macierzy NumPy. data_array = data . to_numpy () Key arguments for pd.read_csv() include: sep sets the expected delimiter. You can use ',' for comma-delimited. You can use '\\t' for tab-delimited. comment takes characters that comments occur after in the file, indicating that any text starting with these characters should be ignored. na_values takes a list of strings to identify as NA/NaN . By default, some values are already recognized as NA/NaN . Providing this argument will supply additional values.","title":"Importing flat files using pandas"},{"location":"DataScience/DataScience/#introduction-to-other-file-types","text":"Python potrafi oddczyta\u0107 opr\u00f3cz plik\u00f3w *.csv i *.txt tak\u017ce: Excel MATLAB SAS (Statistical Analysis System) Stata (\"Statistics\" + \"data\") HDF5 Python posiada tak\u017ce w\u0142asne rozszerzenie kt\u00f3re u\u017cywa jest to pickled s\u0105 one zapisywane w formacie binarnym. Mo\u017cna nim zapisywa\u0107 r\u00f3\u017cne rodzaje typ\u00f3w zmiennych.","title":"Introduction to other file types"},{"location":"DataScience/DataScience/#otwieranie-pliku-pickle-pkl","text":"Warto zauwa\u017cy\u0107 \u017ce wykorzystano argument 'rb', kt\u00f3ry s\u0142u\u017cy do czytania plik\u00f3w binarnych. import pickle with open ( 'pickled_fruit.pkl' , 'rb' ) as file data = pickle . load ( file ) print ( data )","title":"Otwieranie pliku pickle (pkl):"},{"location":"DataScience/DataScience/#importowanie-danych-z-excela","text":"import pandas as pd file = 'urbanpop.xlsx' data = pd . ExcelFile ( file ) print ( data . sheet_names ) # ['1960-1966', '1967-1974', '1975'] df1 = data . parse ( '1960-1966' ) df2 = data . parse ( 0 ) df1, df2 - wskazanie danego arkusza w excelu. Mo\u017cna wy\u015bwietli\u0107 po nazwie arkusza albo indexie. The spreadsheet 'battledeath.xlsx' is already loaded as xls . As before, you'll use the method parse() . This time, however, you'll add the additional arguments skiprows , names and usecols . These skip rows, name the columns and designate which columns to parse, respectively. All these arguments can be assigned to lists containing the specific row numbers, strings and column numbers, as appropriate.","title":"Importowanie danych z Excela"},{"location":"DataScience/DataScience/#import-sas-files","text":"import pandas as pd from sas7bdat import SAS7BDAT with SAS7BDAT ( 'urbanpop.sas7bdat' ) as file df_sas = file . to_data_frame ()","title":"Import SAS files"},{"location":"DataScience/DataScience/#import-stata-files","text":"import pandas as pd data = pd . read_stata ( 'urbanpop.dta' )","title":"Import Stata files"},{"location":"DataScience/DataScience/#import-hdf5","text":"Format pliku kt\u00f3ry przeechowuje du\u017co danych. Mo\u017cna skalowa\u0107 do setek eksabajt\u00f3w. import h5py filename = 'H-H1_LOSC_4_V1-815411200-4096.hdf5' data = h5py . File ( filename , 'r' ) print ( type ( data )) Struktura plik\u00f3w HDF5 Grupy (Groups) \u2013 Dzia\u0142aj\u0105 jak katalogi, organizuj\u0105c dane w logiczny spos\u00f3b. Datasety (Datasets) \u2013 Macierze numeryczne przechowywane w pliku. Atrybuty (Attributes) \u2013 Dodatkowe informacje przypisane do grup i dataset\u00f3w. Ma hierarchiczn\u0105 struktur\u0119. for key in data . keys (): print ( key ) print ( np . array ( data [ 'meta' ][ 'Description' ]), np . array ( data [ 'meta' ][ 'Detector' ]))","title":"Import HDF5"},{"location":"DataScience/DataScience/#import-matlab","text":"Wykorzystujemy do tego bibliotek\u0119 SciPy , gdzie do odczytu u\u017cywamy scipy.io.loadmat() a do zapisu scipy.io.savemat() Importowany plik MATLAB mo\u017ce zawiera\u0107 zar\u00f3wno zmienne, komentarze, listy, macierze. import scipy.io filename = 'workspace.mat' mat = scipy . io . loadmat ( filename ) print ( type ( mat )) #<class 'dict'> Dane s\u0105 zapisywane w s\u0142owniku. Klucze slownika to nazwy zmiennych MATLAB, a warto\u015bci s\u0142ownika Pythona to obiekty przypisane do zmiennych. Na przyk\u0142ad: print ( type ( mat [ 'x' ])) #<class 'numpy.ndarray'>","title":"Import MATLAB"},{"location":"DataScience/DataScience/#itrodution-to-relational-databases","text":"Bazy danych skladaja sie z tabel po\u0142\u0105czonych miedzy sob\u0105 relacjami. Ka\u017cda tabela to zbi\u00f3r istancji/obiekt\u00f3w/byt\u00f3w kt\u00f3re maja okreslone atrybuty. W wierszach zapisujemy obiekty natomiast w kolumnach atrybuty. Ka\u017cdy wiersz posiada unikalny identyfikator znany jako klucz podstawowy. //TO DO Ka\u017cdy wiersz lub rekord w tabeli reprezentuje instancj\u0119 typu encji. Ka\u017cda kolumna w tabeli reprezentuje atrybut lub cech\u0119 instancji. Ka\u017cda tabela zawiera kolumn\u0119 klucza podstawowego, kt\u00f3ra ma unikalny wpis dla ka\u017cdego wiersza. Istniej\u0105 relacje mi\u0119dzy tabelami. // TO DO 12 przykaza\u0144 Codda - relacyjne bazy danych.","title":"Itrodution to relational databases"},{"location":"DataScience/DataScience/#creating-a-database-engine-in-python","text":"Bedziemy pobiera\u0107 dane z naszych baz danych SQL. Aby uzyska\u0107 dost\u0119p do baz danych z wykorzystaniem Pythona wykorzystujemy: - sqlite3 - SQLAlchemy sqlite3 wsp\u00f3\u0142pracuje tylko z SQLite. Natomiast SQLAlchemy wsp\u00f3\u0142pracuje z wieloma rodzajami baz danych takimi jak Postgres i MySQL. Uruchamiamy silnik SQL, kt\u00f3ry przeka\u017ce nasze wyniki zapyta\u0144 do bazy danych. from sqlalchemy import create_engine engine = create_engine ( 'sqlite:///Northwind.sqlite' ) Nazwy kolumn w tabeli mo\u017cna pozna\u0107 z wykorzystaniem: table_names = engine . table_names () print ( table_names )","title":"Creating a database engine in Python"},{"location":"DataScience/DataScience/#querying-relational-databases-in-python","text":"Tworzenie zapytan do SQL. SELECT * FROM Table_Name SELECT * FROM Orders * - gwiazdka oznacza wszystkie kolumny. W SQLAlchemy tworzymy zapytania w nast\u0119puj\u0105cy spos\u00f3b: - importujemy pakiety i funkcje, - tworzymy silnik, - po\u0142\u0105czenie z nim, - zapytanie do bazy danych, - zapisanie danych - zamkniecie zapytania. Przyk\u0142adowe zapytanie: from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Nortwind.sqlite' ) con = engine . connect () rs = con . execute ( \"SELECT * FROM Orders\" ) df = pd . DataFrame ( rs . fetchall ()) con . close () fetchall odpowiada za pobieranie wierszy w tabeli. Powy\u017csze zapytanie jest niedopracowane ze wzgledu na brak nazw kolumn. Trzeba to doda\u0107 znawanie kolumn df.columns = rs.keys() . from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Nortwind.sqlite' ) con = engine . connect () rs = con . execute ( \"SELECT * FROM Orders\" ) df = pd . DataFrame ( rs . fetchall ()) df . columns = rs . keys () con . close () Powy\u017csze zapytanie mo\u017cna zmieni\u0107 dodaj\u0105c menadzera kontekstu with . from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Nortwind.sqlite' ) with engine . connect () as con : rs = con . execute ( \"SELECT OrderID, OrderDate, ShipName FROM Orders\" ) df = pd . DataFrame ( rs . fetchmany ( size = 5 )) df . columns = rs . keys () fetchmany(size=5) importuje tylko 5 wierszy. Powy\u017csze zapytanie mo\u017cna zrobic krocej i zrobi\u0107 to w jednej linijce: df = pd . read_sql_query ( \"SELECT * FROM Orders\" , engine )","title":"Querying relational databases in Python"},{"location":"DataScience/DataScience/#inner-join-in-pythonpandas","text":"INNER JOIN sluzy do \u0142\u0105czenia tabel. from sqlalchemy import create_engine import pandas as pd engine = create_engine ( 'sqlite:///Northwind.sqlite' ) df = pd . read_sql_query ( \"SELECT OrderID, CompanyName FROM Orders INNER JOIN Customers on Orders.CustomerID = Customers.CustomerID\" , engine ) print ( df . head ())","title":"INNER JOIN in Python(pandas)"},{"location":"DataScience/DataScience/#cleaning-data-in-python","text":"","title":"Cleaning Data in Python"},{"location":"DataScience/DataScience/#data-type-constraints","text":"","title":"Data type constraints"},{"location":"Golang/go/","text":"Notatki j\u0119zyka Go language \u0179r\u00f3d\u0142a: Dany opis zosta\u0142 napisany w oparciu o ksi\u0105\u017ck\u0119 Rusz G\u0142ow\u0105 - Go . J\u0119zyk Go powsta\u0142 w 2009 roku w oparciu o licencj\u0119 Open source przez Googla. Prace nad j\u0119zykiem zaczely si\u0119 2007 roku. G\u0142ownym zadaniem bylo eliminacja d\u0142ugiego oczekiwania na zakonczenie kompilacji. W za\u0142o\u017ceniach nowy projekt stworzenia j\u0119zyka opiera\u0142 si\u0119 na poni\u017cszych celach: szybka kompilacja, mniej skomplikowany kod, automatyczne zwalnianie nieu\u017cywanej pami\u0119ci (umo\u017cliwienie ponownego u\u017cywania), \u0142atwe pisanie oprogramowania wykonuj\u0105ce r\u00f3\u017cne operacje(wsp\u00f3\u0142bie\u017cno\u015b\u0107), dobra obs\u0142uga proces\u00f3w wielordzeniowych. Pierwszy program w go package main import \"fmt\" func main (){ fmt . Println ( \"Hello, Go!\" ) } Kod w j\u0119zyku Go dzieli si\u0119 na trzy cz\u0119\u015bci: 1) Klauzura package 2) instrukcje import 3) wykonywany kod Pakiet to zbi\u00f3r kodu oprzeznaczonego do podobnych zada\u0144. Pakiet main s\u0142u\u017cy do tego, aby okre\u015bli\u0107, \u017ce dany plik jest programem wykonywalnym, a nie tylko bibliotek\u0105. Pakiet main m\u00f3wi \u017ce kod ma by\u0107 uruchamiany bezpo\u015brednio. W ka\u017cdym pliku nale\u017cy zaimportowa\u0107 inne pakiety, aby kod z danego pliku m\u00f3g\u0142 u\u017cywa\u0107 kodu z podanych pakiet\u00f3w. Nalezy unika\u0107 wczytywania ca\u0142ego kodu j\u0119zyka Go co mo\u017ce powodowa\u0107 powstanie du\u017cego i powolnego programu. Nale\u017cy importowa\u0107 tylko te pakiety kt\u00f3re b\u0119d\u0105 u\u017cywane. Ostatnia cz\u0119\u015b\u0107 to wykonywany kod: Ta cz\u0119\u015b\u0107 podzielona jest na funkcje. Funkcja to grupa wierszy, kt\u00f3re mo\u017cna wykonywa\u0107 w innych miejscach programu. Dodatkowe informacje: W j\u0119zyku Go dopuszczalne jest u\u017cywanie \u015brednik\u00f3w ale nie jest to wymagane ale nie jest dobrze widziane. Jezyk go dostarcza narzedzia ktore pozwalaj\u0105 na automatyczne formatowanie kodu. Wykorzystuje si\u0119 do tego komendy go format . Komunikaty o b\u0142\u0119dach dokonuj\u0105c drobnej modyfikacji pierwszego kodu tak by otrzyma\u0107 komunikat o b\u0142edzie. Pomijamy nawiasy. package main import \"fmt\" func main (){ fmt . Println \"Hello, Go!\" } ./test.go:6:13: syntax error: unexpected literal \"Hello, World!\" at end of statement J\u0119zyk Go informuje w \u0142atwy spos\u00f3b informuje o b\u0142\u0119dzie. Funkcja Println Funkcj\u0119 Println mo\u017ce przyjmowa\u0107 dowoln\u0105 liczb\u0119 argument\u00f3w nawet zero. Wy\u015bwietlane argumenty s\u0105 wy\u015bwietlane w oknie terminala z rozdzielon\u0105 spacj\u0105. Cz\u0142on ln oznacza przej\u015bcie do kolejnego wiersza w oknie terminala. Aby uzyska\u0107 dost\u0119p do danej funkcji nale\u017cy zaimportowa\u0107 zawieraj\u0105cy j\u0105 pakiet. Dla przyk\u0142adu fmt.Println - fmt \u2192 nazwa pakietu - Println() \u2192 nazwa funkcji Aby zaimportowa\u0107 funkcje z kilku r\u00f3\u017cnych pakiet\u00f3w nale\u017cy umieszcic w nawiasie. Nale\u017cy pami\u0119ta\u0107 \u017ce jeden pakiet w jednej linii. package main import ( \"fmt\" \"math\" \"strings\" ) func main () { fmt . Println ( math . Floor ( 2.75 )) fmt . Println ( strings . Title ( \"hello\" )) } Typy w Go Litera\u0142 tekstowy (ang. string literal) - ci\u0105g znak\u00f3w; tekst pomiedzy cudzys\u0142owami. Runy (ang. rune) - oznaczaja pojedy\u0144cze znaki. Przechowywane sa jako kody liczbowe(standard Unicode) Przekazuj\u0105c run\u0119 do funkcji fmt.Println otrzymamy kod a nie znak. warto\u015bci logiczne - true/false liczby - J\u0119zyk Go traktuje liczby calkowite i zmiennoprzecinkowe jako warto\u015bci roznych typ\u00f3w. Operacje matematyczne tak jak to jest we wszystkich innych j\u0119zykach: == slu\u017cy do sprawdzenia czy wartosci s\u0105 r\u00f3wne, != s\u0142u\u017cy do sprawdzenia czy wartosci s\u0105 ro\u017cne, < = > wieksza, r\u00f3wna Statyczna kontrola typ\u00f3w Satyczna analiza typ\u00f3w oznacza \u017ce jeszcze przed uruchomieniem programu wie, jakiego typu b\u0119d\u0105 warto\u015bci. Funkcje oczekuj\u0105 argumentow okre\u015blonych typ\u00f3w, a waro\u015bci zwracane maj\u0105 ustalony typ. J\u0119zyk Go jeszcze przed uruchomieniem wyswietli komunikat o b\u0142edzie, pozwala to unikn\u0105\u0107 problemu, zanim zauwa\u017c\u0105 go u\u017cytkownicy. Deklarowanie zmiennych Zmienna to fragment pami\u0119ci zawieraj\u0105cy warto\u015b\u0107. W j\u0119zyku Go aby poprawnie zadeklarowac zmienna nalezy najpierw poda\u0107 s\u0142owo kluczowe var , nastepnie nazw\u0119 zmiennej i typ przechowywanej warto\u015bci. Mo\u017cna deklarowa\u0107 jednym wierszu wiele zmiennych tego samego typu. var quality int var length , width float64 var customerName string Po\u017cniej mo\u017cna przej\u015bc do przypisania warto\u015bci uzywajac operatora = . quantity = 2 customerName = \"Joanna\" W jednej linii mo\u017cna przypisa\u0107wiele wartosci do wielu zmiennych. Nazwy te nalezy oddzieli\u0107 je mi\u0119dzy sob\u0105 przecinkami. Liczba zmiennych musi pokrywac si\u0119 z liczb\u0105 warto\u015bci kt\u00f3re chcemy do nich przypisa\u0107. Je\u015bli nie b\u0119dzie r\u00f3wna to wy\u015bwietli si\u0119 b\u0142\u0105d. length , width = 1.2 , 2.4 Mo\u017cna oddrazu deklarowa\u0107 zmienne i przypisac im wartosci. var quantily int = 4 Mo\u017cna przypisac do zmiennej nowe warto\u015bci, jednak musz\u0105 by\u0107 to warto\u015bci tego samego typu. Wynika to wcze\u015bniej wspomnianej statycznej kontroli typ\u00f3w. Je\u015bli zadeklaurujemy i nie przypiszemy \u017cadnych wartosci to zmiennych to te zmienne b\u0119d\u0105 mia\u0142y przypisan\u0105 warto\u015b\u0107 zerow\u0105 dla danego typu. 0 dla zmiennych typu int, float64 itd. false dla zmiennych typu bool pusty \u0142ancuch znak\u00f3w dla string. Kr\u00f3tkie deklarowanie zmiennych Je\u015bli jednak zaraz po zadeklarowaniu zmiennej znana jest jej poczatkowa warto\u015b\u0107, cz\u0119\u015bciej stosuje si\u0119 kr\u00f3tkie deklaracje zmiennych . Zamiast jawnego deklarowania typu zmiennej oraz przypisywania do nich warto\u015bci za pomoc\u0105 = mo\u017cna przypisa\u0107 do niej warto\u015b\u0107 u\u017cywaj\u0105c operatora := . package main import ( \"fmt\" ) func main () { quantity := 10 length , width := 10.5 , 5.2 customerName := \"Damon Cole\" fmt . Println ( \"Quantity is\" , quantity ) fmt . Println ( \"Size is\" , length , \"by\" , width ) fmt . Println ( \"Customer is\" , customerName ) } Cz\u0119ste b\u0142\u0119dy: quantity := 10 quantity := 5 Operator := s\u0142u\u017cy jednocze\u015bnie do deklaracji i inicjalizacji nowych zmiennych. Operator := ten nie s\u0142u\u017cy do modyfikacji ju\u017c istniej\u0105cych zmiennych. quantity = 10 Je\u015bli zapomnimy : powyzsza instrukcja zostanie uznana za przypisanie a nie za deklaracje. Nie wolno przypisywac wartosci do niezadeklarowanych zmiennych. quantity := 10 quantity = \"a\" Do danej zmiennej mo\u017cna przypisywac tylko warto\u015bci tego samego typu. Nale\u017cy uzywa\u0107 wszytkie zadeklarowane zmienne, kt\u00f3re nie s\u0105 u\u017cywane. Je\u015bli usuniesz kod ktory uzywa zmiennej nale\u017cy tak\u017ce wyeliminowac deklaracj\u0119. Regu\u0142y tworzenia nazw Poni\u017cej przedstawiono jak powinno tworzy\u0107 nazwy zmiennych, funkcji i typ\u00f3w w j\u0119zyku Go: nazwy powinny si\u0119 zaczyna\u0107 si\u0119 od litery Je\u015bli zmienna rozpoczyna si\u0119 wielka liter\u0105 to dany element jest eksportowany i mo\u017cna go wykorzystywac w innych pakietach ni\u017c bie\u017cacy. Dla przyk\u0142adu fmt.Println stosowane jest wielkie P , dzi\u0119ki czemu funkcji mo\u017cna u\u017cywa\u0107 w main i dowolnym innym pakiecie. Je\u015bli nazwa zmiennej zaczyna sie ma\u0142\u0105 liter\u0105 to oznacza \u017ce mozna z niego korzystac tylko w tym bie\u017c\u0105cym pakiecie. Poprawne: length stack2 sales . Total Niepoprawne 2 stack \u2190 Nazwa ** nie mo\u017ce ** zaczyna\u0107 si\u0119 od cyfry sales . Total \u2190 ** nie mo\u017cna ** uzy\u0107 elementow z innych pakietow je\u015bli nazwa zaczyna si\u0119 od ma\u0142ej litery Powyzsze dwie cechy sa wymuszane przez j\u0119zyk. Poni\u017cej przedstawiono jeszcze kilka dodatkowych konwencji: Je\u015bli nazwa sk\u0142ada si\u0119 z wielu s\u0142\u00f3w, to s\u0142owo po pierwszym powinno zaczyna\u0107 si\u0119 wielk\u0105 liter\u0105. S\u0142owa powinno si\u0119 \u0142\u0105czy\u0107 bez stosowania spacji. Wykorzystujemy notacj\u0119 wielb\u0142\u0105dzi\u0105 (camel notation) Pierwsa litera powinna by\u0107 wileka tylko wtedy gdy chcemy eksportowa\u0107 dany element poza pakiet. dla oczywistych przyklad\u00f3w skraca si\u0119 nazw\u0119 na przyk\u0142ad: max zamiast maximum , i zamiast indeks . Poprawne: sheetLength TotalUnits i Niezgodne z konwencjami: sheetlength \u2190 kolejne s\u0142owa powinny zaczyna\u0107 sie wielka liter\u0105 Total_Units \u2190 nazwy powinny byc bezposrednio po\u0142\u0105czone index \u2190 zast\u0105pic to skr\u00f3tem Operacje matematyczne i por\u00f3wnania w j\u0119zyku Go wymagaj\u0105 u\u017cywania warto\u015bci tego samego typu. U\u017cycie warto\u015bci ro\u017cnych typ\u00f3w spowoduje b\u0142\u0105d przy probie uruchomienia kodu. var length float64 = 1.2 var width int = 2 fmt . Println ( \"Powierczhnia wynosi\" , length * width ) fmt . Println ( \"length > width\" , length > width ) ./ShortDeclaration.go:17:37: invalid operation: length * width (mismatched types float64 and int) ./ShortDeclaration.go:18:41: invalid operation: length > width (mismatched types float64 and int) Nowe wartosci ktore przypisujemy do zmiennych te\u017c musz\u0105 mie\u0107 ten sam typ. var length float64 = 1.2 var width int = 2 length = width fmt . Println ( length ) command-line-arguments ./ShortDeclaration.go:17:11: cannot use width (variable of type int) as float64 value in assignment Rozwi\u0105zaniem powyzszych problem\u00f3w jest zastosowanie konwersji , pozwalajacych na przekszta\u0142cenie warto\u015bci jednego typu na inny typ. Wystarczy poda\u0107 typ na kt\u00f3ry chcesz zmieni\u0107. var myInt int = 2 float64 ( myInt ) float64 \u2190 typ na kt\u00f3ry przeprowadzana jest konwersja, (myInt) \u2190 przekszta\u0142cana warto\u015b\u0107. Dokonanie konwersji: var length float64 = 1.2 var width int = 2 fmt . Println ( \"Powierczhnia wynosi\" , length * width ) fmt . Println ( \"length > width\" , length > width ) Wyniku czego otrzymamy: Powierczhnia wynosi 2.4 length > width? false Tak samo b\u0119dzie tutaj: var length float64 = 1.2 var width int = 2 length = float64 ( width ) fmt . Println ( length ) Warto pamieta\u0107,\u017ce gdy zmieniamy warto\u015b\u0107 z typu float64 na typ int cz\u0119\u015b\u0107 u\u0142amkowa bedzie pomijana. var length float64 = 3.75 var width int = 5 width = int ( length ) fmt . Println ( width ) Otrzymamy: 3 Narz\u0119dzia jezyka Go go build \u2190 kompiluje pliki z kodem do postaci plik\u00f3w binarnych go run \u2190 kompiluje i uruchamia program bez zapisywania pliku wykonywalnego. Zaleca si\u0119 korzystaniez niego dla ma\u0142ych programami . Gdy wprowadzisz zmiany w kodzie, nie b\u0119dziesz musia\u0142 wykonywa\u0107 odr\u0119bnego kroku kompilacji. go fmt \u2190 formatuje pliki \u017ar\u00f3d\u0142owe zgodnie ze standordowym formatowania j\u0119zyka Go go version \u2190 wy\u015bwietla zainstalowan\u0105 wersj\u0119 j\u0119zyka Go Rozbudowane programy uruchamia sie po przez kolejne uzycie komend: 1) go fmt hello.go 2) go build hello.go 3) ./hello Wywo\u0142ywanie metod W Go mo\u017cna definiowa\u0107 metody . S\u0105 to funkcje powi\u0105zane z warto\u015bciami okre\u015blonego typu. package main import ( \"fmt\" \"time\" ) func main () { var now time . Time = time . Now () var year int = now . Year () fmt . Println ( \"Year is\" , year ) } Pakiet time zawiera typ Time , kt\u00f3ry reprezentuje date(rok, miesi\u0105c, dzie\u0144). Ka\u017cda warto\u015b\u0107 typu time.Time udost\u0119pnia metod\u0119 Year , ktora zwraca rok. W kodzie ponizej metoda s\u0142u\u017cy do wy\u015bwietlenia bie\u017c\u0105cego roku. package main import ( \"fmt\" \"time\" ) func main () { var now time . Time = time . Now () var year int = now . Year () fmt . Println ( \"Year is\" , year ) } Funkacja time.Now zwraca now\u0105 warto\u015b\u0107 typu time.Time z bie\u017c\u0105c\u0105 dat\u0105 i czasem. Warto\u015b\u0107 ta przypisywana jest do zmiennej now . Nast\u0119pnie wywo\u0142ywana jest metoda Year dla warto\u015bci wskazanej przez now now.Year() \u2190 now \u2190 Przechowuje warto\u015b\u0107 typu time.Time, Year() \u2190 Wywo\u0142uje metod\u0119 Year dla warto\u015bci typu time.Time Metoda Year zwraca liczb\u0119 ca\u0142kowit\u0105 reprezentuj\u0105ca rok, kt\u00f3ry nast\u0119pnie jest wy\u015bwietlany. Nastepny przyklad: package main import ( \"fmt\" \"strings\" ) func main () { broken := \"G# t# super j\u0119zyk\" replacer := strings . NewReplacer ( \"#\" , \"o\" ) var fixed string = replacer . Replace ( broken ) fmt . Println ( fixed ) } Funkcja strings.NewReplacer przyjmuje argumenty w postaci zast\u0119powanego pod\u0142a\u0144cucha (\"#\") i podstawionego tekstu (\"o\"), a zwraca warto\u015b\u0107 typu string.Replacer . Gdy przeka\u017cesz \u0142ancuch znak\u00f3w do metody Replace warto\u015bci typu Replacer , metoda zwroci zmodyfikowany \u0142ancuch znak\u00f3w. Kropka oznacza \u017ce element podany po prawej stronie nale\u017cy do jednostki podanej po lewej. !!! Funkcje nale\u017c\u0105 do pakietu, a metody do warto\u015bci. !!! Obliczenie oceny Stworzenie prostego programu w j\u0119zyku go , kt\u00f3ry po wprowadzeniu danych w procentach analizuje czy uczen zda\u0142. Wynik poni\u017cej 60% oznacza nie zdanie egzaminu. Komentarze W jezyku go komentarze oznacza si\u0119 za pomoc\u0105 dw\u00f3ch uko\u015bnik\u00f3w // . Tak jak to jest w innch jezykach mo\u017c;liwe sa tak\u017ce komentarze blokowe oznaczane jako /* Tre\u015b\u0107 komentarza */ Pobieranie wyniku od u\u017cytkownika package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input := reader . ReadString ( '\\n' ) fmt . Println ( input ) } W linijce reader := bufio.NewReader(os.Stdin) Wykorzystano funkcj\u0119 NewReader , kt\u00f3ra pozwala na pobranie tekstu z klawiatury zawarte w strumieniu os.Stdin . Nast\u0119pnie wywo\u0142ywana jest metoda ReadString , kt\u00f3ra zwraca dane wpisane przez u\u017cytkownika do runy nowego wiersza czyli do klikni\u0119cia przycisku \"Enter\" . Po uruchomieniu ukarze si\u0119 komunikat: $ go run pass_fail.go /# command-line-arguments ./pass_fail.go:12:11: assignment mismatch: 1 variable but reader.ReadString returns 2 values Powy\u017cszy komunikat m\u00f3wi \u017ce pr\u00f3bujemy zwroci\u0107 dwie warto\u015bci, a podana jest tylko jedna zmienna. Jezyk Go umo\u017cliwia zwracanie dowolnej liczby warto\u015bci przez funkcje i metody, najcz\u0119sciej dodatkowe zmienne informuj\u0105 o b\u0142\u0119dach. Funkcje i metody zwracaj\u0105ce wiele warto\u015bci package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) fmt . Println ( input ) } Dodanie do powy\u017cszego kody zmiennej err nie pozwoli na skompiluje, gdy\u017c j\u0119zyk go nie pozwala na skompilowanie kodu, gdzie znajduje si\u0119 zmienna, kt\u00f3rej nie u\u017cywamy. Zignorowanie wartosci b\u0142\u0119du za pomoc\u0105 pustego identyfikatora Gdy nie chcemy u\u017cywa\u0107 zmniennej zwracanej przez funkcj\u0119 lub metod\u0119 mo\u017cemy uzy\u0107 pustego identyfikatora czyli (_) . package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , _ := reader . ReadString ( '\\n' ) fmt . Println ( input ) } Obs\u0142uga b\u0142\u0119du Ignorowanie b\u0142\u0119du nie jest dobrym pomys\u0142em, gdy\u017c je\u015bli by ten b\u0142\u0105d si\u0119 pojawi\u0142 to nie zostalibysmy o tym poinformowani. Najlepiej abysmy zostali poinformowani o b\u0142\u0119dzie i zatrzymali program. Do tego s\u0142u\u017cy pakiet log , kt\u00f3ry zawiera funkcj\u0119 Fatal . Pozwala ona na wwy\u015bwietlenie komunikatu w terminalu oraz zatrzymanie (\"zabicia\") programu. package main import ( \"bufio\" \"fmt\" \"log\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) log . Fatal ( err ) fmt . Println ( input ) } $ go run pass_fail.go Podaj wynik egzaminu: 50 2024/10/25 20:40:29 exit status 1 Funkcje takie jak ReedString zwracaj\u0105 warto\u015b\u0107 b\u0142\u0119du nil , gdy b\u0142\u0105d nie nast\u0105pi\u0142 . Chcemy aby program ko\u0144czy\u0142 je\u015bli zmienna err ma warto\u015b\u0107 inn\u0105 od nil . Do tego s\u0142u\u017c\u0105 funkcje warunkowe, kt\u00f3re powoduj\u0105 wykonanie bloku kodu tylko wtedy, gdy spe\u0142niony jest dany warunek. Instrukcje warunkowe Instrukcje warunkowe wykonuja instrukcje gdy spelniony zostanie warunek. Innymi s\u0142owy gdy warunek zwr\u00f3ci warto\u015b\u0107 wyniku true to zostanie wykonany kod w bloku warunkowym. Je\u017celi wynik to false to blok warunkowy jest pomijany. if 1 == 1 { // wynik true fmt . Println ( \"Zostan\u0119 wy\u015bwietlony\" ) } if 1 >= 2 { //wynik false fmt . Println ( \"A ja nie zostan\u0119 wy\u015bwitlony\" ) } Warunkowe rejestrowanie b\u0142\u0119du krytycznego Powracaj\u0105c do naszego b\u0142\u0119du, gdzie program ko\u0144czy\u0142 prace i zg\u0142asza\u0142 b\u0142\u0105d. $ go run pass_fail.go Podaj wynik egzaminu: 50 2024/10/25 20:40:29 exit status 1 Wykorzystuj\u0105c instrukcje warunkowe do rozwi\u0105zania naszego problemu musimy przerwac program gdy warto\u015b\u0107 zmiennej err jest inna ni\u017c nil . Nasza instrukcja warunkowa wyglada nast\u0119puj\u0105co: if err != nil { log . Fatal ( err ) } package main import ( \"bufio\" \"fmt\" \"log\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) if err != nil { log . Fatal ( err ) } fmt . Println ( input ) } Warto zaznaczy\u0107 \u017ce powy\u017cszy program wy\u015bwietla liczb\u0119 wpisan\u0105 przez u\u017cytkownika. Zakrywanie nazw Dobr\u0105 praktyk\u0105 jest unikanie skrut\u00f3w. Jednak\u017ce zmienna error jest z\u0142ym pomys\u0142em, gdy\u017c zakryje zmienn\u0105 typu error . Podczas deklaracji zmiennej pamietaj, \u017ce nazwa zmiennej powinna by\u0107 r\u00f3\u017cna od istniej\u0105cych zmiennych. Je\u015bli nie to w konsekwencji nowa zmienna zakryje poprzedni\u0105 funkcjonalno\u015b\u0107. package main import ( \"fmt\" ) func main () { var int int = 12 var append string = \"minut dadatkowych materia\u0142\u00f3w\" var fmt string = \"DVD\" var count int var languages = append ([] string {}, \"Espanol\" ) fmt . Println ( int , append , fmt , languages ) } Powy\u017cszy kod nie skompiluje si\u0119 ze wzgl\u0119du na to zakrylisci nazw\u0105 zmiennej typ zmiennej int , funkcj\u0119 append , nazw\u0119 pakietu . Aby ten problem rozwi\u0105za\u0107, wystarczy zmieni\u0107 nazwy zmiennych: package main import ( \"fmt\" ) func main () { var count int = 12 var suffix string = \"minut dadatkowych materia\u0142\u00f3w\" var format string = \"DVD\" var languages = append ([] string {}, \"Espanol\" , \"Francais\" ) fmt . Println ( count , suffix , format , languages ) } Przekszta\u0142canie \u0142ancuch\u00f3w znak\u00f3w na liczby Powracaj\u0105c do naszego programu pass_fail.go Instrukcje warunkowe umo\u017cliwiaj\u0105 sprawdzanie podanego wyniku. Dodatkowo istnieje instrukcja if/else kt\u00f3ra okre\u015bla zaliczenie albo jego brak. package main import ( \"bufio\" \"fmt\" \"log\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) if err != nil { log . Fatal ( err ) } if input >= 60 { status := \"zaliczenie\" } else { status := \"brak zaliczenia\" } fmt . Println ( \"Status:\" , status ) } *$ go run pass_fail.go command-line-arguments ./pass_fail.go:18:14: invalid operation: input >= 60 (mismatched types string and untyped int)* Przyczyna b\u0142\u0119du jest wczytanie danej z klawiatury jako \u0142a\u0144cucha znak\u00f3w. Jezyk Go potrafi por\u00f3wnywa\u0107 liczby tylko z innymi liczbami (dane kt\u00f3re porownujemy w warunku musz\u0105 by\u0107 tego samego typu), nie por\u00f3wnuje liczby z \u0142ancuchem znak\u00f3w lub odwrotnie. Nie mo\u017cna przekonwertowa\u0107 bezposrednio z typu string na liczby . float64 ( \"2.6\" ) Wy\u015bwietli si\u0119 wtedy taki komunikat: cannot convert \"2.6\" (type string) to type float64 Nalezy zwr\u00f3ci\u0107 uwag\u0119 na: dane wprowadzone z klawiatury posiadaj\u0105 znak nowego wiersza (\\n) , kt\u00f3ry trzeba usun\u0105\u0107 reszt\u0119 \u0142a\u0144cucha znak\u00f3w trzeba przekszta\u0142ci\u0107 na liczb\u0119 zmienno przecinkow\u0105 Aby usun\u0105\u0107 znak nowego wiersza nale\u017cy u\u017cy\u0107 funkcji TrimSpace , kr\u00f3ra eliminuje wszystkie bia\u0142e znaki(znak nowego wiersza, tabulacji, spacje) zar\u00f3wno z pocz\u0105tku jak i ko\u0144ca \u0142a\u0144cucha znak\u00f3w. s := \"\\t wczesniej by\u0142 tabulator i nowy wiersze \\n\" fmt . Println ( s ) fmt . Println ( strings . TrimSpace ( s )) $ go run pass_fail . go wczesniej by\u0142 tabulator i nowy wiersze wczesniej by\u0142 tabulator i nowy wiersze input = strings.TrimSpace(input) Wyniku czego pozostanie tylko wprowadzona liczba. Teraz wykorzystujemy funkcj\u0119 ParseFloat z pakietu strconv do przekszta\u0142cenia liczby na wartos\u0107 typu float64. grade , err := strconv . ParseFloat ( input , 64 ) Poowyzsza funkcja zwraca: - warto\u015b\u0107 typu float64 grade - ewentualny b\u0142\u0105d err <- gdy nie da sie przekszta\u0142ci\u0107 - \u0142a\u0144cuch znak\u00f3w input - precyzja w bitach 64 Po modyfikacjach kod wyglada nast\u0119puj\u0105co: package main import ( \"bufio\" \"fmt\" \"log\" \"os\" \"strconv\" \"strings\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) if err != nil { log . Fatal ( err ) } input = strings . TrimSpace ( input ) grade , err := strconv . ParseFloat ( input , 64 ) if err != nil { log . Fatal ( err ) } if grade >= 60 { status := \"zaliczenie\" } else { status := \"brak zaliczenia\" } fmt . Println ( \"Status:\" , status ) } Niestety pojawia si\u0119 nast\u0119pny b\u0142\u0105d: if grade >= 60 { status := \"zaliczenie\" } else { status := \"brak zaliczenia\" } fmt . Println ( \"Status:\" , status ) $ go run pass_fail . go # command - line - arguments . / pass_fail . go : 28 : 3 : declared and not used : status . / pass_fail . go : 30 : 3 : declared and not used : status . / pass_fail . go : 32 : 25 : undefined : status Jka wida\u0107 2 pierwsze b\u0142\u0119dy dotycz\u0105 \u017ce zmienna zosta\u0142a zadeklarowana a nie zosta\u0142a u\u017cyta, a trzeci dotyczy \u017ce zmienna nie zosta\u0142a zdefiniowana. Bloki i ich zasi\u0119g B\u0142\u0105d narodzi\u0142 si\u0119 ze wzgl\u0119du na podzielenie kodu na bloki . Bloki mog\u0105 by\u0107 zagnie\u017cdzone jeden w drugim. Ka\u017cda deklarowana zmienna ma zasi\u0119g, czyli zakres kodu w jakim jest widoczna. Pr\u00f3ba u\u017cycia ko\u0144czy si\u0119 b\u0142\u0119dem.","title":"Notatki j\u0119zyka Go language"},{"location":"Golang/go/#notatki-jezyka-go-language","text":"","title":"Notatki j\u0119zyka Go language"},{"location":"Golang/go/#zroda","text":"Dany opis zosta\u0142 napisany w oparciu o ksi\u0105\u017ck\u0119 Rusz G\u0142ow\u0105 - Go . J\u0119zyk Go powsta\u0142 w 2009 roku w oparciu o licencj\u0119 Open source przez Googla. Prace nad j\u0119zykiem zaczely si\u0119 2007 roku. G\u0142ownym zadaniem bylo eliminacja d\u0142ugiego oczekiwania na zakonczenie kompilacji. W za\u0142o\u017ceniach nowy projekt stworzenia j\u0119zyka opiera\u0142 si\u0119 na poni\u017cszych celach: szybka kompilacja, mniej skomplikowany kod, automatyczne zwalnianie nieu\u017cywanej pami\u0119ci (umo\u017cliwienie ponownego u\u017cywania), \u0142atwe pisanie oprogramowania wykonuj\u0105ce r\u00f3\u017cne operacje(wsp\u00f3\u0142bie\u017cno\u015b\u0107), dobra obs\u0142uga proces\u00f3w wielordzeniowych.","title":"\u0179r\u00f3d\u0142a:"},{"location":"Golang/go/#pierwszy-program-w-go","text":"package main import \"fmt\" func main (){ fmt . Println ( \"Hello, Go!\" ) } Kod w j\u0119zyku Go dzieli si\u0119 na trzy cz\u0119\u015bci: 1) Klauzura package 2) instrukcje import 3) wykonywany kod Pakiet to zbi\u00f3r kodu oprzeznaczonego do podobnych zada\u0144. Pakiet main s\u0142u\u017cy do tego, aby okre\u015bli\u0107, \u017ce dany plik jest programem wykonywalnym, a nie tylko bibliotek\u0105. Pakiet main m\u00f3wi \u017ce kod ma by\u0107 uruchamiany bezpo\u015brednio. W ka\u017cdym pliku nale\u017cy zaimportowa\u0107 inne pakiety, aby kod z danego pliku m\u00f3g\u0142 u\u017cywa\u0107 kodu z podanych pakiet\u00f3w. Nalezy unika\u0107 wczytywania ca\u0142ego kodu j\u0119zyka Go co mo\u017ce powodowa\u0107 powstanie du\u017cego i powolnego programu. Nale\u017cy importowa\u0107 tylko te pakiety kt\u00f3re b\u0119d\u0105 u\u017cywane. Ostatnia cz\u0119\u015b\u0107 to wykonywany kod: Ta cz\u0119\u015b\u0107 podzielona jest na funkcje. Funkcja to grupa wierszy, kt\u00f3re mo\u017cna wykonywa\u0107 w innych miejscach programu. Dodatkowe informacje: W j\u0119zyku Go dopuszczalne jest u\u017cywanie \u015brednik\u00f3w ale nie jest to wymagane ale nie jest dobrze widziane. Jezyk go dostarcza narzedzia ktore pozwalaj\u0105 na automatyczne formatowanie kodu. Wykorzystuje si\u0119 do tego komendy go format .","title":"Pierwszy program w go"},{"location":"Golang/go/#komunikaty-o-bedach","text":"dokonuj\u0105c drobnej modyfikacji pierwszego kodu tak by otrzyma\u0107 komunikat o b\u0142edzie. Pomijamy nawiasy. package main import \"fmt\" func main (){ fmt . Println \"Hello, Go!\" } ./test.go:6:13: syntax error: unexpected literal \"Hello, World!\" at end of statement J\u0119zyk Go informuje w \u0142atwy spos\u00f3b informuje o b\u0142\u0119dzie.","title":"Komunikaty o b\u0142\u0119dach"},{"location":"Golang/go/#funkcja-println","text":"Funkcj\u0119 Println mo\u017ce przyjmowa\u0107 dowoln\u0105 liczb\u0119 argument\u00f3w nawet zero. Wy\u015bwietlane argumenty s\u0105 wy\u015bwietlane w oknie terminala z rozdzielon\u0105 spacj\u0105. Cz\u0142on ln oznacza przej\u015bcie do kolejnego wiersza w oknie terminala. Aby uzyska\u0107 dost\u0119p do danej funkcji nale\u017cy zaimportowa\u0107 zawieraj\u0105cy j\u0105 pakiet. Dla przyk\u0142adu fmt.Println - fmt \u2192 nazwa pakietu - Println() \u2192 nazwa funkcji Aby zaimportowa\u0107 funkcje z kilku r\u00f3\u017cnych pakiet\u00f3w nale\u017cy umieszcic w nawiasie. Nale\u017cy pami\u0119ta\u0107 \u017ce jeden pakiet w jednej linii. package main import ( \"fmt\" \"math\" \"strings\" ) func main () { fmt . Println ( math . Floor ( 2.75 )) fmt . Println ( strings . Title ( \"hello\" )) }","title":"Funkcja Println"},{"location":"Golang/go/#typy-w-go","text":"Litera\u0142 tekstowy (ang. string literal) - ci\u0105g znak\u00f3w; tekst pomiedzy cudzys\u0142owami. Runy (ang. rune) - oznaczaja pojedy\u0144cze znaki. Przechowywane sa jako kody liczbowe(standard Unicode) Przekazuj\u0105c run\u0119 do funkcji fmt.Println otrzymamy kod a nie znak. warto\u015bci logiczne - true/false liczby - J\u0119zyk Go traktuje liczby calkowite i zmiennoprzecinkowe jako warto\u015bci roznych typ\u00f3w. Operacje matematyczne tak jak to jest we wszystkich innych j\u0119zykach: == slu\u017cy do sprawdzenia czy wartosci s\u0105 r\u00f3wne, != s\u0142u\u017cy do sprawdzenia czy wartosci s\u0105 ro\u017cne, < = > wieksza, r\u00f3wna","title":"Typy w Go"},{"location":"Golang/go/#statyczna-kontrola-typow","text":"Satyczna analiza typ\u00f3w oznacza \u017ce jeszcze przed uruchomieniem programu wie, jakiego typu b\u0119d\u0105 warto\u015bci. Funkcje oczekuj\u0105 argumentow okre\u015blonych typ\u00f3w, a waro\u015bci zwracane maj\u0105 ustalony typ. J\u0119zyk Go jeszcze przed uruchomieniem wyswietli komunikat o b\u0142edzie, pozwala to unikn\u0105\u0107 problemu, zanim zauwa\u017c\u0105 go u\u017cytkownicy.","title":"Statyczna kontrola typ\u00f3w"},{"location":"Golang/go/#deklarowanie-zmiennych","text":"Zmienna to fragment pami\u0119ci zawieraj\u0105cy warto\u015b\u0107. W j\u0119zyku Go aby poprawnie zadeklarowac zmienna nalezy najpierw poda\u0107 s\u0142owo kluczowe var , nastepnie nazw\u0119 zmiennej i typ przechowywanej warto\u015bci. Mo\u017cna deklarowa\u0107 jednym wierszu wiele zmiennych tego samego typu. var quality int var length , width float64 var customerName string Po\u017cniej mo\u017cna przej\u015bc do przypisania warto\u015bci uzywajac operatora = . quantity = 2 customerName = \"Joanna\" W jednej linii mo\u017cna przypisa\u0107wiele wartosci do wielu zmiennych. Nazwy te nalezy oddzieli\u0107 je mi\u0119dzy sob\u0105 przecinkami. Liczba zmiennych musi pokrywac si\u0119 z liczb\u0105 warto\u015bci kt\u00f3re chcemy do nich przypisa\u0107. Je\u015bli nie b\u0119dzie r\u00f3wna to wy\u015bwietli si\u0119 b\u0142\u0105d. length , width = 1.2 , 2.4 Mo\u017cna oddrazu deklarowa\u0107 zmienne i przypisac im wartosci. var quantily int = 4 Mo\u017cna przypisac do zmiennej nowe warto\u015bci, jednak musz\u0105 by\u0107 to warto\u015bci tego samego typu. Wynika to wcze\u015bniej wspomnianej statycznej kontroli typ\u00f3w. Je\u015bli zadeklaurujemy i nie przypiszemy \u017cadnych wartosci to zmiennych to te zmienne b\u0119d\u0105 mia\u0142y przypisan\u0105 warto\u015b\u0107 zerow\u0105 dla danego typu. 0 dla zmiennych typu int, float64 itd. false dla zmiennych typu bool pusty \u0142ancuch znak\u00f3w dla string.","title":"Deklarowanie zmiennych"},{"location":"Golang/go/#krotkie-deklarowanie-zmiennych","text":"Je\u015bli jednak zaraz po zadeklarowaniu zmiennej znana jest jej poczatkowa warto\u015b\u0107, cz\u0119\u015bciej stosuje si\u0119 kr\u00f3tkie deklaracje zmiennych . Zamiast jawnego deklarowania typu zmiennej oraz przypisywania do nich warto\u015bci za pomoc\u0105 = mo\u017cna przypisa\u0107 do niej warto\u015b\u0107 u\u017cywaj\u0105c operatora := . package main import ( \"fmt\" ) func main () { quantity := 10 length , width := 10.5 , 5.2 customerName := \"Damon Cole\" fmt . Println ( \"Quantity is\" , quantity ) fmt . Println ( \"Size is\" , length , \"by\" , width ) fmt . Println ( \"Customer is\" , customerName ) } Cz\u0119ste b\u0142\u0119dy: quantity := 10 quantity := 5 Operator := s\u0142u\u017cy jednocze\u015bnie do deklaracji i inicjalizacji nowych zmiennych. Operator := ten nie s\u0142u\u017cy do modyfikacji ju\u017c istniej\u0105cych zmiennych. quantity = 10 Je\u015bli zapomnimy : powyzsza instrukcja zostanie uznana za przypisanie a nie za deklaracje. Nie wolno przypisywac wartosci do niezadeklarowanych zmiennych. quantity := 10 quantity = \"a\" Do danej zmiennej mo\u017cna przypisywac tylko warto\u015bci tego samego typu. Nale\u017cy uzywa\u0107 wszytkie zadeklarowane zmienne, kt\u00f3re nie s\u0105 u\u017cywane. Je\u015bli usuniesz kod ktory uzywa zmiennej nale\u017cy tak\u017ce wyeliminowac deklaracj\u0119.","title":"Kr\u00f3tkie deklarowanie zmiennych"},{"location":"Golang/go/#reguy-tworzenia-nazw","text":"Poni\u017cej przedstawiono jak powinno tworzy\u0107 nazwy zmiennych, funkcji i typ\u00f3w w j\u0119zyku Go: nazwy powinny si\u0119 zaczyna\u0107 si\u0119 od litery Je\u015bli zmienna rozpoczyna si\u0119 wielka liter\u0105 to dany element jest eksportowany i mo\u017cna go wykorzystywac w innych pakietach ni\u017c bie\u017cacy. Dla przyk\u0142adu fmt.Println stosowane jest wielkie P , dzi\u0119ki czemu funkcji mo\u017cna u\u017cywa\u0107 w main i dowolnym innym pakiecie. Je\u015bli nazwa zmiennej zaczyna sie ma\u0142\u0105 liter\u0105 to oznacza \u017ce mozna z niego korzystac tylko w tym bie\u017c\u0105cym pakiecie. Poprawne: length stack2 sales . Total Niepoprawne 2 stack \u2190 Nazwa ** nie mo\u017ce ** zaczyna\u0107 si\u0119 od cyfry sales . Total \u2190 ** nie mo\u017cna ** uzy\u0107 elementow z innych pakietow je\u015bli nazwa zaczyna si\u0119 od ma\u0142ej litery Powyzsze dwie cechy sa wymuszane przez j\u0119zyk. Poni\u017cej przedstawiono jeszcze kilka dodatkowych konwencji: Je\u015bli nazwa sk\u0142ada si\u0119 z wielu s\u0142\u00f3w, to s\u0142owo po pierwszym powinno zaczyna\u0107 si\u0119 wielk\u0105 liter\u0105. S\u0142owa powinno si\u0119 \u0142\u0105czy\u0107 bez stosowania spacji. Wykorzystujemy notacj\u0119 wielb\u0142\u0105dzi\u0105 (camel notation) Pierwsa litera powinna by\u0107 wileka tylko wtedy gdy chcemy eksportowa\u0107 dany element poza pakiet. dla oczywistych przyklad\u00f3w skraca si\u0119 nazw\u0119 na przyk\u0142ad: max zamiast maximum , i zamiast indeks . Poprawne: sheetLength TotalUnits i Niezgodne z konwencjami: sheetlength \u2190 kolejne s\u0142owa powinny zaczyna\u0107 sie wielka liter\u0105 Total_Units \u2190 nazwy powinny byc bezposrednio po\u0142\u0105czone index \u2190 zast\u0105pic to skr\u00f3tem Operacje matematyczne i por\u00f3wnania w j\u0119zyku Go wymagaj\u0105 u\u017cywania warto\u015bci tego samego typu. U\u017cycie warto\u015bci ro\u017cnych typ\u00f3w spowoduje b\u0142\u0105d przy probie uruchomienia kodu. var length float64 = 1.2 var width int = 2 fmt . Println ( \"Powierczhnia wynosi\" , length * width ) fmt . Println ( \"length > width\" , length > width ) ./ShortDeclaration.go:17:37: invalid operation: length * width (mismatched types float64 and int) ./ShortDeclaration.go:18:41: invalid operation: length > width (mismatched types float64 and int) Nowe wartosci ktore przypisujemy do zmiennych te\u017c musz\u0105 mie\u0107 ten sam typ. var length float64 = 1.2 var width int = 2 length = width fmt . Println ( length ) command-line-arguments ./ShortDeclaration.go:17:11: cannot use width (variable of type int) as float64 value in assignment Rozwi\u0105zaniem powyzszych problem\u00f3w jest zastosowanie konwersji , pozwalajacych na przekszta\u0142cenie warto\u015bci jednego typu na inny typ. Wystarczy poda\u0107 typ na kt\u00f3ry chcesz zmieni\u0107. var myInt int = 2 float64 ( myInt ) float64 \u2190 typ na kt\u00f3ry przeprowadzana jest konwersja, (myInt) \u2190 przekszta\u0142cana warto\u015b\u0107. Dokonanie konwersji: var length float64 = 1.2 var width int = 2 fmt . Println ( \"Powierczhnia wynosi\" , length * width ) fmt . Println ( \"length > width\" , length > width ) Wyniku czego otrzymamy: Powierczhnia wynosi 2.4 length > width? false Tak samo b\u0119dzie tutaj: var length float64 = 1.2 var width int = 2 length = float64 ( width ) fmt . Println ( length ) Warto pamieta\u0107,\u017ce gdy zmieniamy warto\u015b\u0107 z typu float64 na typ int cz\u0119\u015b\u0107 u\u0142amkowa bedzie pomijana. var length float64 = 3.75 var width int = 5 width = int ( length ) fmt . Println ( width ) Otrzymamy: 3","title":"Regu\u0142y tworzenia nazw"},{"location":"Golang/go/#narzedzia-jezyka-go","text":"go build \u2190 kompiluje pliki z kodem do postaci plik\u00f3w binarnych go run \u2190 kompiluje i uruchamia program bez zapisywania pliku wykonywalnego. Zaleca si\u0119 korzystaniez niego dla ma\u0142ych programami . Gdy wprowadzisz zmiany w kodzie, nie b\u0119dziesz musia\u0142 wykonywa\u0107 odr\u0119bnego kroku kompilacji. go fmt \u2190 formatuje pliki \u017ar\u00f3d\u0142owe zgodnie ze standordowym formatowania j\u0119zyka Go go version \u2190 wy\u015bwietla zainstalowan\u0105 wersj\u0119 j\u0119zyka Go Rozbudowane programy uruchamia sie po przez kolejne uzycie komend: 1) go fmt hello.go 2) go build hello.go 3) ./hello","title":"Narz\u0119dzia jezyka Go"},{"location":"Golang/go/#wywoywanie-metod","text":"W Go mo\u017cna definiowa\u0107 metody . S\u0105 to funkcje powi\u0105zane z warto\u015bciami okre\u015blonego typu. package main import ( \"fmt\" \"time\" ) func main () { var now time . Time = time . Now () var year int = now . Year () fmt . Println ( \"Year is\" , year ) } Pakiet time zawiera typ Time , kt\u00f3ry reprezentuje date(rok, miesi\u0105c, dzie\u0144). Ka\u017cda warto\u015b\u0107 typu time.Time udost\u0119pnia metod\u0119 Year , ktora zwraca rok. W kodzie ponizej metoda s\u0142u\u017cy do wy\u015bwietlenia bie\u017c\u0105cego roku. package main import ( \"fmt\" \"time\" ) func main () { var now time . Time = time . Now () var year int = now . Year () fmt . Println ( \"Year is\" , year ) } Funkacja time.Now zwraca now\u0105 warto\u015b\u0107 typu time.Time z bie\u017c\u0105c\u0105 dat\u0105 i czasem. Warto\u015b\u0107 ta przypisywana jest do zmiennej now . Nast\u0119pnie wywo\u0142ywana jest metoda Year dla warto\u015bci wskazanej przez now now.Year() \u2190 now \u2190 Przechowuje warto\u015b\u0107 typu time.Time, Year() \u2190 Wywo\u0142uje metod\u0119 Year dla warto\u015bci typu time.Time Metoda Year zwraca liczb\u0119 ca\u0142kowit\u0105 reprezentuj\u0105ca rok, kt\u00f3ry nast\u0119pnie jest wy\u015bwietlany. Nastepny przyklad: package main import ( \"fmt\" \"strings\" ) func main () { broken := \"G# t# super j\u0119zyk\" replacer := strings . NewReplacer ( \"#\" , \"o\" ) var fixed string = replacer . Replace ( broken ) fmt . Println ( fixed ) } Funkcja strings.NewReplacer przyjmuje argumenty w postaci zast\u0119powanego pod\u0142a\u0144cucha (\"#\") i podstawionego tekstu (\"o\"), a zwraca warto\u015b\u0107 typu string.Replacer . Gdy przeka\u017cesz \u0142ancuch znak\u00f3w do metody Replace warto\u015bci typu Replacer , metoda zwroci zmodyfikowany \u0142ancuch znak\u00f3w. Kropka oznacza \u017ce element podany po prawej stronie nale\u017cy do jednostki podanej po lewej. !!! Funkcje nale\u017c\u0105 do pakietu, a metody do warto\u015bci. !!!","title":"Wywo\u0142ywanie metod"},{"location":"Golang/go/#obliczenie-oceny","text":"Stworzenie prostego programu w j\u0119zyku go , kt\u00f3ry po wprowadzeniu danych w procentach analizuje czy uczen zda\u0142. Wynik poni\u017cej 60% oznacza nie zdanie egzaminu.","title":"Obliczenie oceny"},{"location":"Golang/go/#komentarze","text":"W jezyku go komentarze oznacza si\u0119 za pomoc\u0105 dw\u00f3ch uko\u015bnik\u00f3w // . Tak jak to jest w innch jezykach mo\u017c;liwe sa tak\u017ce komentarze blokowe oznaczane jako /* Tre\u015b\u0107 komentarza */","title":"Komentarze"},{"location":"Golang/go/#pobieranie-wyniku-od-uzytkownika","text":"package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input := reader . ReadString ( '\\n' ) fmt . Println ( input ) } W linijce reader := bufio.NewReader(os.Stdin) Wykorzystano funkcj\u0119 NewReader , kt\u00f3ra pozwala na pobranie tekstu z klawiatury zawarte w strumieniu os.Stdin . Nast\u0119pnie wywo\u0142ywana jest metoda ReadString , kt\u00f3ra zwraca dane wpisane przez u\u017cytkownika do runy nowego wiersza czyli do klikni\u0119cia przycisku \"Enter\" . Po uruchomieniu ukarze si\u0119 komunikat: $ go run pass_fail.go /# command-line-arguments ./pass_fail.go:12:11: assignment mismatch: 1 variable but reader.ReadString returns 2 values Powy\u017cszy komunikat m\u00f3wi \u017ce pr\u00f3bujemy zwroci\u0107 dwie warto\u015bci, a podana jest tylko jedna zmienna. Jezyk Go umo\u017cliwia zwracanie dowolnej liczby warto\u015bci przez funkcje i metody, najcz\u0119sciej dodatkowe zmienne informuj\u0105 o b\u0142\u0119dach.","title":"Pobieranie wyniku od u\u017cytkownika"},{"location":"Golang/go/#funkcje-i-metody-zwracajace-wiele-wartosci","text":"package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) fmt . Println ( input ) } Dodanie do powy\u017cszego kody zmiennej err nie pozwoli na skompiluje, gdy\u017c j\u0119zyk go nie pozwala na skompilowanie kodu, gdzie znajduje si\u0119 zmienna, kt\u00f3rej nie u\u017cywamy.","title":"Funkcje i metody zwracaj\u0105ce wiele warto\u015bci"},{"location":"Golang/go/#zignorowanie-wartosci-bedu-za-pomoca-pustego-identyfikatora","text":"Gdy nie chcemy u\u017cywa\u0107 zmniennej zwracanej przez funkcj\u0119 lub metod\u0119 mo\u017cemy uzy\u0107 pustego identyfikatora czyli (_) . package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , _ := reader . ReadString ( '\\n' ) fmt . Println ( input ) }","title":"Zignorowanie wartosci b\u0142\u0119du za pomoc\u0105 pustego identyfikatora"},{"location":"Golang/go/#obsuga-bedu","text":"Ignorowanie b\u0142\u0119du nie jest dobrym pomys\u0142em, gdy\u017c je\u015bli by ten b\u0142\u0105d si\u0119 pojawi\u0142 to nie zostalibysmy o tym poinformowani. Najlepiej abysmy zostali poinformowani o b\u0142\u0119dzie i zatrzymali program. Do tego s\u0142u\u017cy pakiet log , kt\u00f3ry zawiera funkcj\u0119 Fatal . Pozwala ona na wwy\u015bwietlenie komunikatu w terminalu oraz zatrzymanie (\"zabicia\") programu. package main import ( \"bufio\" \"fmt\" \"log\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) log . Fatal ( err ) fmt . Println ( input ) } $ go run pass_fail.go Podaj wynik egzaminu: 50 2024/10/25 20:40:29 exit status 1 Funkcje takie jak ReedString zwracaj\u0105 warto\u015b\u0107 b\u0142\u0119du nil , gdy b\u0142\u0105d nie nast\u0105pi\u0142 . Chcemy aby program ko\u0144czy\u0142 je\u015bli zmienna err ma warto\u015b\u0107 inn\u0105 od nil . Do tego s\u0142u\u017c\u0105 funkcje warunkowe, kt\u00f3re powoduj\u0105 wykonanie bloku kodu tylko wtedy, gdy spe\u0142niony jest dany warunek.","title":"Obs\u0142uga b\u0142\u0119du"},{"location":"Golang/go/#instrukcje-warunkowe","text":"Instrukcje warunkowe wykonuja instrukcje gdy spelniony zostanie warunek. Innymi s\u0142owy gdy warunek zwr\u00f3ci warto\u015b\u0107 wyniku true to zostanie wykonany kod w bloku warunkowym. Je\u017celi wynik to false to blok warunkowy jest pomijany. if 1 == 1 { // wynik true fmt . Println ( \"Zostan\u0119 wy\u015bwietlony\" ) } if 1 >= 2 { //wynik false fmt . Println ( \"A ja nie zostan\u0119 wy\u015bwitlony\" ) }","title":"Instrukcje warunkowe"},{"location":"Golang/go/#warunkowe-rejestrowanie-bedu-krytycznego","text":"Powracaj\u0105c do naszego b\u0142\u0119du, gdzie program ko\u0144czy\u0142 prace i zg\u0142asza\u0142 b\u0142\u0105d. $ go run pass_fail.go Podaj wynik egzaminu: 50 2024/10/25 20:40:29 exit status 1 Wykorzystuj\u0105c instrukcje warunkowe do rozwi\u0105zania naszego problemu musimy przerwac program gdy warto\u015b\u0107 zmiennej err jest inna ni\u017c nil . Nasza instrukcja warunkowa wyglada nast\u0119puj\u0105co: if err != nil { log . Fatal ( err ) } package main import ( \"bufio\" \"fmt\" \"log\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) if err != nil { log . Fatal ( err ) } fmt . Println ( input ) } Warto zaznaczy\u0107 \u017ce powy\u017cszy program wy\u015bwietla liczb\u0119 wpisan\u0105 przez u\u017cytkownika.","title":"Warunkowe rejestrowanie b\u0142\u0119du krytycznego"},{"location":"Golang/go/#zakrywanie-nazw","text":"Dobr\u0105 praktyk\u0105 jest unikanie skrut\u00f3w. Jednak\u017ce zmienna error jest z\u0142ym pomys\u0142em, gdy\u017c zakryje zmienn\u0105 typu error . Podczas deklaracji zmiennej pamietaj, \u017ce nazwa zmiennej powinna by\u0107 r\u00f3\u017cna od istniej\u0105cych zmiennych. Je\u015bli nie to w konsekwencji nowa zmienna zakryje poprzedni\u0105 funkcjonalno\u015b\u0107. package main import ( \"fmt\" ) func main () { var int int = 12 var append string = \"minut dadatkowych materia\u0142\u00f3w\" var fmt string = \"DVD\" var count int var languages = append ([] string {}, \"Espanol\" ) fmt . Println ( int , append , fmt , languages ) } Powy\u017cszy kod nie skompiluje si\u0119 ze wzgl\u0119du na to zakrylisci nazw\u0105 zmiennej typ zmiennej int , funkcj\u0119 append , nazw\u0119 pakietu . Aby ten problem rozwi\u0105za\u0107, wystarczy zmieni\u0107 nazwy zmiennych: package main import ( \"fmt\" ) func main () { var count int = 12 var suffix string = \"minut dadatkowych materia\u0142\u00f3w\" var format string = \"DVD\" var languages = append ([] string {}, \"Espanol\" , \"Francais\" ) fmt . Println ( count , suffix , format , languages ) }","title":"Zakrywanie nazw"},{"location":"Golang/go/#przeksztacanie-ancuchow-znakow-na-liczby","text":"Powracaj\u0105c do naszego programu pass_fail.go Instrukcje warunkowe umo\u017cliwiaj\u0105 sprawdzanie podanego wyniku. Dodatkowo istnieje instrukcja if/else kt\u00f3ra okre\u015bla zaliczenie albo jego brak. package main import ( \"bufio\" \"fmt\" \"log\" \"os\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) if err != nil { log . Fatal ( err ) } if input >= 60 { status := \"zaliczenie\" } else { status := \"brak zaliczenia\" } fmt . Println ( \"Status:\" , status ) } *$ go run pass_fail.go","title":"Przekszta\u0142canie \u0142ancuch\u00f3w znak\u00f3w na liczby"},{"location":"Golang/go/#command-line-arguments","text":"./pass_fail.go:18:14: invalid operation: input >= 60 (mismatched types string and untyped int)* Przyczyna b\u0142\u0119du jest wczytanie danej z klawiatury jako \u0142a\u0144cucha znak\u00f3w. Jezyk Go potrafi por\u00f3wnywa\u0107 liczby tylko z innymi liczbami (dane kt\u00f3re porownujemy w warunku musz\u0105 by\u0107 tego samego typu), nie por\u00f3wnuje liczby z \u0142ancuchem znak\u00f3w lub odwrotnie. Nie mo\u017cna przekonwertowa\u0107 bezposrednio z typu string na liczby . float64 ( \"2.6\" ) Wy\u015bwietli si\u0119 wtedy taki komunikat: cannot convert \"2.6\" (type string) to type float64 Nalezy zwr\u00f3ci\u0107 uwag\u0119 na: dane wprowadzone z klawiatury posiadaj\u0105 znak nowego wiersza (\\n) , kt\u00f3ry trzeba usun\u0105\u0107 reszt\u0119 \u0142a\u0144cucha znak\u00f3w trzeba przekszta\u0142ci\u0107 na liczb\u0119 zmienno przecinkow\u0105 Aby usun\u0105\u0107 znak nowego wiersza nale\u017cy u\u017cy\u0107 funkcji TrimSpace , kr\u00f3ra eliminuje wszystkie bia\u0142e znaki(znak nowego wiersza, tabulacji, spacje) zar\u00f3wno z pocz\u0105tku jak i ko\u0144ca \u0142a\u0144cucha znak\u00f3w. s := \"\\t wczesniej by\u0142 tabulator i nowy wiersze \\n\" fmt . Println ( s ) fmt . Println ( strings . TrimSpace ( s )) $ go run pass_fail . go wczesniej by\u0142 tabulator i nowy wiersze wczesniej by\u0142 tabulator i nowy wiersze input = strings.TrimSpace(input) Wyniku czego pozostanie tylko wprowadzona liczba. Teraz wykorzystujemy funkcj\u0119 ParseFloat z pakietu strconv do przekszta\u0142cenia liczby na wartos\u0107 typu float64. grade , err := strconv . ParseFloat ( input , 64 ) Poowyzsza funkcja zwraca: - warto\u015b\u0107 typu float64 grade - ewentualny b\u0142\u0105d err <- gdy nie da sie przekszta\u0142ci\u0107 - \u0142a\u0144cuch znak\u00f3w input - precyzja w bitach 64 Po modyfikacjach kod wyglada nast\u0119puj\u0105co: package main import ( \"bufio\" \"fmt\" \"log\" \"os\" \"strconv\" \"strings\" ) func main () { fmt . Print ( \"Podaj wynik egzaminu: \" ) reader := bufio . NewReader ( os . Stdin ) input , err := reader . ReadString ( '\\n' ) if err != nil { log . Fatal ( err ) } input = strings . TrimSpace ( input ) grade , err := strconv . ParseFloat ( input , 64 ) if err != nil { log . Fatal ( err ) } if grade >= 60 { status := \"zaliczenie\" } else { status := \"brak zaliczenia\" } fmt . Println ( \"Status:\" , status ) } Niestety pojawia si\u0119 nast\u0119pny b\u0142\u0105d: if grade >= 60 { status := \"zaliczenie\" } else { status := \"brak zaliczenia\" } fmt . Println ( \"Status:\" , status ) $ go run pass_fail . go # command - line - arguments . / pass_fail . go : 28 : 3 : declared and not used : status . / pass_fail . go : 30 : 3 : declared and not used : status . / pass_fail . go : 32 : 25 : undefined : status Jka wida\u0107 2 pierwsze b\u0142\u0119dy dotycz\u0105 \u017ce zmienna zosta\u0142a zadeklarowana a nie zosta\u0142a u\u017cyta, a trzeci dotyczy \u017ce zmienna nie zosta\u0142a zdefiniowana.","title":"command-line-arguments"},{"location":"Golang/go/#bloki-i-ich-zasieg","text":"B\u0142\u0105d narodzi\u0142 si\u0119 ze wzgl\u0119du na podzielenie kodu na bloki . Bloki mog\u0105 by\u0107 zagnie\u017cdzone jeden w drugim. Ka\u017cda deklarowana zmienna ma zasi\u0119g, czyli zakres kodu w jakim jest widoczna. Pr\u00f3ba u\u017cycia ko\u0144czy si\u0119 b\u0142\u0119dem.","title":"Bloki i ich zasi\u0119g"},{"location":"hiszpanski/hiszpanski/","text":"Hiszpa\u0144ski Rodzaj m\u0119ski, \u017ce\u0144ski el i la Jezyk polski nie posiada odpowiednik\u00f3w rodzajnik\u00f3w. Rodzajniki dzielimy na okre\u015blonew liczbie pojedy\u0144czej el i la a w liczbie mnogiej los las . Nieokre\u015blone w liczbie pojedy\u0144czej un , una oraz w liczbie mnogiej unos , unas . Rodzaj m\u0119ski W rodzaju meskiem u\u017cywa sie rodzajnika el . Rzeczowniki rodzaju meskiego ko\u0144cz\u0105 si\u0119 na litery o . el libro - ksia\u017cka el curso - kurs el gato - kot el perro \u2013 pies el caf\u00e9 \u2013 kawa el coche - auto el estante - p\u00f3\u0142ka Dodatkowo rodzaje w hiszpanskim s\u0105 inne ni\u017c mamy to w jezyku polskim. Poni\u017cej przedstawiono cze\u015bciowe wyjatki: el libro - ksia\u017cka el mapa - mapa el pijama - pi\u017cama el planeta - planeta el problema - problem el d\u00eda - dzie\u0144 el sofa - sofa Czyta\u0142em ksi\u0105\u017ck\u0119 z mapami b\u0119d\u0105c w pi\u017camie w planety le\u017c\u0105c na sofie w problematyczny dzie\u0144 . Rodzaj \u017ce\u0144ski W rodzaju \u017ce\u0144skim wykorzystuj\u0119 si\u0119 rodzajnik la . S\u0142owa ko\u0144cz\u0105 si\u0119 na liter\u0119 a . la casa \u2013 dom la mesa \u2013 st\u00f3\u0142 la mujer \u2013 kobieta Ale tak jak w przypadku rzeczownik\u00f3w rodzaju m\u0119skiego wyst\u0119puj\u0105 wyj\u0105tki: la leche - mleko la ciudad - miasto la radio (od radiograf\u00eda) la universidad - uniwersytet la llave - klucz la ventana - okno la habitaci\u00f3n - pok\u00f3j S\u0142uchaj\u0105c radia otworzy\u0142em zamkni\u0119te na klucz mleczne okno w moim pokoju w miasteczku uniwersyteckim . S\u0105 rzeczowniki posiadajace dwa rodzaje. W zale\u017cno\u015bci czy chodzi nam o rodzaj m\u0119ski zazwyczaj na ko\u0144cu umieszczamy o , a jak \u017ce\u0144ski to zazwyczaj umieszczamy a . el chico \u2192 la chica -- ch\u0142opiec/dziewczyna el peluquero \u2192 la peluquera -- fryzjer/fryzjerka el cocinero \u2192 la cocinera -- kucharz/kucharka el profesor \u2192 la profesora -- nauczyciel/nauczycielka el director \u2192 la directora -- dyrektor/dyrektorka Wyst\u0119puj\u0105 wyj\u0105tki i aby rozroni\u0107 rodzaj m\u0119ski od \u017censkiego u\u017cywa si\u0119 tylko rodzajnik\u00f3w. el model o \u2192 la model o -- model/modelka el pilot o \u2192 la pilot o -- pilot/pilotka el joven \u2192 la joven -- m\u0142ody ch\u0142opak/m\u0142oda dziewczyna Tak samo jest w przypadku rzeczownik\u00f3w zako\u0144czonych na -ante -ente i -ista . el estudiante \u2192 la estudiante -- ucze\u0144/uczennica el cantante \u2192 la cantante -- piosenkarz/piosenkarka el paciente \u2192 la paciente -- pacjent/pacjentka el periodista \u2192 la periodista -- dziennikarz/dziennikarka el turista \u2192 la turista -- turysta/turystka M\u0142ody ch\u0142opak trzyma\u0142 model pilota . Pacjentem by\u0142 ucze\u0144 dziennkarstwa znanego piosenkarza b\u0119d\u0105cego turyst\u0105 . W j\u0119zyku hiszpa\u0144skim wyst\u0119puj\u0105 rzeczowniki tylko danego rodzaju. Rodzaj m\u0119ski el hombre - m\u0119\u017cczyzna el marido - m\u0105\u017c el padre - ojciec el actor - aktor el rey - kr\u00f3l Rodzaj \u017ce\u0144ski la mujer - kobieta la mujer - \u017cona la madre - matka la actriz - aktorka la reina - kr\u00f3lowa Sa rzeczowniki zawod\u00f3w, kt\u00f3rych oba rodzaje s\u0105 poprawne. el jefe \u2192 la jefa/jefe - szef/szefowa el dependiente \u2192 la dependienta/dependiente - ekspedient/ekspedientka Liczba mnoga W liczbie pojedynczej wystepuj\u0105 rodzajniki okre\u015blone el i la . W liczbie mnogiej dla rzeczownik\u00f3w wykorzystuje si\u0119 rodzajniki okre\u015blone m\u0119ski: los , \u017ce\u0144ski: las . Standardzik Aby tuworzy\u0107 liczb\u0119 mnog\u0105 nale\u017cy doda\u0107 literk\u0119 s na ko\u0144cu danego wyrazu, kt\u00f3ry ko\u0144czy si\u0119 na samog\u0142o\u015bki zar\u00f3wno akcentowane jak i nie, takie jak: -a , -e , -i , -o , -u . Robimy to niezale\u017cnie od tego jaki to rodzaj. el perro \u2192 los perros -- pies/psy la amiga \u2192 las amigas -- przyjaci\u00f3\u0142ka/przyjaci\u00f3\u0142ki el caf\u00e9 \u2192 los caf\u00e9s -- kawa/kawy el men\u00fa \u2192 los men\u00fas. Koniec na sp\u00f3\u0142g\u0142osk\u0119 lub na samog\u0142oski -i albo -y . Gdy wyraz ko\u0144czy sie na sp\u00f3\u0142g\u0142osk\u0119 lub na samog\u0142osk\u0119 -i albo -y , na kones umieszczamy es . el \u00e1rbol \u2192 los \u00e1rboles -- drzewo/drzewa la mujer \u2192 las mujeres -- kobieta/kobiety la canci\u00f3n \u2192 las canciones -- piosenka/piosenki el rey \u2192 los reyes -- kr\u00f3l/ krolowie el jabali \u2192 los jabal\u00edes -- dzik/dziki Ko\u0144c\u00f3wka na -z Gdy wyraz w liczbie pojedynczej ko\u0144czy si\u0119 na -z to w liczbie mnogiej nast\u0119puje zmiana na liter\u0119 c a potem dodajemy -es . el pez \u2192 los peces -- ryba/ryby la actriz \u2192 las actrices -- aktorka/aktorki el juez - los jueces -- s\u0119dzia/s\u0119dziowie Wyrazy ko\u0144cz\u0105ce si\u0119 na -as , -es , -is , -os , -us . Je\u015bli wyrazy ko\u0144cz\u0105 sie na -as , -es , -is , -os , -us . zmieniamy tylko rodzajnik na pocz\u0105tku. el paraguas \u2192 los paraguas -- parasol/parasole el lunes \u2192 los lunes -- poniedzia\u0142ek/poniedzia\u0142ki Wyj\u0105tki - jedna liczba pojedy\u0144cza lub mnoga Wyst\u0119puj\u0105 rzeczowniki kt\u00f3re maj\u0105 tylko liczb\u0119 pojedy\u0144cz\u0105 albo liczb\u0119 mnog\u0105. Tylko liczba pojedy\u0144cza : la ropa (ubrania) el dinero (pieni\u0105dze) la gente (ludzie) Tylko liczba mnoga : las tijeras (no\u017cyczki) las gafas (okulary) los vaqueros (d\u017cinsy) Cz\u0119sty b\u0142\u0105d: ~~Uno momento~~ Chod\u017a jest to rym to tak na prawd\u0119 jest b\u0142\u0105d. Rodzajnikami nieokre\u015blonymi s\u0105 un , una , unos , unas . Okre\u015blone determinados Nieokre\u015blone indeterminados el , la un , una los , las unos , unas \u00bfKiedy u\u017cywa\u0107 rodzajnika niekre\u015blonego, a kiedy okre\u015blonego? Rodzajnikow nieokre\u015blonych un , una , unos , unas . wykorzystujemy gdy wspominamy ja w swojej wypowiedzi poraz pierwszy. Rodzajniki okre\u015blone uzywamy do: - rzeczownik\u00f3w kt\u00f3re ju\u017c znamy m\u00f3wimo nich ju\u017c conajmnie drugi raz(wiemy doskonale, o czym m\u00f3wimy), - gdy m\u00f3wimy o czym\u015b bardzo og\u00f3lnie naprzyk\u0142ad: Me gustan los dulces. - Mowimy o s\u0142odyczach bardzo og\u00f3lnie. Zaimki wskazuj\u0105ce Postrzeganie przestrzenii W j\u0119zyku poslim wyst\u0119puj\u0105 dwa tu i tam . AQUI \u2192 tutaj AH\u00cd \u2192 tam, troch\u0119 dalej, ale w miar\u0119 blisko ALL\u00cd \u2192 tam, daleko Wskazywanie znajdywania si\u0119 przedmiot\u00f3w Wyr\u00f3zniamy trzy r\u00f3zne rodzaje do okre\u015blenia po\u0142o\u017cenia danej rzeczy. Rodzaj Poziom 1 Poziom 1 Poziom 2 Poziom 2 Poziom 3 Poziom 3 m\u0119ski este estos ese esos aquel aquellos \u017ce\u0144ski esta estas esa esas aquella aquellas Nale\u017cy zwr\u00f3ci\u0107 uwag\u0119, \u017ce liczba mnoga polega na zast\u0105pieniu litery e na o . Przyk\u0142ady: No conozco a este chico. Przedimek a przez wyrazem este u\u017cywa si\u0119 przed osob\u0105 (lub czego\u015b spersonfikowanego) i osoba nie jest obiektem czynno\u015bci. No conozco a este chico. \u2192 Nie znam tego ch\u0142opaka No conozco a esta chica. \u2192 Nie znam tej dziewczyny. No conozco a estos chicos. \u2192 Nie znam tych ch\u0142opak\u00f3w. No conozco a estas chicas. \u2192 Nie znam tych dziewczyn. \u00bfConoces a ese chico? \u2192 Znasz tego ch\u0142opaka? \u00bfConoces a esa chica? \u2192 Znasz t\u0105 dziewczyn\u0119? \u00bfConoces a esos chicos? \u2192 Znasz tych ch\u0142opak\u00f3w? \u00bfConoces a esas chicas? \u2192 Znasz te dziewczyny? \u00bfQui\u00e9n es aquel chico? \u2192 Kim jest tamten ch\u0142opak? \u00bfQui\u00e9n es aquella chica? \u2192 Kim jest tamta dziewczyna? \u00bfQui\u00e9n son aquellos chico? \u2192 Kim s\u0105 tamci ch\u0142opacy? \u00bfQui\u00e9n son aquellas chico? \u2192 Kim s\u0105 tamte dziewczyny?","title":"Hiszpa\u0144ski"},{"location":"hiszpanski/hiszpanski/#hiszpanski","text":"","title":"Hiszpa\u0144ski"},{"location":"hiszpanski/hiszpanski/#rodzaj-meski-zenski-el-i-la","text":"Jezyk polski nie posiada odpowiednik\u00f3w rodzajnik\u00f3w. Rodzajniki dzielimy na okre\u015blonew liczbie pojedy\u0144czej el i la a w liczbie mnogiej los las . Nieokre\u015blone w liczbie pojedy\u0144czej un , una oraz w liczbie mnogiej unos , unas .","title":"Rodzaj m\u0119ski, \u017ce\u0144ski el i la"},{"location":"hiszpanski/hiszpanski/#rodzaj-meski","text":"W rodzaju meskiem u\u017cywa sie rodzajnika el . Rzeczowniki rodzaju meskiego ko\u0144cz\u0105 si\u0119 na litery o . el libro - ksia\u017cka el curso - kurs el gato - kot el perro \u2013 pies el caf\u00e9 \u2013 kawa el coche - auto el estante - p\u00f3\u0142ka Dodatkowo rodzaje w hiszpanskim s\u0105 inne ni\u017c mamy to w jezyku polskim. Poni\u017cej przedstawiono cze\u015bciowe wyjatki: el libro - ksia\u017cka el mapa - mapa el pijama - pi\u017cama el planeta - planeta el problema - problem el d\u00eda - dzie\u0144 el sofa - sofa Czyta\u0142em ksi\u0105\u017ck\u0119 z mapami b\u0119d\u0105c w pi\u017camie w planety le\u017c\u0105c na sofie w problematyczny dzie\u0144 .","title":"Rodzaj m\u0119ski"},{"location":"hiszpanski/hiszpanski/#rodzaj-zenski","text":"W rodzaju \u017ce\u0144skim wykorzystuj\u0119 si\u0119 rodzajnik la . S\u0142owa ko\u0144cz\u0105 si\u0119 na liter\u0119 a . la casa \u2013 dom la mesa \u2013 st\u00f3\u0142 la mujer \u2013 kobieta Ale tak jak w przypadku rzeczownik\u00f3w rodzaju m\u0119skiego wyst\u0119puj\u0105 wyj\u0105tki: la leche - mleko la ciudad - miasto la radio (od radiograf\u00eda) la universidad - uniwersytet la llave - klucz la ventana - okno la habitaci\u00f3n - pok\u00f3j S\u0142uchaj\u0105c radia otworzy\u0142em zamkni\u0119te na klucz mleczne okno w moim pokoju w miasteczku uniwersyteckim . S\u0105 rzeczowniki posiadajace dwa rodzaje. W zale\u017cno\u015bci czy chodzi nam o rodzaj m\u0119ski zazwyczaj na ko\u0144cu umieszczamy o , a jak \u017ce\u0144ski to zazwyczaj umieszczamy a . el chico \u2192 la chica -- ch\u0142opiec/dziewczyna el peluquero \u2192 la peluquera -- fryzjer/fryzjerka el cocinero \u2192 la cocinera -- kucharz/kucharka el profesor \u2192 la profesora -- nauczyciel/nauczycielka el director \u2192 la directora -- dyrektor/dyrektorka Wyst\u0119puj\u0105 wyj\u0105tki i aby rozroni\u0107 rodzaj m\u0119ski od \u017censkiego u\u017cywa si\u0119 tylko rodzajnik\u00f3w. el model o \u2192 la model o -- model/modelka el pilot o \u2192 la pilot o -- pilot/pilotka el joven \u2192 la joven -- m\u0142ody ch\u0142opak/m\u0142oda dziewczyna Tak samo jest w przypadku rzeczownik\u00f3w zako\u0144czonych na -ante -ente i -ista . el estudiante \u2192 la estudiante -- ucze\u0144/uczennica el cantante \u2192 la cantante -- piosenkarz/piosenkarka el paciente \u2192 la paciente -- pacjent/pacjentka el periodista \u2192 la periodista -- dziennikarz/dziennikarka el turista \u2192 la turista -- turysta/turystka M\u0142ody ch\u0142opak trzyma\u0142 model pilota . Pacjentem by\u0142 ucze\u0144 dziennkarstwa znanego piosenkarza b\u0119d\u0105cego turyst\u0105 . W j\u0119zyku hiszpa\u0144skim wyst\u0119puj\u0105 rzeczowniki tylko danego rodzaju. Rodzaj m\u0119ski el hombre - m\u0119\u017cczyzna el marido - m\u0105\u017c el padre - ojciec el actor - aktor el rey - kr\u00f3l Rodzaj \u017ce\u0144ski la mujer - kobieta la mujer - \u017cona la madre - matka la actriz - aktorka la reina - kr\u00f3lowa Sa rzeczowniki zawod\u00f3w, kt\u00f3rych oba rodzaje s\u0105 poprawne. el jefe \u2192 la jefa/jefe - szef/szefowa el dependiente \u2192 la dependienta/dependiente - ekspedient/ekspedientka","title":"Rodzaj \u017ce\u0144ski"},{"location":"hiszpanski/hiszpanski/#liczba-mnoga","text":"W liczbie pojedynczej wystepuj\u0105 rodzajniki okre\u015blone el i la . W liczbie mnogiej dla rzeczownik\u00f3w wykorzystuje si\u0119 rodzajniki okre\u015blone m\u0119ski: los , \u017ce\u0144ski: las .","title":"Liczba mnoga"},{"location":"hiszpanski/hiszpanski/#standardzik","text":"Aby tuworzy\u0107 liczb\u0119 mnog\u0105 nale\u017cy doda\u0107 literk\u0119 s na ko\u0144cu danego wyrazu, kt\u00f3ry ko\u0144czy si\u0119 na samog\u0142o\u015bki zar\u00f3wno akcentowane jak i nie, takie jak: -a , -e , -i , -o , -u . Robimy to niezale\u017cnie od tego jaki to rodzaj. el perro \u2192 los perros -- pies/psy la amiga \u2192 las amigas -- przyjaci\u00f3\u0142ka/przyjaci\u00f3\u0142ki el caf\u00e9 \u2192 los caf\u00e9s -- kawa/kawy el men\u00fa \u2192 los men\u00fas.","title":"Standardzik"},{"location":"hiszpanski/hiszpanski/#koniec-na-spogoske-lub-na-samogoski-i-albo-y","text":"Gdy wyraz ko\u0144czy sie na sp\u00f3\u0142g\u0142osk\u0119 lub na samog\u0142osk\u0119 -i albo -y , na kones umieszczamy es . el \u00e1rbol \u2192 los \u00e1rboles -- drzewo/drzewa la mujer \u2192 las mujeres -- kobieta/kobiety la canci\u00f3n \u2192 las canciones -- piosenka/piosenki el rey \u2192 los reyes -- kr\u00f3l/ krolowie el jabali \u2192 los jabal\u00edes -- dzik/dziki","title":"Koniec na sp\u00f3\u0142g\u0142osk\u0119 lub na samog\u0142oski -i albo -y."},{"location":"hiszpanski/hiszpanski/#koncowka-na-z","text":"Gdy wyraz w liczbie pojedynczej ko\u0144czy si\u0119 na -z to w liczbie mnogiej nast\u0119puje zmiana na liter\u0119 c a potem dodajemy -es . el pez \u2192 los peces -- ryba/ryby la actriz \u2192 las actrices -- aktorka/aktorki el juez - los jueces -- s\u0119dzia/s\u0119dziowie Wyrazy ko\u0144cz\u0105ce si\u0119 na -as , -es , -is , -os , -us . Je\u015bli wyrazy ko\u0144cz\u0105 sie na -as , -es , -is , -os , -us . zmieniamy tylko rodzajnik na pocz\u0105tku. el paraguas \u2192 los paraguas -- parasol/parasole el lunes \u2192 los lunes -- poniedzia\u0142ek/poniedzia\u0142ki","title":"Ko\u0144c\u00f3wka na -z"},{"location":"hiszpanski/hiszpanski/#wyjatki-jedna-liczba-pojedyncza-lub-mnoga","text":"Wyst\u0119puj\u0105 rzeczowniki kt\u00f3re maj\u0105 tylko liczb\u0119 pojedy\u0144cz\u0105 albo liczb\u0119 mnog\u0105. Tylko liczba pojedy\u0144cza : la ropa (ubrania) el dinero (pieni\u0105dze) la gente (ludzie) Tylko liczba mnoga : las tijeras (no\u017cyczki) las gafas (okulary) los vaqueros (d\u017cinsy) Cz\u0119sty b\u0142\u0105d: ~~Uno momento~~ Chod\u017a jest to rym to tak na prawd\u0119 jest b\u0142\u0105d. Rodzajnikami nieokre\u015blonymi s\u0105 un , una , unos , unas . Okre\u015blone determinados Nieokre\u015blone indeterminados el , la un , una los , las unos , unas \u00bfKiedy u\u017cywa\u0107 rodzajnika niekre\u015blonego, a kiedy okre\u015blonego? Rodzajnikow nieokre\u015blonych un , una , unos , unas . wykorzystujemy gdy wspominamy ja w swojej wypowiedzi poraz pierwszy. Rodzajniki okre\u015blone uzywamy do: - rzeczownik\u00f3w kt\u00f3re ju\u017c znamy m\u00f3wimo nich ju\u017c conajmnie drugi raz(wiemy doskonale, o czym m\u00f3wimy), - gdy m\u00f3wimy o czym\u015b bardzo og\u00f3lnie naprzyk\u0142ad: Me gustan los dulces. - Mowimy o s\u0142odyczach bardzo og\u00f3lnie.","title":"Wyj\u0105tki - jedna liczba pojedy\u0144cza lub mnoga"},{"location":"hiszpanski/hiszpanski/#zaimki-wskazujace","text":"","title":"Zaimki wskazuj\u0105ce"},{"location":"hiszpanski/hiszpanski/#postrzeganie-przestrzenii","text":"W j\u0119zyku poslim wyst\u0119puj\u0105 dwa tu i tam . AQUI \u2192 tutaj AH\u00cd \u2192 tam, troch\u0119 dalej, ale w miar\u0119 blisko ALL\u00cd \u2192 tam, daleko","title":"Postrzeganie przestrzenii"},{"location":"hiszpanski/hiszpanski/#wskazywanie-znajdywania-sie-przedmiotow","text":"Wyr\u00f3zniamy trzy r\u00f3zne rodzaje do okre\u015blenia po\u0142o\u017cenia danej rzeczy. Rodzaj Poziom 1 Poziom 1 Poziom 2 Poziom 2 Poziom 3 Poziom 3 m\u0119ski este estos ese esos aquel aquellos \u017ce\u0144ski esta estas esa esas aquella aquellas Nale\u017cy zwr\u00f3ci\u0107 uwag\u0119, \u017ce liczba mnoga polega na zast\u0105pieniu litery e na o . Przyk\u0142ady: No conozco a este chico. Przedimek a przez wyrazem este u\u017cywa si\u0119 przed osob\u0105 (lub czego\u015b spersonfikowanego) i osoba nie jest obiektem czynno\u015bci. No conozco a este chico. \u2192 Nie znam tego ch\u0142opaka No conozco a esta chica. \u2192 Nie znam tej dziewczyny. No conozco a estos chicos. \u2192 Nie znam tych ch\u0142opak\u00f3w. No conozco a estas chicas. \u2192 Nie znam tych dziewczyn. \u00bfConoces a ese chico? \u2192 Znasz tego ch\u0142opaka? \u00bfConoces a esa chica? \u2192 Znasz t\u0105 dziewczyn\u0119? \u00bfConoces a esos chicos? \u2192 Znasz tych ch\u0142opak\u00f3w? \u00bfConoces a esas chicas? \u2192 Znasz te dziewczyny? \u00bfQui\u00e9n es aquel chico? \u2192 Kim jest tamten ch\u0142opak? \u00bfQui\u00e9n es aquella chica? \u2192 Kim jest tamta dziewczyna? \u00bfQui\u00e9n son aquellos chico? \u2192 Kim s\u0105 tamci ch\u0142opacy? \u00bfQui\u00e9n son aquellas chico? \u2192 Kim s\u0105 tamte dziewczyny?","title":"Wskazywanie znajdywania si\u0119 przedmiot\u00f3w"},{"location":"hiszpanski/slownictwo/","text":"Hiszpanski s\u0142ownictwo 1. Pocz\u0105tek Wymowa liter s\u0142\u00f3w A a [a] B b [be] C c [ce] wymawiaj se Ch ch [che] wymawiaj cze D d [de] E e [e] F f [efe] G g [ge] wymawiaj he H h [hache] wymawiaj acze I i [i] J j [jota] wymawiaj chota K k [ka] L l [ele] LL ll [elle] wymawiaj eje M m [eme] N n [ene] \u00d1 \u00f1 e\u00f1e wymawiaj enie O o [o] P p [pe] Q q [cu] wymawiaj ku R r [erre] S s [ese] T t [te] U u [u] V v [uve] wymiawiaj u\u0142e W w [uve doble] wymawiaj \u0142e doble X x [equis] wymawiaj ekis Y y [i griega] wymawiaj i grjeka Z z [zeta] wymawiaj seta Przyk\u0142ady: A a jak w polskim: avi\u00f3n wymawiaj (awion) - samolot ardilla wymawiaj ardija wiewi\u00f3rka B b jak w polskim: barco wymiawiaj barko - statek besos wymawiaj besos - buziaki Barcelona wymawiaj Barselona C c : Liter\u0119 C w po\u0142\u0105czeniu z A / O / U wymawiamy jako polskie K C + A / O / U = KA/KO/KU: cama wymawiaj kama - \u0142\u00f3\u017cko coche wymawiaj kocze - samoch\u00f3d Liter\u0119 C w po\u0142\u0105czeniu z E lub I C + E / I = \u03b8wymawiaj fe lub se/si cebolla [feboja/seboja] - cebula cereza [feresa/seresa] - wi\u015bnia/czere\u015bnia ciudad [fiudad/siudad] - miasto cine [fine/sine] - kino Ch ch Liter\u0119 Ch wymawia si\u0119 jako cze chica [czika] - dziewczyna chocolate [czokolate] - czekolada coche [kocze] - samoch\u00f3d noche [nocze] - noc D E F jak w polskim Przyk\u0142ady dedo [dedo] - palec diente [djente] - z\u0105b dinero [dinero] - pieni\u0105dze espejo [espeho] - lustro elefante [elefante] - s\u0142o\u0144 falda [falda] - sp\u00f3dniczka fuego [f\u0142ego] - ogien G g Litere G w po\u0142\u0105czeniu z A / O / U wymawiamy jako G (tak jak w polskim) G + A/O/U gato [gato] - kot gafas [gafas] - okulary gota [gota] - kropla gorra [gorra] - czapka z daszkiem agua [ag\u0142a] - woda guapo [g\u0142apo] - przystojny G + E / I = H czytamy wtedy jako H: genial [henial] - genialny gimnasio [himnazio] - si\u0142ownia Je\u015bli pomi\u0119dzy G a E wstawimy U to czytamy to jako GE G + U + E = GE guerra [gerra] - wojna hamburguesa [amburgesa] - hamburger juguete [hugete] - zabawka Analogicznie w przypadku po\u0142acze\u0144 mi\u0119dzy literami G + U + I = GI: guisante [gisante] - groszek guitarra [gitarra] - gitara H h Litera H w j\u0119zyku hiszpa\u0144skiem jest nieme i w wymowie je pomijamy. hola [ola] - cze\u015b\u0107 hospital [ospital] - szpital helado [elado] - lody I i Liter\u0119 I wymaiamy jak w polskim. isla[isla] - wyspa invierno[inwierno] - zima impresora[impresora] - drukarka J j Liter\u0119 J czytamy jako H jirafa[hirafa] - \u017cyrafa jam\u00f3n[hamon] - szynka K k Liter\u0119 k czytamy jak w polskim ale jest \u017cadko spotykana kiwi[ki\u0142i] - kiwi kayak[kajak] - kajak m\u00e1rketing - marketing L l Liter\u0119 L wymawiamy jak w polskim loro[loro] - papuga lobo[lobo] - wilk lim\u00f3n[limon] - cytryna LL ll LL (Podw\u00f3jne L) wymawiamy jako j (Madryt) w Andaluzji jako d\u017a llamada[jamada] - rozmowa telefoniczna llave[jawe] - klucz lluvia[juwia] - deszcz M m Litera M w polskim brzmi tak samo mariposa[mariposa] - motyl madre[madre] - mama N n Liter\u0119 N wymawiamy tak samo jak w polskim nieve[niewe] - \u015bnieg noche[nocze] - noc nariz[naris] - nos \u00d1 \u00f1 Liter\u0119 \u00d1 wymawiamy jako ni pa\u00f1uelo[pani\u0142elo] - chusteczka pi\u00f1a[pinia] - ananas Espa\u00f1a[espania] - Hiszpania O o Liter\u0119 O wymaiwiamy tak jak w polskim oficina[ofisina] - biuro oso[oso] - nied\u017awied\u017a/mi\u015b oc\u00e9ano[oseano] - ocean P p Liter\u0119 P wymawiamy jak w polskim pero[pero] - gruszka Portugal[Portugal] - Portugalia Q q Liter\u0119 Q u\u017cywamy by stworzy\u0107 g\u0142oski KE lub KI Q + U + E/I = QUE / QUI [KE / KI] Q + U + E = QUE[KE] bosque[boske] - las raqueta[raketa] - rakieta queso[keso] - ser peque\u00f1o[pekenio] - ma\u0142y qu\u00edmica[kimika] - chemia quesadilla[kesadija] querer[kerer] - chcie\u0107 quedada[kedada] - spotkanie towarzyskie tequila[tekila] Q + U + I = QUI[KI] mantequilla[mantekija] - mas\u0142o mosquito[moskito] - komar equipo[ekipo] - dru\u017cyna R r w \u015brodku s\u0142owa litere R wymawiamy tak jak w polskim pera[pera] - gruszka oro[oro] - z\u0142oto ara\u00f1a[arania] - paj\u0105k Je\u015bli na pocz\u0105tku lub bedzie podw\u00f3jne r (rr) to jest w tedy bardziej wyra\u017cne i wibruj\u0105ce regalo[regalo] - prezent arroz[aros] - ry\u017c ramo[ramo] - bukiet Wymowa R ma zmnaczenie bo: pero - ale perro - pies S / T / U Litery S / T / U wymawiamy jak w polskim simple[simple] - prosty/\u0142atwy sol[sol] - s\u0142o\u0144ce Sof\u00eda[Sofija] - Zofia tibur\u00f3n[tiburon] - rekin tomate[tomate] - pomidor tesoro[tesoro] - skarb u\u00f1a[unia] - paznokie\u0107 uva[uwa] - winogrono universidad[uniwersidad] - uniwersytet V v Liter\u0119 V wymawiamy jako B vino[bino] - wino vaso[baso] - szklanka vaca[baka] - krowa vela[bela] - \u015bwieczka W w Wymawiamy jak w angielskim czyli jako \u0142i. wifi[\u0142ifi] web[\u0142eb] windsurf[\u0142indsurf] X x Liter\u0119 X wymawiamy jako ksi conexi\u00f3n[koneksion] - po\u0142\u0105czenie experimento[eksperimento] - eksperyment examen[eksamen] - egzamin Y y Wymawia si\u0119 tak jak polskiej j yogur[jogur] - jogurt yate[jate] - jacht Z Litera Z wyst\u0119puje tylko w po\u0142\u0105czeniu z literami A / E / I / O / U. Zen\u00f3n[senos] - Zenon zinc[sink] - cynk zapato[sapato] - but azul[asul] - niebieski zorro[sorro] - lis Pytania dotycz\u0105ce alfabetu \u00bfC\u00f3mo se escribe...? - Jak si\u0119 pisze...? \u00bfC\u00f3mo se escribe HOLA? Hola se escribe H-O-L-A. \u00bfPuedes repetir, por favor? Czy mo\u017cesz powt\u00f3rzy\u0107, prosz\u0119? \u00bfPuedes deletrear tu nombre? - Czy mo\u017cesz przeliterowa\u0107 swoje imi\u0119?","title":"Hiszpanski s\u0142ownictwo"},{"location":"hiszpanski/slownictwo/#hiszpanski-sownictwo","text":"","title":"Hiszpanski s\u0142ownictwo"},{"location":"hiszpanski/slownictwo/#1-poczatek","text":"","title":"1. Pocz\u0105tek"},{"location":"hiszpanski/slownictwo/#wymowa-liter-sow","text":"A a [a] B b [be] C c [ce] wymawiaj se Ch ch [che] wymawiaj cze D d [de] E e [e] F f [efe] G g [ge] wymawiaj he H h [hache] wymawiaj acze I i [i] J j [jota] wymawiaj chota K k [ka] L l [ele] LL ll [elle] wymawiaj eje M m [eme] N n [ene] \u00d1 \u00f1 e\u00f1e wymawiaj enie O o [o] P p [pe] Q q [cu] wymawiaj ku R r [erre] S s [ese] T t [te] U u [u] V v [uve] wymiawiaj u\u0142e W w [uve doble] wymawiaj \u0142e doble X x [equis] wymawiaj ekis Y y [i griega] wymawiaj i grjeka Z z [zeta] wymawiaj seta","title":"Wymowa liter s\u0142\u00f3w"},{"location":"hiszpanski/slownictwo/#przykady","text":"","title":"Przyk\u0142ady:"},{"location":"hiszpanski/slownictwo/#a-a-jak-w-polskim","text":"avi\u00f3n wymawiaj (awion) - samolot ardilla wymawiaj ardija wiewi\u00f3rka","title":"A a jak w polskim:"},{"location":"hiszpanski/slownictwo/#b-b-jak-w-polskim","text":"barco wymiawiaj barko - statek besos wymawiaj besos - buziaki Barcelona wymawiaj Barselona","title":"B b jak w polskim:"},{"location":"hiszpanski/slownictwo/#c-c","text":"Liter\u0119 C w po\u0142\u0105czeniu z A / O / U wymawiamy jako polskie K C + A / O / U = KA/KO/KU: cama wymawiaj kama - \u0142\u00f3\u017cko coche wymawiaj kocze - samoch\u00f3d Liter\u0119 C w po\u0142\u0105czeniu z E lub I C + E / I = \u03b8wymawiaj fe lub se/si cebolla [feboja/seboja] - cebula cereza [feresa/seresa] - wi\u015bnia/czere\u015bnia ciudad [fiudad/siudad] - miasto cine [fine/sine] - kino","title":"C c:"},{"location":"hiszpanski/slownictwo/#ch-ch","text":"Liter\u0119 Ch wymawia si\u0119 jako cze chica [czika] - dziewczyna chocolate [czokolate] - czekolada coche [kocze] - samoch\u00f3d noche [nocze] - noc","title":"Ch ch"},{"location":"hiszpanski/slownictwo/#d-e-f-jak-w-polskim","text":"Przyk\u0142ady dedo [dedo] - palec diente [djente] - z\u0105b dinero [dinero] - pieni\u0105dze espejo [espeho] - lustro elefante [elefante] - s\u0142o\u0144 falda [falda] - sp\u00f3dniczka fuego [f\u0142ego] - ogien","title":"D E F jak w polskim"},{"location":"hiszpanski/slownictwo/#g-g","text":"Litere G w po\u0142\u0105czeniu z A / O / U wymawiamy jako G (tak jak w polskim) G + A/O/U gato [gato] - kot gafas [gafas] - okulary gota [gota] - kropla gorra [gorra] - czapka z daszkiem agua [ag\u0142a] - woda guapo [g\u0142apo] - przystojny G + E / I = H czytamy wtedy jako H: genial [henial] - genialny gimnasio [himnazio] - si\u0142ownia Je\u015bli pomi\u0119dzy G a E wstawimy U to czytamy to jako GE G + U + E = GE guerra [gerra] - wojna hamburguesa [amburgesa] - hamburger juguete [hugete] - zabawka Analogicznie w przypadku po\u0142acze\u0144 mi\u0119dzy literami G + U + I = GI: guisante [gisante] - groszek guitarra [gitarra] - gitara","title":"G g"},{"location":"hiszpanski/slownictwo/#h-h","text":"Litera H w j\u0119zyku hiszpa\u0144skiem jest nieme i w wymowie je pomijamy. hola [ola] - cze\u015b\u0107 hospital [ospital] - szpital helado [elado] - lody","title":"H h"},{"location":"hiszpanski/slownictwo/#i-i","text":"Liter\u0119 I wymaiamy jak w polskim. isla[isla] - wyspa invierno[inwierno] - zima impresora[impresora] - drukarka","title":"I i"},{"location":"hiszpanski/slownictwo/#j-j","text":"Liter\u0119 J czytamy jako H jirafa[hirafa] - \u017cyrafa jam\u00f3n[hamon] - szynka","title":"J j"},{"location":"hiszpanski/slownictwo/#k-k","text":"Liter\u0119 k czytamy jak w polskim ale jest \u017cadko spotykana kiwi[ki\u0142i] - kiwi kayak[kajak] - kajak m\u00e1rketing - marketing","title":"K k"},{"location":"hiszpanski/slownictwo/#l-l","text":"Liter\u0119 L wymawiamy jak w polskim loro[loro] - papuga lobo[lobo] - wilk lim\u00f3n[limon] - cytryna","title":"L l"},{"location":"hiszpanski/slownictwo/#ll-ll","text":"LL (Podw\u00f3jne L) wymawiamy jako j (Madryt) w Andaluzji jako d\u017a llamada[jamada] - rozmowa telefoniczna llave[jawe] - klucz lluvia[juwia] - deszcz","title":"LL ll"},{"location":"hiszpanski/slownictwo/#m-m","text":"Litera M w polskim brzmi tak samo mariposa[mariposa] - motyl madre[madre] - mama","title":"M m"},{"location":"hiszpanski/slownictwo/#n-n","text":"Liter\u0119 N wymawiamy tak samo jak w polskim nieve[niewe] - \u015bnieg noche[nocze] - noc nariz[naris] - nos","title":"N n"},{"location":"hiszpanski/slownictwo/#_1","text":"Liter\u0119 \u00d1 wymawiamy jako ni pa\u00f1uelo[pani\u0142elo] - chusteczka pi\u00f1a[pinia] - ananas Espa\u00f1a[espania] - Hiszpania","title":"&Ntilde; &ntilde;"},{"location":"hiszpanski/slownictwo/#o-o","text":"Liter\u0119 O wymaiwiamy tak jak w polskim oficina[ofisina] - biuro oso[oso] - nied\u017awied\u017a/mi\u015b oc\u00e9ano[oseano] - ocean","title":"O o"},{"location":"hiszpanski/slownictwo/#p-p","text":"Liter\u0119 P wymawiamy jak w polskim pero[pero] - gruszka Portugal[Portugal] - Portugalia","title":"P p"},{"location":"hiszpanski/slownictwo/#q-q","text":"Liter\u0119 Q u\u017cywamy by stworzy\u0107 g\u0142oski KE lub KI Q + U + E/I = QUE / QUI [KE / KI] Q + U + E = QUE[KE] bosque[boske] - las raqueta[raketa] - rakieta queso[keso] - ser peque\u00f1o[pekenio] - ma\u0142y qu\u00edmica[kimika] - chemia quesadilla[kesadija] querer[kerer] - chcie\u0107 quedada[kedada] - spotkanie towarzyskie tequila[tekila] Q + U + I = QUI[KI] mantequilla[mantekija] - mas\u0142o mosquito[moskito] - komar equipo[ekipo] - dru\u017cyna","title":"Q q"},{"location":"hiszpanski/slownictwo/#r-r","text":"w \u015brodku s\u0142owa litere R wymawiamy tak jak w polskim pera[pera] - gruszka oro[oro] - z\u0142oto ara\u00f1a[arania] - paj\u0105k Je\u015bli na pocz\u0105tku lub bedzie podw\u00f3jne r (rr) to jest w tedy bardziej wyra\u017cne i wibruj\u0105ce regalo[regalo] - prezent arroz[aros] - ry\u017c ramo[ramo] - bukiet Wymowa R ma zmnaczenie bo: pero - ale perro - pies","title":"R r"},{"location":"hiszpanski/slownictwo/#s-t-u","text":"Litery S / T / U wymawiamy jak w polskim simple[simple] - prosty/\u0142atwy sol[sol] - s\u0142o\u0144ce Sof\u00eda[Sofija] - Zofia tibur\u00f3n[tiburon] - rekin tomate[tomate] - pomidor tesoro[tesoro] - skarb u\u00f1a[unia] - paznokie\u0107 uva[uwa] - winogrono universidad[uniwersidad] - uniwersytet","title":"S / T / U"},{"location":"hiszpanski/slownictwo/#v-v","text":"Liter\u0119 V wymawiamy jako B vino[bino] - wino vaso[baso] - szklanka vaca[baka] - krowa vela[bela] - \u015bwieczka","title":"V v"},{"location":"hiszpanski/slownictwo/#w-w","text":"Wymawiamy jak w angielskim czyli jako \u0142i. wifi[\u0142ifi] web[\u0142eb] windsurf[\u0142indsurf]","title":"W w"},{"location":"hiszpanski/slownictwo/#x-x","text":"Liter\u0119 X wymawiamy jako ksi conexi\u00f3n[koneksion] - po\u0142\u0105czenie experimento[eksperimento] - eksperyment examen[eksamen] - egzamin","title":"X x"},{"location":"hiszpanski/slownictwo/#y-y","text":"Wymawia si\u0119 tak jak polskiej j yogur[jogur] - jogurt yate[jate] - jacht","title":"Y y"},{"location":"hiszpanski/slownictwo/#z","text":"Litera Z wyst\u0119puje tylko w po\u0142\u0105czeniu z literami A / E / I / O / U. Zen\u00f3n[senos] - Zenon zinc[sink] - cynk zapato[sapato] - but azul[asul] - niebieski zorro[sorro] - lis","title":"Z"},{"location":"hiszpanski/slownictwo/#pytania-dotyczace-alfabetu","text":"\u00bfC\u00f3mo se escribe...? - Jak si\u0119 pisze...? \u00bfC\u00f3mo se escribe HOLA? Hola se escribe H-O-L-A. \u00bfPuedes repetir, por favor? Czy mo\u017cesz powt\u00f3rzy\u0107, prosz\u0119? \u00bfPuedes deletrear tu nombre? - Czy mo\u017cesz przeliterowa\u0107 swoje imi\u0119?","title":"Pytania dotycz\u0105ce alfabetu"}]}